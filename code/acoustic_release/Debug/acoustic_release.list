
acoustic_release.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009704  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080098b8  080098b8  000198b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cdc  08009cdc  000207dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009cdc  08009cdc  00019cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ce4  08009ce4  000207dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce4  08009ce4  00019ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ce8  08009ce8  00019ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007dc  20000000  08009cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  200007dc  0800a4c8  000207dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002554  0800a4c8  00022554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d03  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003093  00000000  00000000  0003650f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003a870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce94  00000000  00000000  0003b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a2d  00000000  00000000  00068874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111c48  00000000  00000000  0007e2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018fee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f1c  00000000  00000000  0018ff3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200007dc 	.word	0x200007dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800989c 	.word	0x0800989c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200007e0 	.word	0x200007e0
 80001ec:	0800989c 	.word	0x0800989c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <send_samples>:
inline void send_sample(uint16_t sample) {
    write_char(sample & 0xFF);
    write_char((sample >> 8) & 0xFF);
}

void send_samples(uint16_t *samples) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    uint16_t i = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	81fb      	strh	r3, [r7, #14]
    while (i < 1024) {
 8000f18:	e016      	b.n	8000f48 <send_samples+0x3c>
    	write_char(samples[i] & 0xFF);
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 f8cc 	bl	80020c4 <write_char>
    	write_char((samples[i] >> 8) & 0xFF);
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 f8c1 	bl	80020c4 <write_char>
        i++;
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	3301      	adds	r3, #1
 8000f46:	81fb      	strh	r3, [r7, #14]
    while (i < 1024) {
 8000f48:	89fb      	ldrh	r3, [r7, #14]
 8000f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4e:	d3e4      	bcc.n	8000f1a <send_samples+0xe>
    }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <send_ss_seq>:

void send_ss_seq(void) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < 8; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	e005      	b.n	8000f72 <send_ss_seq+0x18>
        write_char(0xFF);
 8000f66:	20ff      	movs	r0, #255	; 0xff
 8000f68:	f001 f8ac 	bl	80020c4 <write_char>
    for (i = 0; i < 8; i++)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b07      	cmp	r3, #7
 8000f76:	d9f6      	bls.n	8000f66 <send_ss_seq+0xc>
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <FIX_MPY>:
  Substitute inline assembly for hardware-specific
  optimization suited to a particluar DSP processor.
  Scaling ensures that result remains 16-bit.
*/
short FIX_MPY(short a, short b)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	460a      	mov	r2, r1
 8000f8c:	80fb      	strh	r3, [r7, #6]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	80bb      	strh	r3, [r7, #4]
    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 14;
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	139b      	asrs	r3, r3, #14
 8000fa0:	60fb      	str	r3, [r7, #12]
    /* last bit shifted out = rounding-bit */
    b = c & 0x01;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	80bb      	strh	r3, [r7, #4]
    /* last shift + rounding bit */
    a = (c >> 1) + b;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	105b      	asrs	r3, r3, #1
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	80fb      	strh	r3, [r7, #6]
    return a;
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <fix_fft>:
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(short fr[], short fi[], short m, short inverse)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b093      	sub	sp, #76	; 0x4c
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	460b      	mov	r3, r1
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	80bb      	strh	r3, [r7, #4]
    int mr, nn, i, j, l, k, istep, n, scale, shift;
    short qr, qi, tr, ti, wr, wi;

    n = 1 << m;
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	623b      	str	r3, [r7, #32]

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff4:	dd02      	ble.n	8000ffc <fix_fft+0x30>
        return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e173      	b.n	80012e4 <fix_fft+0x318>

    mr = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
    nn = n - 1;
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	3b01      	subs	r3, #1
 8001004:	61fb      	str	r3, [r7, #28]
    scale = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
 800100a:	2301      	movs	r3, #1
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	e04e      	b.n	80010ae <fix_fft+0xe2>
        l = n;
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
        do {
            l >>= 1;
 8001014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001016:	105b      	asrs	r3, r3, #1
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (mr+l > nn);
 800101a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101e:	4413      	add	r3, r2
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbf6      	blt.n	8001014 <fix_fft+0x48>
        mr = (mr & (l-1)) + l;
 8001026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800102c:	4013      	ands	r3, r2
 800102e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001030:	4413      	add	r3, r2
 8001032:	647b      	str	r3, [r7, #68]	; 0x44

        if (mr <= m)
 8001034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800103a:	429a      	cmp	r2, r3
 800103c:	dd32      	ble.n	80010a4 <fix_fft+0xd8>
            continue;
        tr = fr[m];
 800103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	82fb      	strh	r3, [r7, #22]
        fr[m] = fr[mr];
 800104c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	441a      	add	r2, r3
 8001054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	440b      	add	r3, r1
 800105e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001062:	801a      	strh	r2, [r3, #0]
        fr[mr] = tr;
 8001064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	8afa      	ldrh	r2, [r7, #22]
 800106e:	801a      	strh	r2, [r3, #0]
        ti = fi[m];
 8001070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	4413      	add	r3, r2
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	82bb      	strh	r3, [r7, #20]
        fi[m] = fi[mr];
 800107e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	441a      	add	r2, r3
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	440b      	add	r3, r1
 8001090:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001094:	801a      	strh	r2, [r3, #0]
        fi[mr] = ti;
 8001096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	4413      	add	r3, r2
 800109e:	8aba      	ldrh	r2, [r7, #20]
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	e000      	b.n	80010a6 <fix_fft+0xda>
            continue;
 80010a4:	bf00      	nop
    for (m=1; m<=nn; ++m) {
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	80fb      	strh	r3, [r7, #6]
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	daab      	bge.n	8001010 <fix_fft+0x44>
    }

    l = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
    k = LOG2_N_WAVE-1;
 80010bc:	2309      	movs	r3, #9
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    while (l < n) {
 80010c0:	e10a      	b.n	80012d8 <fix_fft+0x30c>
        if (inverse) {
 80010c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d039      	beq.n	800113e <fix_fft+0x172>
            /* variable scaling, depending upon data */
            shift = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (i=0; i<n; ++i) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
 80010d2:	e029      	b.n	8001128 <fix_fft+0x15c>
                j = fr[i];
 80010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (j < 0)
 80010e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da02      	bge.n	80010ee <fix_fft+0x122>
                    j = -j;
 80010e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ea:	425b      	negs	r3, r3
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                m = fi[i];
 80010ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	80fb      	strh	r3, [r7, #6]
                if (m < 0)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da03      	bge.n	800110a <fix_fft+0x13e>
                    m = -m;
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	425b      	negs	r3, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	80fb      	strh	r3, [r7, #6]
                if (j > 16383 || m > 16383) {
 800110a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001110:	da04      	bge.n	800111c <fix_fft+0x150>
 8001112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800111a:	db02      	blt.n	8001122 <fix_fft+0x156>
                    shift = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001120:	e006      	b.n	8001130 <fix_fft+0x164>
            for (i=0; i<n; ++i) {
 8001122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001124:	3301      	adds	r3, #1
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
 8001128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbd1      	blt.n	80010d4 <fix_fft+0x108>
                }
            }
            if (shift)
 8001130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <fix_fft+0x176>
                ++scale;
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	3301      	adds	r3, #1
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
 800113c:	e001      	b.n	8001142 <fix_fft+0x176>
              fixed scaling, for proper normalization --
              there will be log2(n) passes, so this results
              in an overall factor of 1/n, distributed to
              maximize arithmetic accuracy.
            */
            shift = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*
          it may not be obvious, but the shift will be
          performed on each data point exactly once,
          during this pass.
        */
        istep = l << 1;
 8001142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
        for (m=0; m<l; ++m) {
 8001148:	2300      	movs	r3, #0
 800114a:	80fb      	strh	r3, [r7, #6]
 800114c:	e0b9      	b.n	80012c2 <fix_fft+0x2f6>
            j = m << k;
 800114e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* 0 <= j < N_WAVE/2 */
            wr =  Sinewave[j+N_WAVE/4];
 800115a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800115c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001160:	4a62      	ldr	r2, [pc, #392]	; (80012ec <fix_fft+0x320>)
 8001162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001166:	84fb      	strh	r3, [r7, #38]	; 0x26
            wi = -Sinewave[j];
 8001168:	4a60      	ldr	r2, [pc, #384]	; (80012ec <fix_fft+0x320>)
 800116a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800116c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001170:	b29b      	uxth	r3, r3
 8001172:	425b      	negs	r3, r3
 8001174:	b29b      	uxth	r3, r3
 8001176:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (inverse)
 8001178:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <fix_fft+0x1bc>
                wi = -wi;
 8001180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001182:	425b      	negs	r3, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (shift) {
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <fix_fft+0x1d2>
                wr >>= 1;
 800118e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001192:	105b      	asrs	r3, r3, #1
 8001194:	84fb      	strh	r3, [r7, #38]	; 0x26
                wi >>= 1;
 8001196:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800119a:	105b      	asrs	r3, r3, #1
 800119c:	84bb      	strh	r3, [r7, #36]	; 0x24
            }
            for (i=m; i<n; i+=istep) {
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
 80011a4:	e084      	b.n	80012b0 <fix_fft+0x2e4>
                j = i + l;
 80011a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011aa:	4413      	add	r3, r2
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
 80011ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4413      	add	r3, r2
 80011b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fede 	bl	8000f82 <FIX_MPY>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29c      	uxth	r4, r3
 80011ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	4413      	add	r3, r2
 80011d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fed0 	bl	8000f82 <FIX_MPY>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	1ae3      	subs	r3, r4, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	82fb      	strh	r3, [r7, #22]
                ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);
 80011ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	4413      	add	r3, r2
 80011f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff febf 	bl	8000f82 <FIX_MPY>
 8001204:	4603      	mov	r3, r0
 8001206:	b29c      	uxth	r4, r3
 8001208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001214:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff feb1 	bl	8000f82 <FIX_MPY>
 8001220:	4603      	mov	r3, r0
 8001222:	b29b      	uxth	r3, r3
 8001224:	4423      	add	r3, r4
 8001226:	b29b      	uxth	r3, r3
 8001228:	82bb      	strh	r3, [r7, #20]
                qr = fr[i];
 800122a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4413      	add	r3, r2
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	857b      	strh	r3, [r7, #42]	; 0x2a
                qi = fi[i];
 8001236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	853b      	strh	r3, [r7, #40]	; 0x28
                if (shift) {
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <fix_fft+0x28c>
                    qr >>= 1;
 8001248:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800124c:	105b      	asrs	r3, r3, #1
 800124e:	857b      	strh	r3, [r7, #42]	; 0x2a
                    qi >>= 1;
 8001250:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001254:	105b      	asrs	r3, r3, #1
 8001256:	853b      	strh	r3, [r7, #40]	; 0x28
                }
                fr[j] = qr - tr;
 8001258:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800125a:	8afb      	ldrh	r3, [r7, #22]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b299      	uxth	r1, r3
 8001260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	b20a      	sxth	r2, r1
 800126a:	801a      	strh	r2, [r3, #0]
                fi[j] = qi - ti;
 800126c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800126e:	8abb      	ldrh	r3, [r7, #20]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b299      	uxth	r1, r3
 8001274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	4413      	add	r3, r2
 800127c:	b20a      	sxth	r2, r1
 800127e:	801a      	strh	r2, [r3, #0]
                fr[i] = qr + tr;
 8001280:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001282:	8afb      	ldrh	r3, [r7, #22]
 8001284:	4413      	add	r3, r2
 8001286:	b299      	uxth	r1, r3
 8001288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	b20a      	sxth	r2, r1
 8001292:	801a      	strh	r2, [r3, #0]
                fi[i] = qi + ti;
 8001294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001296:	8abb      	ldrh	r3, [r7, #20]
 8001298:	4413      	add	r3, r2
 800129a:	b299      	uxth	r1, r3
 800129c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	4413      	add	r3, r2
 80012a4:	b20a      	sxth	r2, r1
 80012a6:	801a      	strh	r2, [r3, #0]
            for (i=m; i<n; i+=istep) {
 80012a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4413      	add	r3, r2
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
 80012b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f6ff af76 	blt.w	80011a6 <fix_fft+0x1da>
        for (m=0; m<l; ++m) {
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	3301      	adds	r3, #1
 80012be:	b29b      	uxth	r3, r3
 80012c0:	80fb      	strh	r3, [r7, #6]
 80012c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f73f af40 	bgt.w	800114e <fix_fft+0x182>
            }
        }
        --k;
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d0:	3b01      	subs	r3, #1
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
        l = istep;
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
    while (l < n) {
 80012d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	429a      	cmp	r2, r3
 80012de:	f6ff aef0 	blt.w	80010c2 <fix_fft+0xf6>
    }
    return scale;
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	374c      	adds	r7, #76	; 0x4c
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	20000000 	.word	0x20000000

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f000 ff2e 	bl	8002156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f8a7 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 f9f7 	bl	80016f0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001302:	f000 f97d 	bl	8001600 <MX_LPUART1_UART_Init>
  MX_DMA_Init();
 8001306:	f000 f9d5 	bl	80016b4 <MX_DMA_Init>
  MX_ADC1_Init();
 800130a:	f000 f903 	bl	8001514 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800130e:	f000 f9a3 	bl	8001658 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

    //HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID, &dma_xfer_cplt);

    /* Enable transmitter */
    LPUART1->CR1 |= 1 << 3;
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <main+0x134>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a43      	ldr	r2, [pc, #268]	; (8001424 <main+0x134>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6013      	str	r3, [r2, #0]
    //  write_char('a');
    //  write_char('b');
    //  write_char('c');
    int i = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
    //  ADC1->CR |= 1;
    //  for (i = 0; i < 10000; i++);
    //  ADC1->CR |= 1 << 2;
    //for (i = 0 ; i < 10000; i++);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	4840      	ldr	r0, [pc, #256]	; (8001428 <main+0x138>)
 8001328:	f003 f834 	bl	8004394 <HAL_GPIO_WritePin>

    POWER_ON(PREAMP);
 800132c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133a:	6193      	str	r3, [r2, #24]
    POWER_ON(FILTER);
 800133c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	6193      	str	r3, [r2, #24]

    HAL_Delay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001350:	f000 ff76 	bl	8002240 <HAL_Delay>

    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buf, FFT_LEN);
 8001354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001358:	4934      	ldr	r1, [pc, #208]	; (800142c <main+0x13c>)
 800135a:	4835      	ldr	r0, [pc, #212]	; (8001430 <main+0x140>)
 800135c:	f001 fb24 	bl	80029a8 <HAL_ADC_Start_DMA>
        //	uint16_t adc = ADC1->DR;
        //	write_char(adc & 0xFF);
        //	write_char((adc >> 8) & 0xFF);


        if (adcbuf_ready) {
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <main+0x144>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0fb      	beq.n	8001360 <main+0x70>
            adcbuf_ready = 0;
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <main+0x144>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
            send_ss_seq();
 800136e:	f7ff fdf4 	bl	8000f5a <send_ss_seq>
#endif
            fix_fft(buf, imag, 10, 0);
 8001372:	2300      	movs	r3, #0
 8001374:	220a      	movs	r2, #10
 8001376:	4930      	ldr	r1, [pc, #192]	; (8001438 <main+0x148>)
 8001378:	482c      	ldr	r0, [pc, #176]	; (800142c <main+0x13c>)
 800137a:	f7ff fe27 	bl	8000fcc <fix_fft>
            compute_freq_mag(buf, imag, mag, 0, FFT_LEN);
 800137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	4a2d      	ldr	r2, [pc, #180]	; (800143c <main+0x14c>)
 8001388:	492b      	ldr	r1, [pc, #172]	; (8001438 <main+0x148>)
 800138a:	4828      	ldr	r0, [pc, #160]	; (800142c <main+0x13c>)
 800138c:	f000 fb02 	bl	8001994 <compute_freq_mag>
            foundf1 = sigdet(buf, imag, mag, FREQL);
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <main+0x150>)
 8001392:	4a2a      	ldr	r2, [pc, #168]	; (800143c <main+0x14c>)
 8001394:	4928      	ldr	r1, [pc, #160]	; (8001438 <main+0x148>)
 8001396:	4825      	ldr	r0, [pc, #148]	; (800142c <main+0x13c>)
 8001398:	f000 fb4e 	bl	8001a38 <sigdet>
 800139c:	4603      	mov	r3, r0
 800139e:	70fb      	strb	r3, [r7, #3]
            foundf2 = sigdet(buf, imag, mag, FREQH);
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <main+0x154>)
 80013a2:	4a26      	ldr	r2, [pc, #152]	; (800143c <main+0x14c>)
 80013a4:	4924      	ldr	r1, [pc, #144]	; (8001438 <main+0x148>)
 80013a6:	4821      	ldr	r0, [pc, #132]	; (800142c <main+0x13c>)
 80013a8:	f000 fb46 	bl	8001a38 <sigdet>
 80013ac:	4603      	mov	r3, r0
 80013ae:	70bb      	strb	r3, [r7, #2]
//            HAL_Delay(10000);
//            POWER_OFF(PREAMP);
//            POWER_OFF(FILTER);
//            HAL_Delay(10000);
            //GPIOB->BSRR = GPIO_PIN_14;
            if (foundf1)
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <main+0xd4>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013bc:	481a      	ldr	r0, [pc, #104]	; (8001428 <main+0x138>)
 80013be:	f002 ffe9 	bl	8004394 <HAL_GPIO_WritePin>
 80013c2:	e005      	b.n	80013d0 <main+0xe0>
            else
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <main+0x138>)
 80013cc:	f002 ffe2 	bl	8004394 <HAL_GPIO_WritePin>

            if (foundf2)
 80013d0:	78bb      	ldrb	r3, [r7, #2]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <main+0xf2>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	481b      	ldr	r0, [pc, #108]	; (8001448 <main+0x158>)
 80013dc:	f002 ffda 	bl	8004394 <HAL_GPIO_WritePin>
 80013e0:	e004      	b.n	80013ec <main+0xfc>
            else
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <main+0x158>)
 80013e8:	f002 ffd4 	bl	8004394 <HAL_GPIO_WritePin>
            release = check_state(foundf1, foundf2);
 80013ec:	78ba      	ldrb	r2, [r7, #2]
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fa5c 	bl	80018b0 <check_state>
 80013f8:	4603      	mov	r3, r0
 80013fa:	707b      	strb	r3, [r7, #1]
            if (release) {
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <main+0x11c>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <main+0x138>)
 8001408:	f002 ffc4 	bl	8004394 <HAL_GPIO_WritePin>
            }
#ifdef DEBUG
            send_samples(mag);
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <main+0x14c>)
 800140e:	f7ff fd7d 	bl	8000f0c <send_samples>
            send_ss_seq();
 8001412:	f7ff fda2 	bl	8000f5a <send_ss_seq>
#endif
            HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buf, FFT_LEN);
 8001416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141a:	4904      	ldr	r1, [pc, #16]	; (800142c <main+0x13c>)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <main+0x140>)
 800141e:	f001 fac3 	bl	80029a8 <HAL_ADC_Start_DMA>
        if (adcbuf_ready) {
 8001422:	e79d      	b.n	8001360 <main+0x70>
 8001424:	40008000 	.word	0x40008000
 8001428:	48000400 	.word	0x48000400
 800142c:	20000d34 	.word	0x20000d34
 8001430:	200007f8 	.word	0x200007f8
 8001434:	20002534 	.word	0x20002534
 8001438:	20001534 	.word	0x20001534
 800143c:	20001d34 	.word	0x20001d34
 8001440:	0002d2a8 	.word	0x0002d2a8
 8001444:	00030d40 	.word	0x00030d40
 8001448:	48000800 	.word	0x48000800

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b096      	sub	sp, #88	; 0x58
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2244      	movs	r2, #68	; 0x44
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fc22 	bl	8006ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800146e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001472:	f003 f90d 	bl	8004690 <HAL_PWREx_ControlVoltageScaling>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800147c:	f000 fa12 	bl	80018a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001480:	f003 f8e8 	bl	8004654 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <SystemClock_Config+0xc4>)
 8001486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <SystemClock_Config+0xc4>)
 800148c:	f023 0318 	bic.w	r3, r3, #24
 8001490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001494:	2314      	movs	r3, #20
 8001496:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014a4:	2360      	movs	r3, #96	; 0x60
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a8:	2302      	movs	r3, #2
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014b4:	2328      	movs	r3, #40	; 0x28
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014bc:	2302      	movs	r3, #2
 80014be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 f957 	bl	800477c <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014d4:	f000 f9e6 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2303      	movs	r3, #3
 80014de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	2104      	movs	r1, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fd68 	bl	8004fc8 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80014fe:	f000 f9d1 	bl	80018a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001502:	f004 fa63 	bl	80059cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001506:	bf00      	nop
 8001508:	3758      	adds	r7, #88	; 0x58
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001538:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <MX_ADC1_Init+0xe4>)
 800153a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_ADC1_Init+0xe0>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_ADC1_Init+0xe0>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001556:	2204      	movs	r2, #4
 8001558:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <MX_ADC1_Init+0xe0>)
 800155c:	2200      	movs	r2, #0
 800155e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001562:	2201      	movs	r2, #1
 8001564:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001568:	2201      	movs	r2, #1
 800156a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_ADC1_Init+0xe0>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_ADC1_Init+0xe0>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_ADC1_Init+0xe0>)
 800158a:	2200      	movs	r2, #0
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001596:	4817      	ldr	r0, [pc, #92]	; (80015f4 <MX_ADC1_Init+0xe0>)
 8001598:	f001 f8ac 	bl	80026f4 <HAL_ADC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80015a2:	f000 f97f 	bl	80018a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4810      	ldr	r0, [pc, #64]	; (80015f4 <MX_ADC1_Init+0xe0>)
 80015b2:	f002 f965 	bl	8003880 <HAL_ADCEx_MultiModeConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015bc:	f000 f972 	bl	80018a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_ADC1_Init+0xe8>)
 80015c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c4:	2306      	movs	r3, #6
 80015c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80015c8:	2304      	movs	r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015cc:	237f      	movs	r3, #127	; 0x7f
 80015ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d0:	2304      	movs	r3, #4
 80015d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_ADC1_Init+0xe0>)
 80015de:	f001 fb0b 	bl	8002bf8 <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80015e8:	f000 f95c 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200007f8 	.word	0x200007f8
 80015f8:	50040000 	.word	0x50040000
 80015fc:	04300002 	.word	0x04300002

08001600 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_LPUART1_UART_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_LPUART1_UART_Init+0x50>)
 800163e:	f004 fba3 	bl	8005d88 <HAL_UART_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001648:	f000 f92c 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200008a8 	.word	0x200008a8
 8001654:	40008000 	.word	0x40008000

08001658 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800165e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001662:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001666:	2206      	movs	r2, #6
 8001668:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800166c:	2202      	movs	r2, #2
 800166e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001672:	2202      	movs	r2, #2
 8001674:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001678:	2201      	movs	r2, #1
 800167a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	2201      	movs	r2, #1
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001696:	2201      	movs	r2, #1
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169c:	f002 fe92 	bl	80043c4 <HAL_PCD_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016a6:	f000 f8fd 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000092c 	.word	0x2000092c

080016b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_DMA_Init+0x38>)
 80016bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <MX_DMA_Init+0x38>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6493      	str	r3, [r2, #72]	; 0x48
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_DMA_Init+0x38>)
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	200b      	movs	r0, #11
 80016d8:	f002 fa5d 	bl	8003b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016dc:	200b      	movs	r0, #11
 80016de:	f002 fa76 	bl	8003bce <HAL_NVIC_EnableIRQ>

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4b55      	ldr	r3, [pc, #340]	; (800185c <MX_GPIO_Init+0x16c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a54      	ldr	r2, [pc, #336]	; (800185c <MX_GPIO_Init+0x16c>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b52      	ldr	r3, [pc, #328]	; (800185c <MX_GPIO_Init+0x16c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	4b4f      	ldr	r3, [pc, #316]	; (800185c <MX_GPIO_Init+0x16c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a4e      	ldr	r2, [pc, #312]	; (800185c <MX_GPIO_Init+0x16c>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <MX_GPIO_Init+0x16c>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <MX_GPIO_Init+0x16c>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a48      	ldr	r2, [pc, #288]	; (800185c <MX_GPIO_Init+0x16c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <MX_GPIO_Init+0x16c>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <MX_GPIO_Init+0x16c>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a42      	ldr	r2, [pc, #264]	; (800185c <MX_GPIO_Init+0x16c>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <MX_GPIO_Init+0x16c>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <MX_GPIO_Init+0x16c>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a3c      	ldr	r2, [pc, #240]	; (800185c <MX_GPIO_Init+0x16c>)
 800176c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <MX_GPIO_Init+0x16c>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800177e:	f002 ffed 	bl	800475c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001782:	2200      	movs	r2, #0
 8001784:	21f3      	movs	r1, #243	; 0xf3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f002 fe03 	bl	8004394 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001794:	4832      	ldr	r0, [pc, #200]	; (8001860 <MX_GPIO_Init+0x170>)
 8001796:	f002 fdfd 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2140      	movs	r1, #64	; 0x40
 800179e:	4831      	ldr	r0, [pc, #196]	; (8001864 <MX_GPIO_Init+0x174>)
 80017a0:	f002 fdf8 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	482f      	ldr	r0, [pc, #188]	; (8001868 <MX_GPIO_Init+0x178>)
 80017aa:	f002 fdf3 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4829      	ldr	r0, [pc, #164]	; (8001868 <MX_GPIO_Init+0x178>)
 80017c4:	f002 fc54 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80017c8:	23f3      	movs	r3, #243	; 0xf3
 80017ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f002 fc45 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80017e6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <MX_GPIO_Init+0x170>)
 8001800:	f002 fc36 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001804:	2320      	movs	r3, #32
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4813      	ldr	r0, [pc, #76]	; (8001864 <MX_GPIO_Init+0x174>)
 8001818:	f002 fc2a 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800181c:	2340      	movs	r3, #64	; 0x40
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_GPIO_Init+0x174>)
 8001834:	f002 fc1c 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	; (8001868 <MX_GPIO_Init+0x178>)
 8001850:	f002 fc0e 	bl	8004070 <HAL_GPIO_Init>

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	48000400 	.word	0x48000400
 8001864:	48001800 	.word	0x48001800
 8001868:	48000800 	.word	0x48000800

0800186c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
void dma_xfer_cplt(DMA_HandleTypeDef *hdma) {
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    //    }
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
    //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buf, FFT_LEN);
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
    //write_char('Z');
    HAL_ADC_Stop_DMA(&hadc1);
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001876:	f001 f953 	bl	8002b20 <HAL_ADC_Stop_DMA>
    adcbuf_ready = 1;
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_ADC_ConvCpltCallback+0x20>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200007f8 	.word	0x200007f8
 800188c:	20002534 	.word	0x20002534

08001890 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
    //write_char('X');
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80018ac:	e7fe      	b.n	80018ac <Error_Handler+0x8>
	...

080018b0 <check_state>:
#define TIMEOUT_CLK_HZ 9400
#define ONE_SECOND_MS 1000

uint8_t timeout = 0;

uint8_t check_state(uint8_t foundf1, uint8_t foundf2) {
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	4613      	mov	r3, r2
 80018be:	71bb      	strb	r3, [r7, #6]
    static state_t state = WAIT_F1;
    static uint8_t transitions = 0;
    static uint16_t f1_repeat_count = 0, f2_repeat_count = 0;
    uint8_t release = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
    if (!foundf1)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <check_state+0x22>
        f1_repeat_count = 0;
 80018ca:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <check_state+0xd0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	801a      	strh	r2, [r3, #0]
 80018d0:	e005      	b.n	80018de <check_state+0x2e>
    else
        f1_repeat_count++;
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <check_state+0xd0>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <check_state+0xd0>)
 80018dc:	801a      	strh	r2, [r3, #0]
    if (!foundf2)
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d103      	bne.n	80018ec <check_state+0x3c>
        f2_repeat_count = 0;
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <check_state+0xd4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	e005      	b.n	80018f8 <check_state+0x48>
    else
        f2_repeat_count++;
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <check_state+0xd4>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <check_state+0xd4>)
 80018f6:	801a      	strh	r2, [r3, #0]
    /* Listening for the first frequency */
    if (state == WAIT_F1) {
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <check_state+0xd8>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10d      	bne.n	800191c <check_state+0x6c>
//        if (foundf1 && !foundf2) {
//            //f1_repeat_count++;
//            //f2_repeat_count = 0;
//        }
        if (f1_repeat_count > REPEAT_THRESH) {
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <check_state+0xd0>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d91a      	bls.n	800193e <check_state+0x8e>
            state = WAIT_F2;
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <check_state+0xd8>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
            //f1_repeat_count = 0;
            transitions++;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <check_state+0xdc>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <check_state+0xdc>)
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	e010      	b.n	800193e <check_state+0x8e>
//        else if (!foundf1) {
//            state = WAIT_F1;
//        }
    }
    /* Listening for the second frequency */
    else if (state == WAIT_F2) {
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <check_state+0xd8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10c      	bne.n	800193e <check_state+0x8e>
//        if (foundf1 && !foundf2) {
//            f2_repeat_count++;
//            //f1_repeat_count = 0;
//        }
        if (f2_repeat_count > REPEAT_THRESH) {
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <check_state+0xd4>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d908      	bls.n	800193e <check_state+0x8e>
            state = WAIT_F1;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <check_state+0xd8>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
            //f2_repeat_count = 0;
            transitions++;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <check_state+0xdc>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <check_state+0xdc>)
 800193c:	701a      	strb	r2, [r3, #0]
//        else if (!foundf2) {
//            state = WAIT_F2;
//        }
    }
    /* No transitions occurred after some time */
    if (timeout) {
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <check_state+0xe0>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <check_state+0xa8>
        /* Back to initial state, clear all recorded transitions */
        state = WAIT_F1;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <check_state+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
        transitions = 0;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <check_state+0xdc>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
        //P1->OUT &= ~BIT0;
        /* Reset timeout */
        timeout = 0;
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <check_state+0xe0>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
        //TIMER_A1->R = 0;
        //TIMER_A1->CTL |= TIMER_A_CTL_MC__UP;
    }
    /* Heard the correct number of transitions - release! */
    if (transitions == TRANSITION_AMOUNT) {
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <check_state+0xdc>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d107      	bne.n	8001970 <check_state+0xc0>
        release = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
        state = WAIT_F1;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <check_state+0xd8>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
        transitions = 0;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <check_state+0xdc>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
    }
    return release;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20002536 	.word	0x20002536
 8001984:	20002538 	.word	0x20002538
 8001988:	2000253a 	.word	0x2000253a
 800198c:	2000253b 	.word	0x2000253b
 8001990:	20002535 	.word	0x20002535

08001994 <compute_freq_mag>:
/*
 * Calculate the frequency magnitude given an array
 * of both real and imaginary parts. Modify real array
 * in place with the result.
 */
void compute_freq_mag(int16_t *real, int16_t *imag, uint16_t *result, uint16_t start, uint16_t end) {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	83fb      	strh	r3, [r7, #30]
    uint32_t val;
    double freq;
//    uint32_t freq;
    for (i = start; i < end; i++) {
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	83fb      	strh	r3, [r7, #30]
 80019aa:	e039      	b.n	8001a20 <compute_freq_mag+0x8c>
        /* Made magnitude calculation faster */
//        val = (real[i] << 16) | imag[i];
//        val = __SMUAD(val, val);
        freq = real[i] * real[i] + imag[i] * imag[i];
 80019ac:	8bfb      	ldrh	r3, [r7, #30]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	4619      	mov	r1, r3
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	fb03 f201 	mul.w	r2, r3, r1
 80019ca:	8bfb      	ldrh	r3, [r7, #30]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	440b      	add	r3, r1
 80019d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d6:	4618      	mov	r0, r3
 80019d8:	8bfb      	ldrh	r3, [r7, #30]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	440b      	add	r3, r1
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	fb00 f303 	mul.w	r3, r0, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdaa 	bl	8000544 <__aeabi_i2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        freq = sqrt(freq);
 80019f8:	ed97 0b04 	vldr	d0, [r7, #16]
 80019fc:	f007 fe70 	bl	80096e0 <sqrt>
 8001a00:	ed87 0b04 	vstr	d0, [r7, #16]
//        freq = (freq + val / freq) >> 1;
//        freq = (freq + val / freq) >> 1;
//        freq = (freq + val / freq) >> 1;
//        freq = (freq + val / freq) >> 1;
//        freq = (freq + val / freq) >> 1;
        result[i] = (uint16_t)freq;
 8001a04:	8bfb      	ldrh	r3, [r7, #30]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	18d4      	adds	r4, r2, r3
 8001a0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a10:	f7ff f8da 	bl	8000bc8 <__aeabi_d2uiz>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	8023      	strh	r3, [r4, #0]
    for (i = start; i < end; i++) {
 8001a1a:	8bfb      	ldrh	r3, [r7, #30]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	83fb      	strh	r3, [r7, #30]
 8001a20:	8bfa      	ldrh	r2, [r7, #30]
 8001a22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3c1      	bcc.n	80019ac <compute_freq_mag+0x18>
    }
    result[0] = 0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
	...

08001a38 <sigdet>:

uint8_t sigdet(int16_t *freq, int16_t *imag, uint16_t *mag, uint32_t target) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
    uint32_t total_energy = 0, signal_energy = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
    uint16_t i = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	82fb      	strh	r3, [r7, #22]
    int16_t start;
    start = ((target * BUFSIZE) / SAMPLE_RATE_HZ) - NOISE_RADIUS;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <sigdet+0x100>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c5b      	lsrs	r3, r3, #17
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3b0a      	subs	r3, #10
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	82bb      	strh	r3, [r7, #20]
    if (start <= 0)
 8001a66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	dc01      	bgt.n	8001a72 <sigdet+0x3a>
        start = 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	82bb      	strh	r3, [r7, #20]
    compute_freq_mag(freq, imag, mag, start, start + (NOISE_RADIUS << 1));
 8001a72:	8aba      	ldrh	r2, [r7, #20]
 8001a74:	8abb      	ldrh	r3, [r7, #20]
 8001a76:	3314      	adds	r3, #20
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff ff86 	bl	8001994 <compute_freq_mag>
    /* Determine total energy in wide region around target */
    for (i = start; i < start + (NOISE_RADIUS << 1); i++) {
 8001a88:	8abb      	ldrh	r3, [r7, #20]
 8001a8a:	82fb      	strh	r3, [r7, #22]
 8001a8c:	e00b      	b.n	8001aa6 <sigdet+0x6e>
        total_energy += mag[i];
 8001a8e:	8afb      	ldrh	r3, [r7, #22]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	61fb      	str	r3, [r7, #28]
    for (i = start; i < start + (NOISE_RADIUS << 1); i++) {
 8001aa0:	8afb      	ldrh	r3, [r7, #22]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	82fb      	strh	r3, [r7, #22]
 8001aa6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aaa:	f103 0213 	add.w	r2, r3, #19
 8001aae:	8afb      	ldrh	r3, [r7, #22]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	daec      	bge.n	8001a8e <sigdet+0x56>
    }
    /* Determine signal energy in narrow region around target */
    for (i = start + (NOISE_RADIUS - SIGNAL_RADIUS); i < start + (NOISE_RADIUS + SIGNAL_RADIUS); i++) {
 8001ab4:	8abb      	ldrh	r3, [r7, #20]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	82fb      	strh	r3, [r7, #22]
 8001aba:	e00b      	b.n	8001ad4 <sigdet+0x9c>
        signal_energy += mag[i];
 8001abc:	8afb      	ldrh	r3, [r7, #22]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	4413      	add	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
    for (i = start + (NOISE_RADIUS - SIGNAL_RADIUS); i < start + (NOISE_RADIUS + SIGNAL_RADIUS); i++) {
 8001ace:	8afb      	ldrh	r3, [r7, #22]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	82fb      	strh	r3, [r7, #22]
 8001ad4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ad8:	f103 020b 	add.w	r2, r3, #11
 8001adc:	8afb      	ldrh	r3, [r7, #22]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	daec      	bge.n	8001abc <sigdet+0x84>
    }

    /* No signal */
    if (total_energy < (NOISE_RADIUS << 1)) {
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	2b13      	cmp	r3, #19
 8001ae6:	d801      	bhi.n	8001aec <sigdet+0xb4>
        return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e01b      	b.n	8001b24 <sigdet+0xec>
    }

    /* Output - turn on LED for prototype */
    float snr = (float)signal_energy / (float)total_energy;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b04:	edc7 7a04 	vstr	s15, [r7, #16]
    if (snr > SIGNAL_NOISE_RATIO_MIN) {
 8001b08:	6938      	ldr	r0, [r7, #16]
 8001b0a:	f7fe fd2d 	bl	8000568 <__aeabi_f2d>
 8001b0e:	a308      	add	r3, pc, #32	; (adr r3, 8001b30 <sigdet+0xf8>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7ff f810 	bl	8000b38 <__aeabi_dcmpgt>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <sigdet+0xea>
        /* Signal is detected */
        return 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <sigdet+0xec>
    }
    /* Signal not detected */
    return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	f3af 8000 	nop.w
 8001b30:	33333333 	.word	0x33333333
 8001b34:	3fd33333 	.word	0x3fd33333
 8001b38:	431bde83 	.word	0x431bde83

08001b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_MspInit+0x44>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_MspInit+0x44>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_MspInit+0x44>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_MspInit+0x44>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_MspInit+0x44>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6593      	str	r3, [r2, #88]	; 0x58
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_MspInit+0x44>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0ac      	sub	sp, #176	; 0xb0
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	228c      	movs	r2, #140	; 0x8c
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 f87d 	bl	8006ca4 <memset>
  if(hadc->Instance==ADC1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a3c      	ldr	r2, [pc, #240]	; (8001ca0 <HAL_ADC_MspInit+0x11c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d170      	bne.n	8001c96 <HAL_ADC_MspInit+0x112>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI2;
 8001bba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2N = 30;
 8001bca:	231e      	movs	r3, #30
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV4;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_ADC2CLK;
 8001bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fbf7 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001bec:	f7ff fe5a 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <HAL_ADC_MspInit+0x120>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_ADC_MspInit+0x120>)
 8001bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_ADC_MspInit+0x120>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_ADC_MspInit+0x120>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <HAL_ADC_MspInit+0x120>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_ADC_MspInit+0x120>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c26:	230b      	movs	r3, #11
 8001c28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c36:	4619      	mov	r1, r3
 8001c38:	481b      	ldr	r0, [pc, #108]	; (8001ca8 <HAL_ADC_MspInit+0x124>)
 8001c3a:	f002 fa19 	bl	8004070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_ADC_MspInit+0x12c>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c74:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001c78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c7a:	480c      	ldr	r0, [pc, #48]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c7c:	f001 ffc2 	bl	8003c04 <HAL_DMA_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_ADC_MspInit+0x106>
    {
      Error_Handler();
 8001c86:	f7ff fe0d 	bl	80018a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c8e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_ADC_MspInit+0x128>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	37b0      	adds	r7, #176	; 0xb0
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	50040000 	.word	0x50040000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	20000860 	.word	0x20000860
 8001cb0:	40020008 	.word	0x40020008

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0ac      	sub	sp, #176	; 0xb0
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	228c      	movs	r2, #140	; 0x8c
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f004 ffe5 	bl	8006ca4 <memset>
  if(huart->Instance==LPUART1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <HAL_UART_MspInit+0xb4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d13d      	bne.n	8001d60 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fb6f 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cfc:	f7ff fdd2 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_UART_MspInit+0xb8>)
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_UART_MspInit+0xb8>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0xb8>)
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_UART_MspInit+0xb8>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <HAL_UART_MspInit+0xb8>)
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0xb8>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001d30:	f002 fd14 	bl	800475c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d4e:	2308      	movs	r3, #8
 8001d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_UART_MspInit+0xbc>)
 8001d5c:	f002 f988 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	37b0      	adds	r7, #176	; 0xb0
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40008000 	.word	0x40008000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48001800 	.word	0x48001800

08001d74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0ae      	sub	sp, #184	; 0xb8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	228c      	movs	r2, #140	; 0x8c
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 ff85 	bl	8006ca4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da2:	d17c      	bne.n	8001e9e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001daa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001dba:	2318      	movs	r3, #24
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001dca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fafd 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001de0:	f7ff fd60 	bl	80018a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de8:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dfc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e16:	230a      	movs	r3, #10
 8001e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e20:	4619      	mov	r1, r3
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e26:	f002 f923 	bl	8004070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e42:	4619      	mov	r1, r3
 8001e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e48:	f002 f912 	bl	8004070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d114      	bne.n	8001e9a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001e88:	f002 fc58 	bl	800473c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_PCD_MspInit+0x134>)
 8001e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e98:	e001      	b.n	8001e9e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001e9a:	f002 fc4f 	bl	800473c <HAL_PWREx_EnableVddUSB>
}
 8001e9e:	bf00      	nop
 8001ea0:	37b8      	adds	r7, #184	; 0xb8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef8:	f000 f982 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <DMA1_Channel1_IRQHandler+0x10>)
 8001f06:	f001 ffd3 	bl	8003eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000860 	.word	0x20000860

08001f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	return 1;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_kill>:

int _kill(int pid, int sig)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f2e:	f004 fe8f 	bl	8006c50 <__errno>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2216      	movs	r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
	return -1;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_exit>:

void _exit (int status)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ffe7 	bl	8001f24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f56:	e7fe      	b.n	8001f56 <_exit+0x12>

08001f58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e00a      	b.n	8001f80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f6a:	f3af 8000 	nop.w
 8001f6e:	4601      	mov	r1, r0
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	60ba      	str	r2, [r7, #8]
 8001f76:	b2ca      	uxtb	r2, r1
 8001f78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbf0      	blt.n	8001f6a <_read+0x12>
	}

return len;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e009      	b.n	8001fb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60ba      	str	r2, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbf1      	blt.n	8001fa4 <_write+0x12>
	}
	return len;
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_close>:

int _close(int file)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_isatty>:

int _isatty(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
	return 1;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <_sbrk+0x5c>)
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <_sbrk+0x60>)
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <_sbrk+0x64>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <_sbrk+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d207      	bcs.n	8002074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002064:	f004 fdf4 	bl	8006c50 <__errno>
 8002068:	4603      	mov	r3, r0
 800206a:	220c      	movs	r2, #12
 800206c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	e009      	b.n	8002088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <_sbrk+0x64>)
 8002084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20050000 	.word	0x20050000
 8002094:	00000400 	.word	0x00000400
 8002098:	2000253c 	.word	0x2000253c
 800209c:	20002558 	.word	0x20002558

080020a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <SystemInit+0x20>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <SystemInit+0x20>)
 80020ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <write_char>:
#include "main.h"
#include "uart.h"

void write_char(uint8_t ch) {
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	while (!(LPUART1->ISR & (1 << 7)));
 80020ce:	bf00      	nop
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <write_char+0x3c>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f9      	beq.n	80020d0 <write_char+0xc>
	LPUART1->TDR = ch;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <write_char+0x3c>)
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	b292      	uxth	r2, r2
 80020e2:	851a      	strh	r2, [r3, #40]	; 0x28
	while (!(LPUART1->ISR & (1 << 6)));
 80020e4:	bf00      	nop
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <write_char+0x3c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f9      	beq.n	80020e6 <write_char+0x22>
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40008000 	.word	0x40008000

08002104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002108:	f7ff ffca 	bl	80020a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <LoopForever+0x6>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	; (8002144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <LoopForever+0xe>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	; (8002150 <LoopForever+0x16>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002132:	f004 fd93 	bl	8006c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002136:	f7ff f8db 	bl	80012f0 <main>

0800213a <LoopForever>:

LoopForever:
    b LoopForever
 800213a:	e7fe      	b.n	800213a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800213c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	200007dc 	.word	0x200007dc
  ldr r2, =_sidata
 8002148:	08009cec 	.word	0x08009cec
  ldr r2, =_sbss
 800214c:	200007dc 	.word	0x200007dc
  ldr r4, =_ebss
 8002150:	20002554 	.word	0x20002554

08002154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC1_2_IRQHandler>

08002156 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f001 fd0d 	bl	8003b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f80e 	bl	8002188 <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	e001      	b.n	800217c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002178:	f7ff fce0 	bl	8001b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800217c:	79fb      	ldrb	r3, [r7, #7]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_InitTick+0x6c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d023      	beq.n	80021e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_InitTick+0x70>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_InitTick+0x6c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fd19 	bl	8003bea <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d809      	bhi.n	80021d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f001 fce3 	bl	8003b96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_InitTick+0x74>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e007      	b.n	80021e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e004      	b.n	80021e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	e001      	b.n	80021e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000608 	.word	0x20000608
 80021f8:	20000600 	.word	0x20000600
 80021fc:	20000604 	.word	0x20000604

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000608 	.word	0x20000608
 8002224:	20002540 	.word	0x20002540

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20002540 	.word	0x20002540

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff ffee 	bl	8002228 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffde 	bl	8002228 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000608 	.word	0x20000608

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <LL_ADC_SetOffset+0x44>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	4313      	orrs	r3, r2
 8002320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	03fff000 	.word	0x03fff000

08002338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3360      	adds	r3, #96	; 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	; 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	615a      	str	r2, [r3, #20]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3330      	adds	r3, #48	; 0x30
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	4413      	add	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	211f      	movs	r1, #31
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 011f 	and.w	r1, r3, #31
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800243e:	b480      	push	{r7}
 8002440:	b087      	sub	sp, #28
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3314      	adds	r3, #20
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	0e5b      	lsrs	r3, r3, #25
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	0d1b      	lsrs	r3, r3, #20
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2107      	movs	r1, #7
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	0d1b      	lsrs	r3, r3, #20
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	431a      	orrs	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	43db      	mvns	r3, r3
 80024ae:	401a      	ands	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0318 	and.w	r3, r3, #24
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024b8:	40d9      	lsrs	r1, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	400b      	ands	r3, r1
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	431a      	orrs	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	0007ffff 	.word	0x0007ffff

080024dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 031f 	and.w	r3, r3, #31
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6093      	str	r3, [r2, #8]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800252c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002530:	d101      	bne.n	8002536 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002558:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002580:	d101      	bne.n	8002586 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025d0:	f043 0202 	orr.w	r2, r3, #2
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <LL_ADC_IsEnabled+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_IsEnabled+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d101      	bne.n	8002622 <LL_ADC_IsDisableOngoing+0x18>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <LL_ADC_IsDisableOngoing+0x1a>
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002640:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002644:	f043 0204 	orr.w	r2, r3, #4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800266c:	f043 0210 	orr.w	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d101      	bne.n	8002698 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ba:	f043 0220 	orr.w	r2, r3, #32
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e139      	b.n	8002982 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff fa31 	bl	8001b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fef1 	bl	800251c <LL_ADC_IsDeepPowerDownEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fed7 	bl	80024f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff0c 	bl	800256c <LL_ADC_IsInternalRegulatorEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fef0 	bl	8002544 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002764:	4b89      	ldr	r3, [pc, #548]	; (800298c <HAL_ADC_Init+0x298>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	4a89      	ldr	r2, [pc, #548]	; (8002990 <HAL_ADC_Init+0x29c>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002778:	e002      	b.n	8002780 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3b01      	subs	r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f9      	bne.n	800277a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff feee 	bl	800256c <LL_ADC_IsInternalRegulatorEnabled>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10d      	bne.n	80027b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff62 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 80027bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80d2 	bne.w	8002970 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 80ce 	bne.w	8002970 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027dc:	f043 0202 	orr.w	r2, r3, #2
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fefb 	bl	80025e4 <LL_ADC_IsEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d115      	bne.n	8002820 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027f4:	4867      	ldr	r0, [pc, #412]	; (8002994 <HAL_ADC_Init+0x2a0>)
 80027f6:	f7ff fef5 	bl	80025e4 <LL_ADC_IsEnabled>
 80027fa:	4604      	mov	r4, r0
 80027fc:	4866      	ldr	r0, [pc, #408]	; (8002998 <HAL_ADC_Init+0x2a4>)
 80027fe:	f7ff fef1 	bl	80025e4 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	431c      	orrs	r4, r3
 8002806:	4865      	ldr	r0, [pc, #404]	; (800299c <HAL_ADC_Init+0x2a8>)
 8002808:	f7ff feec 	bl	80025e4 <LL_ADC_IsEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	4323      	orrs	r3, r4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4619      	mov	r1, r3
 800281a:	4861      	ldr	r0, [pc, #388]	; (80029a0 <HAL_ADC_Init+0x2ac>)
 800281c:	f7ff fd34 	bl	8002288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7e5b      	ldrb	r3, [r3, #25]
 8002824:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800282a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002830:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002836:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d106      	bne.n	800285c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	3b01      	subs	r3, #1
 8002854:	045b      	lsls	r3, r3, #17
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <HAL_ADC_Init+0x2b0>)
 8002880:	4013      	ands	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	430b      	orrs	r3, r1
 800288a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fef5 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 8002896:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff16 	bl	80026ce <LL_ADC_INJ_IsConversionOngoing>
 80028a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d140      	bne.n	800292c <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d13d      	bne.n	800292c <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e1b      	ldrb	r3, [r3, #24]
 80028b8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028ba:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d2:	f023 0306 	bic.w	r3, r3, #6
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	430b      	orrs	r3, r1
 80028de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d118      	bne.n	800291c <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800290c:	430a      	orrs	r2, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	e007      	b.n	800292c <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d10c      	bne.n	800294e <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f023 010f 	bic.w	r1, r3, #15
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	1e5a      	subs	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
 800294c:	e007      	b.n	800295e <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 020f 	bic.w	r2, r2, #15
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f023 0303 	bic.w	r3, r3, #3
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	; 0x58
 800296e:	e007      	b.n	8002980 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f043 0210 	orr.w	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002980:	7ffb      	ldrb	r3, [r7, #31]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd90      	pop	{r4, r7, pc}
 800298a:	bf00      	nop
 800298c:	20000600 	.word	0x20000600
 8002990:	053e2d63 	.word	0x053e2d63
 8002994:	50040000 	.word	0x50040000
 8002998:	50040100 	.word	0x50040100
 800299c:	50040200 	.word	0x50040200
 80029a0:	50040300 	.word	0x50040300
 80029a4:	fff0c007 	.word	0xfff0c007

080029a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b4:	4853      	ldr	r0, [pc, #332]	; (8002b04 <HAL_ADC_Start_DMA+0x15c>)
 80029b6:	f7ff fd91 	bl	80024dc <LL_ADC_GetMultimode>
 80029ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fe5d 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 8093 	bne.w	8002af4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_Start_DMA+0x34>
 80029d8:	2302      	movs	r3, #2
 80029da:	e08e      	b.n	8002afa <HAL_ADC_Start_DMA+0x152>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_ADC_Start_DMA+0x160>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d008      	beq.n	8002a00 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d002      	beq.n	8002a00 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	d172      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fdc1 	bl	8003588 <ADC_Enable>
 8002a06:	4603      	mov	r3, r0
 8002a08:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d165      	bne.n	8002adc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a38      	ldr	r2, [pc, #224]	; (8002b0c <HAL_ADC_Start_DMA+0x164>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d002      	beq.n	8002a34 <HAL_ADC_Start_DMA+0x8c>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e000      	b.n	8002a36 <HAL_ADC_Start_DMA+0x8e>
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_ADC_Start_DMA+0x168>)
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d002      	beq.n	8002a44 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	f023 0206 	bic.w	r2, r3, #6
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <HAL_ADC_Start_DMA+0x16c>)
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <HAL_ADC_Start_DMA+0x170>)
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a84:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <HAL_ADC_Start_DMA+0x174>)
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	221c      	movs	r2, #28
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0210 	orr.w	r2, r2, #16
 8002aa6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3340      	adds	r3, #64	; 0x40
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f001 f954 	bl	8003d74 <HAL_DMA_Start_IT>
 8002acc:	4603      	mov	r3, r0
 8002ace:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fdab 	bl	8002630 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ada:	e00d      	b.n	8002af8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8002ae4:	e008      	b.n	8002af8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002af2:	e001      	b.n	8002af8 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	50040300 	.word	0x50040300
 8002b08:	50040200 	.word	0x50040200
 8002b0c:	50040100 	.word	0x50040100
 8002b10:	50040000 	.word	0x50040000
 8002b14:	0800370b 	.word	0x0800370b
 8002b18:	080037e3 	.word	0x080037e3
 8002b1c:	080037ff 	.word	0x080037ff

08002b20 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Stop_DMA+0x16>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e051      	b.n	8002bda <HAL_ADC_Stop_DMA+0xba>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b3e:	2103      	movs	r1, #3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fc65 	bl	8003410 <ADC_ConversionStop>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d13f      	bne.n	8002bd0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d10f      	bne.n	8002b8e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 f95e 	bl	8003e34 <HAL_DMA_Abort>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0210 	bic.w	r2, r2, #16
 8002b9c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fd51 	bl	800364c <ADC_Disable>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	e002      	b.n	8002bb6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fd4b 	bl	800364c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b0b6      	sub	sp, #216	; 0xd8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x22>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e3e3      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x7ea>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fd2a 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 83c4 	bne.w	80033bc <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d824      	bhi.n	8002c86 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	3b02      	subs	r3, #2
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d81b      	bhi.n	8002c7e <HAL_ADC_ConfigChannel+0x86>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <HAL_ADC_ConfigChannel+0x54>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c65 	.word	0x08002c65
 8002c54:	08002c6d 	.word	0x08002c6d
 8002c58:	08002c75 	.word	0x08002c75
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	220c      	movs	r2, #12
 8002c60:	605a      	str	r2, [r3, #4]
          break;
 8002c62:	e011      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2212      	movs	r2, #18
 8002c68:	605a      	str	r2, [r3, #4]
          break;
 8002c6a:	e00d      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2218      	movs	r2, #24
 8002c70:	605a      	str	r2, [r3, #4]
          break;
 8002c72:	e009      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7a:	605a      	str	r2, [r3, #4]
          break;
 8002c7c:	e004      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2206      	movs	r2, #6
 8002c82:	605a      	str	r2, [r3, #4]
          break;
 8002c84:	e000      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c86:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	f7ff fba6 	bl	80023e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fcee 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 8002ca4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fd0e 	bl	80026ce <LL_ADC_INJ_IsConversionOngoing>
 8002cb2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 81c1 	bne.w	8003042 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f040 81bc 	bne.w	8003042 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd2:	d10f      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7ff fbad 	bl	800243e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fb54 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>
 8002cf2:	e00e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	461a      	mov	r2, r3
 8002d02:	f7ff fb9c 	bl	800243e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fb44 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d00a      	beq.n	8002d4a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6919      	ldr	r1, [r3, #16]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d44:	f7ff fad4 	bl	80022f0 <LL_ADC_SetOffset>
 8002d48:	e17b      	b.n	8003042 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff faf1 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x17e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fae6 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	e01e      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x1bc>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fadb 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e004      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002da8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1d4>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	e018      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x206>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002de8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e004      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002df4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d106      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff faaa 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fa8e 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x244>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fa83 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	e01e      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x282>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fa78 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e004      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x29a>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	e018      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x2cc>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002eae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e004      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d106      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fa47 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fa2b 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x30a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fa20 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	0e9b      	lsrs	r3, r3, #26
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	e01e      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x348>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fa15 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e004      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x360>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	e016      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x38e>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e004      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2102      	movs	r1, #2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f9e6 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2103      	movs	r1, #3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f9ca 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x3cc>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2103      	movs	r1, #3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f9bf 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	e017      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x3fc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2103      	movs	r1, #3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f9b4 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fde:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e003      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_ConfigChannel+0x414>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	e011      	b.n	8003030 <HAL_ADC_ConfigChannel+0x438>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800301a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800301c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800301e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003024:	2320      	movs	r3, #32
 8003026:	e003      	b.n	8003030 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003030:	429a      	cmp	r2, r3
 8003032:	d106      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2200      	movs	r2, #0
 800303a:	2103      	movs	r1, #3
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f991 	bl	8002364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff facc 	bl	80025e4 <LL_ADC_IsEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 8140 	bne.w	80032d4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	461a      	mov	r2, r3
 8003062:	f7ff fa17 	bl	8002494 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	4a8f      	ldr	r2, [pc, #572]	; (80032a8 <HAL_ADC_ConfigChannel+0x6b0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	f040 8131 	bne.w	80032d4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <HAL_ADC_ConfigChannel+0x4a2>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	3301      	adds	r3, #1
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2b09      	cmp	r3, #9
 8003090:	bf94      	ite	ls
 8003092:	2301      	movls	r3, #1
 8003094:	2300      	movhi	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e019      	b.n	80030ce <HAL_ADC_ConfigChannel+0x4d6>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e003      	b.n	80030be <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80030b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	bf94      	ite	ls
 80030c8:	2301      	movls	r3, #1
 80030ca:	2300      	movhi	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d079      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d107      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x4f6>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	3301      	adds	r3, #1
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ec:	e015      	b.n	800311a <HAL_ADC_ConfigChannel+0x522>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e003      	b.n	8003112 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800310a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3301      	adds	r3, #1
 8003114:	069b      	lsls	r3, r3, #26
 8003116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_ADC_ConfigChannel+0x542>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0e9b      	lsrs	r3, r3, #26
 800312c:	3301      	adds	r3, #1
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2101      	movs	r1, #1
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	e017      	b.n	800316a <HAL_ADC_ConfigChannel+0x572>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e003      	b.n	800315e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	ea42 0103 	orr.w	r1, r2, r3
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x598>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	3301      	adds	r3, #1
 8003182:	f003 021f 	and.w	r2, r3, #31
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	051b      	lsls	r3, r3, #20
 800318e:	e018      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x5ca>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c2:	430b      	orrs	r3, r1
 80031c4:	e081      	b.n	80032ca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x5ea>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	3301      	adds	r3, #1
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e0:	e015      	b.n	800320e <HAL_ADC_ConfigChannel+0x616>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e003      	b.n	8003206 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	069b      	lsls	r3, r3, #26
 800320a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_ADC_ConfigChannel+0x636>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	3301      	adds	r3, #1
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	e017      	b.n	800325e <HAL_ADC_ConfigChannel+0x666>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	61fb      	str	r3, [r7, #28]
  return result;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	ea42 0103 	orr.w	r1, r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_ADC_ConfigChannel+0x692>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	3301      	adds	r3, #1
 8003276:	f003 021f 	and.w	r2, r3, #31
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	3b1e      	subs	r3, #30
 8003282:	051b      	lsls	r3, r3, #20
 8003284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003288:	e01e      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x6d0>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	613b      	str	r3, [r7, #16]
  return result;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e006      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x6bc>
 80032a6:	bf00      	nop
 80032a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	3b1e      	subs	r3, #30
 80032c2:	051b      	lsls	r3, r3, #20
 80032c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c8:	430b      	orrs	r3, r1
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	6892      	ldr	r2, [r2, #8]
 80032ce:	4619      	mov	r1, r3
 80032d0:	f7ff f8b5 	bl	800243e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b44      	ldr	r3, [pc, #272]	; (80033ec <HAL_ADC_ConfigChannel+0x7f4>)
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d07a      	beq.n	80033d6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032e0:	4843      	ldr	r0, [pc, #268]	; (80033f0 <HAL_ADC_ConfigChannel+0x7f8>)
 80032e2:	f7fe fff7 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 80032e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a41      	ldr	r2, [pc, #260]	; (80033f4 <HAL_ADC_ConfigChannel+0x7fc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d12c      	bne.n	800334e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d126      	bne.n	800334e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <HAL_ADC_ConfigChannel+0x800>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_ADC_ConfigChannel+0x71c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3b      	ldr	r2, [pc, #236]	; (80033fc <HAL_ADC_ConfigChannel+0x804>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d15d      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800331c:	4619      	mov	r1, r3
 800331e:	4834      	ldr	r0, [pc, #208]	; (80033f0 <HAL_ADC_ConfigChannel+0x7f8>)
 8003320:	f7fe ffc5 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_ADC_ConfigChannel+0x808>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	4a36      	ldr	r2, [pc, #216]	; (8003404 <HAL_ADC_ConfigChannel+0x80c>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800333e:	e002      	b.n	8003346 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3b01      	subs	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f9      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800334c:	e040      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <HAL_ADC_ConfigChannel+0x810>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d118      	bne.n	800338a <HAL_ADC_ConfigChannel+0x792>
 8003358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800335c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d112      	bne.n	800338a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_ADC_ConfigChannel+0x800>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_ADC_ConfigChannel+0x780>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <HAL_ADC_ConfigChannel+0x804>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d12d      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800337c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003380:	4619      	mov	r1, r3
 8003382:	481b      	ldr	r0, [pc, #108]	; (80033f0 <HAL_ADC_ConfigChannel+0x7f8>)
 8003384:	f7fe ff93 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003388:	e024      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1f      	ldr	r2, [pc, #124]	; (800340c <HAL_ADC_ConfigChannel+0x814>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d120      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11a      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_ADC_ConfigChannel+0x800>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d115      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033b2:	4619      	mov	r1, r3
 80033b4:	480e      	ldr	r0, [pc, #56]	; (80033f0 <HAL_ADC_ConfigChannel+0x7f8>)
 80033b6:	f7fe ff7a 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 80033ba:	e00c      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80033ce:	e002      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80033de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	37d8      	adds	r7, #216	; 0xd8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	80080000 	.word	0x80080000
 80033f0:	50040300 	.word	0x50040300
 80033f4:	c7520000 	.word	0xc7520000
 80033f8:	50040000 	.word	0x50040000
 80033fc:	50040200 	.word	0x50040200
 8003400:	20000600 	.word	0x20000600
 8003404:	053e2d63 	.word	0x053e2d63
 8003408:	cb840000 	.word	0xcb840000
 800340c:	80000001 	.word	0x80000001

08003410 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f92a 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 800342c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f94b 	bl	80026ce <LL_ADC_INJ_IsConversionOngoing>
 8003438:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8098 	beq.w	8003578 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02a      	beq.n	80034ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7e5b      	ldrb	r3, [r3, #25]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d126      	bne.n	80034ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7e1b      	ldrb	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d122      	bne.n	80034ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003466:	2301      	movs	r3, #1
 8003468:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800346a:	e014      	b.n	8003496 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4a45      	ldr	r2, [pc, #276]	; (8003584 <ADC_ConversionStop+0x174>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d90d      	bls.n	8003490 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f043 0210 	orr.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e074      	b.n	800357a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	3301      	adds	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d1e3      	bne.n	800346c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2240      	movs	r2, #64	; 0x40
 80034aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d014      	beq.n	80034dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff f8e2 	bl	8002680 <LL_ADC_REG_IsConversionOngoing>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f89f 	bl	800260a <LL_ADC_IsDisableOngoing>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f8be 	bl	8002658 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d014      	beq.n	800350c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff f8f1 	bl	80026ce <LL_ADC_INJ_IsConversionOngoing>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f887 	bl	800260a <LL_ADC_IsDisableOngoing>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f8cd 	bl	80026a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d005      	beq.n	800351e <ADC_ConversionStop+0x10e>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d105      	bne.n	8003524 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003518:	230c      	movs	r3, #12
 800351a:	617b      	str	r3, [r7, #20]
        break;
 800351c:	e005      	b.n	800352a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800351e:	2308      	movs	r3, #8
 8003520:	617b      	str	r3, [r7, #20]
        break;
 8003522:	e002      	b.n	800352a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003524:	2304      	movs	r3, #4
 8003526:	617b      	str	r3, [r7, #20]
        break;
 8003528:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800352a:	f7fe fe7d 	bl	8002228 <HAL_GetTick>
 800352e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003530:	e01b      	b.n	800356a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003532:	f7fe fe79 	bl	8002228 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b05      	cmp	r3, #5
 800353e:	d914      	bls.n	800356a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e007      	b.n	800357a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1dc      	bne.n	8003532 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	a33fffff 	.word	0xa33fffff

08003588 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f825 	bl	80025e4 <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d14d      	bne.n	800363c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <ADC_Enable+0xc0>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	f043 0210 	orr.w	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e039      	b.n	800363e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe ffe0 	bl	8002594 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fe28 	bl	8002228 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035da:	e028      	b.n	800362e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe ffff 	bl	80025e4 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe ffcf 	bl	8002594 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f6:	f7fe fe17 	bl	8002228 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d914      	bls.n	800362e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d00d      	beq.n	800362e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f043 0210 	orr.w	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e007      	b.n	800363e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d1cf      	bne.n	80035dc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	8000003f 	.word	0x8000003f

0800364c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe ffd6 	bl	800260a <LL_ADC_IsDisableOngoing>
 800365e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe ffbd 	bl	80025e4 <LL_ADC_IsEnabled>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d047      	beq.n	8003700 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d144      	bne.n	8003700 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030d 	and.w	r3, r3, #13
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10c      	bne.n	800369e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe ff97 	bl	80025bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2203      	movs	r2, #3
 8003694:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003696:	f7fe fdc7 	bl	8002228 <HAL_GetTick>
 800369a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800369c:	e029      	b.n	80036f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e023      	b.n	8003702 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036ba:	f7fe fdb5 	bl	8002228 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d914      	bls.n	80036f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1dc      	bne.n	80036ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003720:	2b00      	cmp	r3, #0
 8003722:	d14b      	bne.n	80037bc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d021      	beq.n	8003782 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fe3c 	bl	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d032      	beq.n	80037b4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d12b      	bne.n	80037b4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d11f      	bne.n	80037b4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	659a      	str	r2, [r3, #88]	; 0x58
 8003780:	e018      	b.n	80037b4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d111      	bne.n	80037b4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7fe f859 	bl	800186c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037ba:	e00e      	b.n	80037da <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff fa0a 	bl	8002be2 <HAL_ADC_ErrorCallback>
}
 80037ce:	e004      	b.n	80037da <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7fe f84d 	bl	8001890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff f9dc 	bl	8002be2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <LL_ADC_IsEnabled>:
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <LL_ADC_IsEnabled+0x18>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <LL_ADC_IsEnabled+0x1a>
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_ADC_REG_IsConversionOngoing>:
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d101      	bne.n	8003870 <LL_ADC_REG_IsConversionOngoing+0x18>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b0a1      	sub	sp, #132	; 0x84
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800389a:	2302      	movs	r3, #2
 800389c:	e093      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80038a6:	2300      	movs	r3, #0
 80038a8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80038aa:	2300      	movs	r3, #0
 80038ac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a47      	ldr	r2, [pc, #284]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d102      	bne.n	80038be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e001      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e072      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ffb8 	bl	8003858 <LL_ADC_REG_IsConversionOngoing>
 80038e8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ffb2 	bl	8003858 <LL_ADC_REG_IsConversionOngoing>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d154      	bne.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d151      	bne.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003902:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02c      	beq.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800390c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800391e:	035b      	lsls	r3, r3, #13
 8003920:	430b      	orrs	r3, r1
 8003922:	431a      	orrs	r2, r3
 8003924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003926:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003928:	4829      	ldr	r0, [pc, #164]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800392a:	f7ff ff82 	bl	8003832 <LL_ADC_IsEnabled>
 800392e:	4604      	mov	r4, r0
 8003930:	4828      	ldr	r0, [pc, #160]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003932:	f7ff ff7e 	bl	8003832 <LL_ADC_IsEnabled>
 8003936:	4603      	mov	r3, r0
 8003938:	431c      	orrs	r4, r3
 800393a:	4828      	ldr	r0, [pc, #160]	; (80039dc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800393c:	f7ff ff79 	bl	8003832 <LL_ADC_IsEnabled>
 8003940:	4603      	mov	r3, r0
 8003942:	4323      	orrs	r3, r4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d137      	bne.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003950:	f023 030f 	bic.w	r3, r3, #15
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	6811      	ldr	r1, [r2, #0]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	430a      	orrs	r2, r1
 800395e:	431a      	orrs	r2, r3
 8003960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003962:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003964:	e028      	b.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003970:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003972:	4817      	ldr	r0, [pc, #92]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003974:	f7ff ff5d 	bl	8003832 <LL_ADC_IsEnabled>
 8003978:	4604      	mov	r4, r0
 800397a:	4816      	ldr	r0, [pc, #88]	; (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800397c:	f7ff ff59 	bl	8003832 <LL_ADC_IsEnabled>
 8003980:	4603      	mov	r3, r0
 8003982:	431c      	orrs	r4, r3
 8003984:	4815      	ldr	r0, [pc, #84]	; (80039dc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003986:	f7ff ff54 	bl	8003832 <LL_ADC_IsEnabled>
 800398a:	4603      	mov	r3, r0
 800398c:	4323      	orrs	r3, r4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d112      	bne.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800399a:	f023 030f 	bic.w	r3, r3, #15
 800399e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a2:	e009      	b.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039b6:	e000      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80039c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3784      	adds	r7, #132	; 0x84
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	bf00      	nop
 80039d0:	50040000 	.word	0x50040000
 80039d4:	50040100 	.word	0x50040100
 80039d8:	50040300 	.word	0x50040300
 80039dc:	50040200 	.word	0x50040200

080039e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039fc:	4013      	ands	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a12:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	60d3      	str	r3, [r2, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <__NVIC_GetPriorityGrouping+0x18>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	f003 0307 	and.w	r3, r3, #7
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	db0b      	blt.n	8003a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	4907      	ldr	r1, [pc, #28]	; (8003a7c <__NVIC_EnableIRQ+0x38>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2001      	movs	r0, #1
 8003a66:	fa00 f202 	lsl.w	r2, r0, r2
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000e100 	.word	0xe000e100

08003a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	db0a      	blt.n	8003aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	490c      	ldr	r1, [pc, #48]	; (8003acc <__NVIC_SetPriority+0x4c>)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	0112      	lsls	r2, r2, #4
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa8:	e00a      	b.n	8003ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <__NVIC_SetPriority+0x50>)
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	3b04      	subs	r3, #4
 8003ab8:	0112      	lsls	r2, r2, #4
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	440b      	add	r3, r1
 8003abe:	761a      	strb	r2, [r3, #24]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000e100 	.word	0xe000e100
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	; 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f1c3 0307 	rsb	r3, r3, #7
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	bf28      	it	cs
 8003af2:	2304      	movcs	r3, #4
 8003af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d902      	bls.n	8003b04 <NVIC_EncodePriority+0x30>
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3b03      	subs	r3, #3
 8003b02:	e000      	b.n	8003b06 <NVIC_EncodePriority+0x32>
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b08:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43da      	mvns	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	401a      	ands	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	43d9      	mvns	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b2c:	4313      	orrs	r3, r2
         );
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3724      	adds	r7, #36	; 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4c:	d301      	bcc.n	8003b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e00f      	b.n	8003b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <SysTick_Config+0x40>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b5a:	210f      	movs	r1, #15
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	f7ff ff8e 	bl	8003a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <SysTick_Config+0x40>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <SysTick_Config+0x40>)
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	e000e010 	.word	0xe000e010

08003b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff29 	bl	80039e0 <__NVIC_SetPriorityGrouping>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba8:	f7ff ff3e 	bl	8003a28 <__NVIC_GetPriorityGrouping>
 8003bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	6978      	ldr	r0, [r7, #20]
 8003bb4:	f7ff ff8e 	bl	8003ad4 <NVIC_EncodePriority>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff5d 	bl	8003a80 <__NVIC_SetPriority>
}
 8003bc6:	bf00      	nop
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff31 	bl	8003a44 <__NVIC_EnableIRQ>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ffa2 	bl	8003b3c <SysTick_Config>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e098      	b.n	8003d48 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_DMA_Init+0x150>)
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d80f      	bhi.n	8003c42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_DMA_Init+0x154>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_DMA_Init+0x158>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	009a      	lsls	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a48      	ldr	r2, [pc, #288]	; (8003d60 <HAL_DMA_Init+0x15c>)
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c40:	e00e      	b.n	8003c60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_DMA_Init+0x160>)
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_DMA_Init+0x158>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	009a      	lsls	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <HAL_DMA_Init+0x164>)
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cba:	d039      	beq.n	8003d30 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <HAL_DMA_Init+0x15c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d11a      	bne.n	8003cfc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cc6:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <HAL_DMA_Init+0x168>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f003 031c 	and.w	r3, r3, #28
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	4924      	ldr	r1, [pc, #144]	; (8003d6c <HAL_DMA_Init+0x168>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ce0:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_DMA_Init+0x168>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	f003 031c 	and.w	r3, r3, #28
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	491d      	ldr	r1, [pc, #116]	; (8003d6c <HAL_DMA_Init+0x168>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
 8003cfa:	e019      	b.n	8003d30 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <HAL_DMA_Init+0x16c>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	f003 031c 	and.w	r3, r3, #28
 8003d08:	210f      	movs	r1, #15
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	4917      	ldr	r1, [pc, #92]	; (8003d70 <HAL_DMA_Init+0x16c>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <HAL_DMA_Init+0x16c>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f003 031c 	and.w	r3, r3, #28
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	4911      	ldr	r1, [pc, #68]	; (8003d70 <HAL_DMA_Init+0x16c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40020407 	.word	0x40020407
 8003d58:	bffdfff8 	.word	0xbffdfff8
 8003d5c:	cccccccd 	.word	0xcccccccd
 8003d60:	40020000 	.word	0x40020000
 8003d64:	bffdfbf8 	.word	0xbffdfbf8
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	400200a8 	.word	0x400200a8
 8003d70:	400204a8 	.word	0x400204a8

08003d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_DMA_Start_IT+0x20>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e04b      	b.n	8003e2c <HAL_DMA_Start_IT+0xb8>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d13a      	bne.n	8003e1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f91e 	bl	800400e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 020e 	orr.w	r2, r2, #14
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e00f      	b.n	8003e0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0204 	bic.w	r2, r2, #4
 8003dfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 020a 	orr.w	r2, r2, #10
 8003e0a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e005      	b.n	8003e2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d008      	beq.n	8003e5e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e022      	b.n	8003ea4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 020e 	bic.w	r2, r2, #14
 8003e6c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f003 021c 	and.w	r2, r3, #28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e90:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f003 031c 	and.w	r3, r3, #28
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d026      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x7a>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d021      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0204 	bic.w	r2, r2, #4
 8003f02:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	f003 021c 	and.w	r2, r3, #28
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	2104      	movs	r1, #4
 8003f12:	fa01 f202 	lsl.w	r2, r1, r2
 8003f16:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d071      	beq.n	8004004 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003f28:	e06c      	b.n	8004004 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f003 031c 	and.w	r3, r3, #28
 8003f32:	2202      	movs	r2, #2
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02e      	beq.n	8003f9c <HAL_DMA_IRQHandler+0xec>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d029      	beq.n	8003f9c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 020a 	bic.w	r2, r2, #10
 8003f64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	f003 021c 	and.w	r2, r3, #28
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d038      	beq.n	8004004 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f9a:	e033      	b.n	8004004 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f003 031c 	and.w	r3, r3, #28
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d02a      	beq.n	8004006 <HAL_DMA_IRQHandler+0x156>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d025      	beq.n	8004006 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 020e 	bic.w	r2, r2, #14
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f003 021c 	and.w	r2, r3, #28
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fdc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004004:	bf00      	nop
 8004006:	bf00      	nop
}
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	f003 021c 	and.w	r2, r3, #28
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f202 	lsl.w	r2, r1, r2
 800402e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b10      	cmp	r3, #16
 800403e:	d108      	bne.n	8004052 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004050:	e007      	b.n	8004062 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	60da      	str	r2, [r3, #12]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407e:	e166      	b.n	800434e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8158 	beq.w	8004348 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d005      	beq.n	80040b0 <HAL_GPIO_Init+0x40>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d130      	bne.n	8004112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	2203      	movs	r2, #3
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040e6:	2201      	movs	r2, #1
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 0201 	and.w	r2, r3, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b03      	cmp	r3, #3
 800411c:	d017      	beq.n	800414e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d123      	bne.n	80041a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	08da      	lsrs	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	220f      	movs	r2, #15
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	08da      	lsrs	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3208      	adds	r2, #8
 800419c:	6939      	ldr	r1, [r7, #16]
 800419e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	2203      	movs	r2, #3
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0203 	and.w	r2, r3, #3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80b2 	beq.w	8004348 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e4:	4b61      	ldr	r3, [pc, #388]	; (800436c <HAL_GPIO_Init+0x2fc>)
 80041e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e8:	4a60      	ldr	r2, [pc, #384]	; (800436c <HAL_GPIO_Init+0x2fc>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6613      	str	r3, [r2, #96]	; 0x60
 80041f0:	4b5e      	ldr	r3, [pc, #376]	; (800436c <HAL_GPIO_Init+0x2fc>)
 80041f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041fc:	4a5c      	ldr	r2, [pc, #368]	; (8004370 <HAL_GPIO_Init+0x300>)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	220f      	movs	r2, #15
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004226:	d02b      	beq.n	8004280 <HAL_GPIO_Init+0x210>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a52      	ldr	r2, [pc, #328]	; (8004374 <HAL_GPIO_Init+0x304>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d025      	beq.n	800427c <HAL_GPIO_Init+0x20c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a51      	ldr	r2, [pc, #324]	; (8004378 <HAL_GPIO_Init+0x308>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d01f      	beq.n	8004278 <HAL_GPIO_Init+0x208>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a50      	ldr	r2, [pc, #320]	; (800437c <HAL_GPIO_Init+0x30c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d019      	beq.n	8004274 <HAL_GPIO_Init+0x204>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a4f      	ldr	r2, [pc, #316]	; (8004380 <HAL_GPIO_Init+0x310>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_GPIO_Init+0x200>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a4e      	ldr	r2, [pc, #312]	; (8004384 <HAL_GPIO_Init+0x314>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00d      	beq.n	800426c <HAL_GPIO_Init+0x1fc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a4d      	ldr	r2, [pc, #308]	; (8004388 <HAL_GPIO_Init+0x318>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <HAL_GPIO_Init+0x1f8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a4c      	ldr	r2, [pc, #304]	; (800438c <HAL_GPIO_Init+0x31c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_GPIO_Init+0x1f4>
 8004260:	2307      	movs	r3, #7
 8004262:	e00e      	b.n	8004282 <HAL_GPIO_Init+0x212>
 8004264:	2308      	movs	r3, #8
 8004266:	e00c      	b.n	8004282 <HAL_GPIO_Init+0x212>
 8004268:	2306      	movs	r3, #6
 800426a:	e00a      	b.n	8004282 <HAL_GPIO_Init+0x212>
 800426c:	2305      	movs	r3, #5
 800426e:	e008      	b.n	8004282 <HAL_GPIO_Init+0x212>
 8004270:	2304      	movs	r3, #4
 8004272:	e006      	b.n	8004282 <HAL_GPIO_Init+0x212>
 8004274:	2303      	movs	r3, #3
 8004276:	e004      	b.n	8004282 <HAL_GPIO_Init+0x212>
 8004278:	2302      	movs	r3, #2
 800427a:	e002      	b.n	8004282 <HAL_GPIO_Init+0x212>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_GPIO_Init+0x212>
 8004280:	2300      	movs	r3, #0
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	f002 0203 	and.w	r2, r2, #3
 8004288:	0092      	lsls	r2, r2, #2
 800428a:	4093      	lsls	r3, r2
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004292:	4937      	ldr	r1, [pc, #220]	; (8004370 <HAL_GPIO_Init+0x300>)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	089b      	lsrs	r3, r3, #2
 8004298:	3302      	adds	r3, #2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042a0:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <HAL_GPIO_Init+0x320>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042c4:	4a32      	ldr	r2, [pc, #200]	; (8004390 <HAL_GPIO_Init+0x320>)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_GPIO_Init+0x320>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4013      	ands	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042ee:	4a28      	ldr	r2, [pc, #160]	; (8004390 <HAL_GPIO_Init+0x320>)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042f4:	4b26      	ldr	r3, [pc, #152]	; (8004390 <HAL_GPIO_Init+0x320>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004318:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <HAL_GPIO_Init+0x320>)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800431e:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <HAL_GPIO_Init+0x320>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004342:	4a13      	ldr	r2, [pc, #76]	; (8004390 <HAL_GPIO_Init+0x320>)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3301      	adds	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	f47f ae91 	bne.w	8004080 <HAL_GPIO_Init+0x10>
  }
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40021000 	.word	0x40021000
 8004370:	40010000 	.word	0x40010000
 8004374:	48000400 	.word	0x48000400
 8004378:	48000800 	.word	0x48000800
 800437c:	48000c00 	.word	0x48000c00
 8004380:	48001000 	.word	0x48001000
 8004384:	48001400 	.word	0x48001400
 8004388:	48001800 	.word	0x48001800
 800438c:	48001c00 	.word	0x48001c00
 8004390:	40010400 	.word	0x40010400

08004394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043b0:	e002      	b.n	80043b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c6:	b08f      	sub	sp, #60	; 0x3c
 80043c8:	af0a      	add	r7, sp, #40	; 0x28
 80043ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e116      	b.n	8004604 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fd fcbf 	bl	8001d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f002 f998 	bl	800674a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	687e      	ldr	r6, [r7, #4]
 8004422:	466d      	mov	r5, sp
 8004424:	f106 0410 	add.w	r4, r6, #16
 8004428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800442a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800442c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800442e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004430:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004434:	e885 0003 	stmia.w	r5, {r0, r1}
 8004438:	1d33      	adds	r3, r6, #4
 800443a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800443c:	6838      	ldr	r0, [r7, #0]
 800443e:	f002 f958 	bl	80066f2 <USB_CoreInit>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0d7      	b.n	8004604 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f002 f986 	bl	800676c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e04a      	b.n	80044fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	333d      	adds	r3, #61	; 0x3d
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800447a:	7bfa      	ldrb	r2, [r7, #15]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	333c      	adds	r3, #60	; 0x3c
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800448e:	7bfa      	ldrb	r2, [r7, #15]
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	b298      	uxth	r0, r3
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3342      	adds	r3, #66	; 0x42
 80044a2:	4602      	mov	r2, r0
 80044a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	333f      	adds	r3, #63	; 0x3f
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044ba:	7bfa      	ldrb	r2, [r7, #15]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3344      	adds	r3, #68	; 0x44
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3348      	adds	r3, #72	; 0x48
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	3350      	adds	r3, #80	; 0x50
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	3301      	adds	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	7bfa      	ldrb	r2, [r7, #15]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d3af      	bcc.n	8004466 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	e044      	b.n	8004596 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	3301      	adds	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d3b5      	bcc.n	800450c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	687e      	ldr	r6, [r7, #4]
 80045a8:	466d      	mov	r5, sp
 80045aa:	f106 0410 	add.w	r4, r6, #16
 80045ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80045be:	1d33      	adds	r3, r6, #4
 80045c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c2:	6838      	ldr	r0, [r7, #0]
 80045c4:	f002 f91e 	bl	8006804 <USB_DevInit>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e014      	b.n	8004604 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d102      	bne.n	80045f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f80a 	bl	800460c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 fac6 	bl	8006b8e <USB_DevDisconnect>

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800460c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	f043 0303 	orr.w	r3, r3, #3
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a04      	ldr	r2, [pc, #16]	; (8004670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800465e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40007000 	.word	0x40007000

08004674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_PWREx_GetVoltageRange+0x18>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40007000 	.word	0x40007000

08004690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	d130      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a0:	4b23      	ldr	r3, [pc, #140]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ac:	d038      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2232      	movs	r2, #50	; 0x32
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d4:	e002      	b.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3b01      	subs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e8:	d102      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f2      	bne.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fc:	d110      	bne.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e00f      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d007      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004718:	4a05      	ldr	r2, [pc, #20]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800471e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40007000 	.word	0x40007000
 8004734:	20000600 	.word	0x20000600
 8004738:	431bde83 	.word	0x431bde83

0800473c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800474a:	6053      	str	r3, [r2, #4]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40007000 	.word	0x40007000

0800475c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800476a:	6053      	str	r3, [r2, #4]
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40007000 	.word	0x40007000

0800477c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f000 bc16 	b.w	8004fbc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004790:	4b96      	ldr	r3, [pc, #600]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479a:	4b94      	ldr	r3, [pc, #592]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80e4 	beq.w	800497a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4c>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	f040 808b 	bne.w	80048d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	f040 8087 	bne.w	80048d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c8:	4b88      	ldr	r3, [pc, #544]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_OscConfig+0x64>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e3ed      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	4b81      	ldr	r3, [pc, #516]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <HAL_RCC_OscConfig+0x7e>
 80047f0:	4b7e      	ldr	r3, [pc, #504]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	e005      	b.n	8004806 <HAL_RCC_OscConfig+0x8a>
 80047fa:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004806:	4293      	cmp	r3, r2
 8004808:	d223      	bcs.n	8004852 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fd80 	bl	8005314 <RCC_SetFlashLatencyFromMSIRange>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e3ce      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481e:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a72      	ldr	r2, [pc, #456]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004824:	f043 0308 	orr.w	r3, r3, #8
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b70      	ldr	r3, [pc, #448]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	496d      	ldr	r1, [pc, #436]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483c:	4b6b      	ldr	r3, [pc, #428]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	4968      	ldr	r1, [pc, #416]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
 8004850:	e025      	b.n	800489e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004852:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4960      	ldr	r1, [pc, #384]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004870:	4b5e      	ldr	r3, [pc, #376]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	495b      	ldr	r1, [pc, #364]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fd40 	bl	8005314 <RCC_SetFlashLatencyFromMSIRange>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e38e      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489e:	f000 fc75 	bl	800518c <HAL_RCC_GetSysClockFreq>
 80048a2:	4602      	mov	r2, r0
 80048a4:	4b51      	ldr	r3, [pc, #324]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	4950      	ldr	r1, [pc, #320]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	5ccb      	ldrb	r3, [r1, r3]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_RCC_OscConfig+0x278>)
 80048bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048be:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fc60 	bl	8002188 <HAL_InitTick>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d052      	beq.n	8004978 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	e372      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d032      	beq.n	8004944 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048de:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a42      	ldr	r2, [pc, #264]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ea:	f7fd fc9d 	bl	8002228 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f2:	f7fd fc99 	bl	8002228 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e35b      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a35      	ldr	r2, [pc, #212]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004916:	f043 0308 	orr.w	r3, r3, #8
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4930      	ldr	r1, [pc, #192]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	492b      	ldr	r1, [pc, #172]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
 8004942:	e01a      	b.n	800497a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004944:	4b29      	ldr	r3, [pc, #164]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a28      	ldr	r2, [pc, #160]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004950:	f7fd fc6a 	bl	8002228 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004958:	f7fd fc66 	bl	8002228 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e328      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x1dc>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d073      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d005      	beq.n	8004998 <HAL_RCC_OscConfig+0x21c>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b0c      	cmp	r3, #12
 8004990:	d10e      	bne.n	80049b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d10b      	bne.n	80049b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d063      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d15f      	bne.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e305      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_OscConfig+0x24c>
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e025      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d0:	d114      	bne.n	80049fc <HAL_RCC_OscConfig+0x280>
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a05      	ldr	r2, [pc, #20]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a02      	ldr	r2, [pc, #8]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e013      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	080098b8 	.word	0x080098b8
 80049f4:	20000600 	.word	0x20000600
 80049f8:	20000604 	.word	0x20000604
 80049fc:	4ba0      	ldr	r3, [pc, #640]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a9f      	ldr	r2, [pc, #636]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b9d      	ldr	r3, [pc, #628]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a9c      	ldr	r2, [pc, #624]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fc04 	bl	8002228 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd fc00 	bl	8002228 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e2c2      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2a8>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd fbf0 	bl	8002228 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fbec 	bl	8002228 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e2ae      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d0>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d060      	beq.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x310>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x328>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e28b      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b76      	ldr	r3, [pc, #472]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	4973      	ldr	r1, [pc, #460]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	e040      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d023      	beq.n	8004b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6e      	ldr	r2, [pc, #440]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fd fbab 	bl	8002228 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7fd fba7 	bl	8002228 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e269      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b65      	ldr	r3, [pc, #404]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b62      	ldr	r3, [pc, #392]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	495f      	ldr	r1, [pc, #380]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd fb87 	bl	8002228 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fb83 	bl	8002228 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e245      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b50:	4b4b      	ldr	r3, [pc, #300]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b56:	4a4a      	ldr	r2, [pc, #296]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fd fb62 	bl	8002228 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fd fb5e 	bl	8002228 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e220      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7a:	4b41      	ldr	r3, [pc, #260]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3ec>
 8004b88:	e01b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b90:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fb45 	bl	8002228 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fd fb41 	bl	8002228 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e203      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6593      	str	r3, [r2, #88]	; 0x58
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d118      	bne.n	8004c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c14:	f7fd fb08 	bl	8002228 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1c:	f7fd fb04 	bl	8002228 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1c6      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4d8>
 8004c42:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c52:	e029      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d115      	bne.n	8004c88 <HAL_RCC_OscConfig+0x50c>
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	4a03      	ldr	r2, [pc, #12]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7c:	e014      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40007000 	.word	0x40007000
 8004c88:	4b9d      	ldr	r3, [pc, #628]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	4a9c      	ldr	r2, [pc, #624]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c98:	4b99      	ldr	r3, [pc, #612]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	4a98      	ldr	r2, [pc, #608]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fd faba 	bl	8002228 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fd fab6 	bl	8002228 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e176      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cce:	4b8c      	ldr	r3, [pc, #560]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ed      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x53c>
 8004cdc:	e015      	b.n	8004d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fd faa3 	bl	8002228 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fd fa9f 	bl	8002228 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e15f      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfc:	4b80      	ldr	r3, [pc, #512]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ed      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b7b      	ldr	r3, [pc, #492]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	4a7a      	ldr	r2, [pc, #488]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d03c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d30:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d36:	4a72      	ldr	r2, [pc, #456]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fd fa72 	bl	8002228 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d48:	f7fd fa6e 	bl	8002228 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e130      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d5a:	4b69      	ldr	r3, [pc, #420]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ef      	beq.n	8004d48 <HAL_RCC_OscConfig+0x5cc>
 8004d68:	e01b      	b.n	8004da2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d6a:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d70:	4a63      	ldr	r2, [pc, #396]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fd fa55 	bl	8002228 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7fd fa51 	bl	8002228 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e113      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d94:	4b5a      	ldr	r3, [pc, #360]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ef      	bne.n	8004d82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8107 	beq.w	8004fba <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f040 80cf 	bne.w	8004f54 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004db6:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d12c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d123      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d11b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d113      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d071      	beq.n	8004f08 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d068      	beq.n	8004efc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e2a:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e36:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e0ba      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e46:	4b2e      	ldr	r3, [pc, #184]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e52:	f7fd f9e9 	bl	8002228 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd f9e5 	bl	8002228 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0a7      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6c:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e78:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	4b21      	ldr	r3, [pc, #132]	; (8004f04 <HAL_RCC_OscConfig+0x788>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	0112      	lsls	r2, r2, #4
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e92:	0212      	lsls	r2, r2, #8
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e9a:	0852      	lsrs	r2, r2, #1
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	0552      	lsls	r2, r2, #21
 8004ea0:	4311      	orrs	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ea6:	0852      	lsrs	r2, r2, #1
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0652      	lsls	r2, r2, #25
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004eb2:	06d2      	lsls	r2, r2, #27
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	4912      	ldr	r1, [pc, #72]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ed4:	f7fd f9a8 	bl	8002228 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fd f9a4 	bl	8002228 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e066      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <HAL_RCC_OscConfig+0x784>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004efa:	e05e      	b.n	8004fba <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e05d      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
 8004f00:	40021000 	.word	0x40021000
 8004f04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f08:	4b2e      	ldr	r3, [pc, #184]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d152      	bne.n	8004fba <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f14:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a27      	ldr	r2, [pc, #156]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f2c:	f7fd f97c 	bl	8002228 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fd f978 	bl	8002228 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e03a      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f46:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0x7b8>
 8004f52:	e032      	b.n	8004fba <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d02d      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f78:	f023 0303 	bic.w	r3, r3, #3
 8004f7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004f84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8e:	f7fd f94b 	bl	8002228 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fd f947 	bl	8002228 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e009      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_OscConfig+0x848>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCC_OscConfig+0x81a>
 8004fb4:	e001      	b.n	8004fba <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000

08004fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0c8      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fdc:	4b66      	ldr	r3, [pc, #408]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d910      	bls.n	800500c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fea:	4b63      	ldr	r3, [pc, #396]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 0207 	bic.w	r2, r3, #7
 8004ff2:	4961      	ldr	r1, [pc, #388]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b5f      	ldr	r3, [pc, #380]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0b0      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d04c      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d107      	bne.n	8005030 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005020:	4b56      	ldr	r3, [pc, #344]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d121      	bne.n	8005070 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e09e      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d107      	bne.n	8005048 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d115      	bne.n	8005070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e092      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005050:	4b4a      	ldr	r3, [pc, #296]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e086      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005060:	4b46      	ldr	r3, [pc, #280]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e07e      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005070:	4b42      	ldr	r3, [pc, #264]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 0203 	bic.w	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	493f      	ldr	r1, [pc, #252]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005082:	f7fd f8d1 	bl	8002228 <HAL_GetTick>
 8005086:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005088:	e00a      	b.n	80050a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508a:	f7fd f8cd 	bl	8002228 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	f241 3288 	movw	r2, #5000	; 0x1388
 8005098:	4293      	cmp	r3, r2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e066      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a0:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 020c 	and.w	r2, r3, #12
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d1eb      	bne.n	800508a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	492c      	ldr	r1, [pc, #176]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050d0:	4b29      	ldr	r3, [pc, #164]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d210      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b26      	ldr	r3, [pc, #152]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 0207 	bic.w	r2, r3, #7
 80050e6:	4924      	ldr	r1, [pc, #144]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b22      	ldr	r3, [pc, #136]	; (8005178 <HAL_RCC_ClockConfig+0x1b0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e036      	b.n	800516e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800510c:	4b1b      	ldr	r3, [pc, #108]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4918      	ldr	r1, [pc, #96]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512a:	4b14      	ldr	r3, [pc, #80]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4910      	ldr	r1, [pc, #64]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800513e:	f000 f825 	bl	800518c <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b0d      	ldr	r3, [pc, #52]	; (800517c <HAL_RCC_ClockConfig+0x1b4>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	490c      	ldr	r1, [pc, #48]	; (8005180 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_RCC_ClockConfig+0x1c0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd f810 	bl	8002188 <HAL_InitTick>
 8005168:	4603      	mov	r3, r0
 800516a:	72fb      	strb	r3, [r7, #11]

  return status;
 800516c:	7afb      	ldrb	r3, [r7, #11]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40022000 	.word	0x40022000
 800517c:	40021000 	.word	0x40021000
 8005180:	080098b8 	.word	0x080098b8
 8005184:	20000600 	.word	0x20000600
 8005188:	20000604 	.word	0x20000604

0800518c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	2300      	movs	r3, #0
 8005198:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519a:	4b3e      	ldr	r3, [pc, #248]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a4:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x34>
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d121      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d11e      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051c0:	4b34      	ldr	r3, [pc, #208]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051cc:	4b31      	ldr	r3, [pc, #196]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	e005      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051e8:	4a2b      	ldr	r2, [pc, #172]	; (8005298 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051fc:	e00a      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d102      	bne.n	800520a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <HAL_RCC_GetSysClockFreq+0x110>)
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	e004      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d101      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005210:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005212:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b0c      	cmp	r3, #12
 8005218:	d134      	bne.n	8005284 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d003      	beq.n	8005232 <HAL_RCC_GetSysClockFreq+0xa6>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d003      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0xac>
 8005230:	e005      	b.n	800523e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_RCC_GetSysClockFreq+0x110>)
 8005234:	617b      	str	r3, [r7, #20]
      break;
 8005236:	e005      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800523a:	617b      	str	r3, [r7, #20]
      break;
 800523c:	e002      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	617b      	str	r3, [r7, #20]
      break;
 8005242:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005244:	4b13      	ldr	r3, [pc, #76]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	3301      	adds	r3, #1
 8005250:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	fb03 f202 	mul.w	r2, r3, r2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <HAL_RCC_GetSysClockFreq+0x108>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	0e5b      	lsrs	r3, r3, #25
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	3301      	adds	r3, #1
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005284:	69bb      	ldr	r3, [r7, #24]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3724      	adds	r7, #36	; 0x24
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	080098d0 	.word	0x080098d0
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	007a1200 	.word	0x007a1200

080052a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052aa:	681b      	ldr	r3, [r3, #0]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000600 	.word	0x20000600

080052bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052c0:	f7ff fff0 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4904      	ldr	r1, [pc, #16]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40021000 	.word	0x40021000
 80052e4:	080098c8 	.word	0x080098c8

080052e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052ec:	f7ff ffda 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_GetPCLK2Freq+0x24>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0adb      	lsrs	r3, r3, #11
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	080098c8 	.word	0x080098c8

08005314 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005320:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800532c:	f7ff f9a2 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 8005330:	6178      	str	r0, [r7, #20]
 8005332:	e014      	b.n	800535e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	4a24      	ldr	r2, [pc, #144]	; (80053cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	6593      	str	r3, [r2, #88]	; 0x58
 8005340:	4b22      	ldr	r3, [pc, #136]	; (80053cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800534c:	f7ff f992 	bl	8004674 <HAL_PWREx_GetVoltageRange>
 8005350:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005352:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005364:	d10b      	bne.n	800537e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b80      	cmp	r3, #128	; 0x80
 800536a:	d919      	bls.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2ba0      	cmp	r3, #160	; 0xa0
 8005370:	d902      	bls.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005372:	2302      	movs	r3, #2
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	e013      	b.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005378:	2301      	movs	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	e010      	b.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b80      	cmp	r3, #128	; 0x80
 8005382:	d902      	bls.n	800538a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005384:	2303      	movs	r3, #3
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	e00a      	b.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b80      	cmp	r3, #128	; 0x80
 800538e:	d102      	bne.n	8005396 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005390:	2302      	movs	r3, #2
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	e004      	b.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b70      	cmp	r3, #112	; 0x70
 800539a:	d101      	bne.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800539c:	2301      	movs	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 0207 	bic.w	r2, r3, #7
 80053a8:	4909      	ldr	r1, [pc, #36]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d001      	beq.n	80053c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40022000 	.word	0x40022000

080053d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053dc:	2300      	movs	r3, #0
 80053de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053e0:	2300      	movs	r3, #0
 80053e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d041      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053f8:	d02a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053fe:	d824      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005400:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005404:	d008      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800540a:	d81e      	bhi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005414:	d010      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005416:	e018      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005418:	4b86      	ldr	r3, [pc, #536]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a85      	ldr	r2, [pc, #532]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005422:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005424:	e015      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fadd 	bl	80059ec <RCCEx_PLLSAI1_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005436:	e00c      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3320      	adds	r3, #32
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fbc6 	bl	8005bd0 <RCCEx_PLLSAI2_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	74fb      	strb	r3, [r7, #19]
      break;
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005452:	7cfb      	ldrb	r3, [r7, #19]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005458:	4b76      	ldr	r3, [pc, #472]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005466:	4973      	ldr	r1, [pc, #460]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800546e:	e001      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d041      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005488:	d02a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800548a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800548e:	d824      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005494:	d008      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800549a:	d81e      	bhi.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054a4:	d010      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054a6:	e018      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054a8:	4b62      	ldr	r3, [pc, #392]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a61      	ldr	r2, [pc, #388]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054b4:	e015      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3304      	adds	r3, #4
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fa95 	bl	80059ec <RCCEx_PLLSAI1_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054c6:	e00c      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3320      	adds	r3, #32
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fb7e 	bl	8005bd0 <RCCEx_PLLSAI2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	74fb      	strb	r3, [r7, #19]
      break;
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054e8:	4b52      	ldr	r3, [pc, #328]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f6:	494f      	ldr	r1, [pc, #316]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054fe:	e001      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80a0 	beq.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005512:	2300      	movs	r3, #0
 8005514:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005516:	4b47      	ldr	r3, [pc, #284]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552c:	4b41      	ldr	r3, [pc, #260]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	4a40      	ldr	r2, [pc, #256]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005536:	6593      	str	r3, [r2, #88]	; 0x58
 8005538:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005544:	2301      	movs	r3, #1
 8005546:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800554e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005554:	f7fc fe68 	bl	8002228 <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800555a:	e009      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555c:	f7fc fe64 	bl	8002228 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d902      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	74fb      	strb	r3, [r7, #19]
        break;
 800556e:	e005      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005570:	4b31      	ldr	r3, [pc, #196]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0ef      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d15c      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005582:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01f      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	429a      	cmp	r2, r3
 800559e:	d019      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a0:	4b24      	ldr	r3, [pc, #144]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	4b21      	ldr	r3, [pc, #132]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	4a20      	ldr	r2, [pc, #128]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055bc:	4b1d      	ldr	r3, [pc, #116]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055de:	f7fc fe23 	bl	8002228 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e4:	e00b      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e6:	f7fc fe1f 	bl	8002228 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d902      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	74fb      	strb	r3, [r7, #19]
            break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fe:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ec      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10c      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	4904      	ldr	r1, [pc, #16]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800562a:	e009      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	74bb      	strb	r3, [r7, #18]
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000
 8005638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005640:	7c7b      	ldrb	r3, [r7, #17]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005646:	4ba6      	ldr	r3, [pc, #664]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	4aa5      	ldr	r2, [pc, #660]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800564c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005650:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565e:	4ba0      	ldr	r3, [pc, #640]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	f023 0203 	bic.w	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	499c      	ldr	r1, [pc, #624]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005680:	4b97      	ldr	r3, [pc, #604]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f023 020c 	bic.w	r2, r3, #12
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	4994      	ldr	r1, [pc, #592]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056a2:	4b8f      	ldr	r3, [pc, #572]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	498b      	ldr	r1, [pc, #556]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056c4:	4b86      	ldr	r3, [pc, #536]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	4983      	ldr	r1, [pc, #524]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056e6:	4b7e      	ldr	r3, [pc, #504]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f4:	497a      	ldr	r1, [pc, #488]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005708:	4b75      	ldr	r3, [pc, #468]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005716:	4972      	ldr	r1, [pc, #456]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800572a:	4b6d      	ldr	r3, [pc, #436]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005738:	4969      	ldr	r1, [pc, #420]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800574c:	4b64      	ldr	r3, [pc, #400]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575a:	4961      	ldr	r1, [pc, #388]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800576e:	4b5c      	ldr	r3, [pc, #368]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	4958      	ldr	r1, [pc, #352]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005790:	4b53      	ldr	r3, [pc, #332]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579e:	4950      	ldr	r1, [pc, #320]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057b2:	4b4b      	ldr	r3, [pc, #300]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	4947      	ldr	r1, [pc, #284]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057d4:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057da:	f023 0203 	bic.w	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e2:	493f      	ldr	r1, [pc, #252]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d028      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f6:	4b3a      	ldr	r3, [pc, #232]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4936      	ldr	r1, [pc, #216]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005814:	d106      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005816:	4b32      	ldr	r3, [pc, #200]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	4a31      	ldr	r2, [pc, #196]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800581c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005820:	60d3      	str	r3, [r2, #12]
 8005822:	e011      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800582c:	d10c      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3304      	adds	r3, #4
 8005832:	2101      	movs	r1, #1
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f8d9 	bl	80059ec <RCCEx_PLLSAI1_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005844:	7cfb      	ldrb	r3, [r7, #19]
 8005846:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d028      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005854:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005862:	491f      	ldr	r1, [pc, #124]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800586e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005872:	d106      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005874:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800587a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800587e:	60d3      	str	r3, [r2, #12]
 8005880:	e011      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800588a:	d10c      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	2101      	movs	r1, #1
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f8aa 	bl	80059ec <RCCEx_PLLSAI1_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80058a2:	7cfb      	ldrb	r3, [r7, #19]
 80058a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d02a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c0:	4907      	ldr	r1, [pc, #28]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d0:	d108      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d2:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	4a02      	ldr	r2, [pc, #8]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058dc:	60d3      	str	r3, [r2, #12]
 80058de:	e013      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80058e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ec:	d10c      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	2101      	movs	r1, #1
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f879 	bl	80059ec <RCCEx_PLLSAI1_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02f      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005914:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005922:	4929      	ldr	r1, [pc, #164]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005932:	d10d      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	2102      	movs	r1, #2
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f856 	bl	80059ec <RCCEx_PLLSAI1_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	74bb      	strb	r3, [r7, #18]
 800594e:	e011      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005958:	d10c      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3320      	adds	r3, #32
 800595e:	2102      	movs	r1, #2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f935 	bl	8005bd0 <RCCEx_PLLSAI2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800596a:	7cfb      	ldrb	r3, [r7, #19]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005970:	7cfb      	ldrb	r3, [r7, #19]
 8005972:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005980:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005990:	490d      	ldr	r1, [pc, #52]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00b      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b4:	4904      	ldr	r1, [pc, #16]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40021000 	.word	0x40021000

080059cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059d6:	f043 0304 	orr.w	r3, r3, #4
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000

080059ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059fa:	4b74      	ldr	r3, [pc, #464]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d018      	beq.n	8005a38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a06:	4b71      	ldr	r3, [pc, #452]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0203 	and.w	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d10d      	bne.n	8005a32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
       ||
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a1e:	4b6b      	ldr	r3, [pc, #428]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d047      	beq.n	8005ac2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	73fb      	strb	r3, [r7, #15]
 8005a36:	e044      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d018      	beq.n	8005a72 <RCCEx_PLLSAI1_Config+0x86>
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d825      	bhi.n	8005a90 <RCCEx_PLLSAI1_Config+0xa4>
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d002      	beq.n	8005a4e <RCCEx_PLLSAI1_Config+0x62>
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d009      	beq.n	8005a60 <RCCEx_PLLSAI1_Config+0x74>
 8005a4c:	e020      	b.n	8005a90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a4e:	4b5f      	ldr	r3, [pc, #380]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d11d      	bne.n	8005a96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a5e:	e01a      	b.n	8005a96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a60:	4b5a      	ldr	r3, [pc, #360]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d116      	bne.n	8005a9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a70:	e013      	b.n	8005a9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a72:	4b56      	ldr	r3, [pc, #344]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a7e:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a8e:	e006      	b.n	8005a9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
      break;
 8005a94:	e004      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a96:	bf00      	nop
 8005a98:	e002      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005aa6:	4b49      	ldr	r3, [pc, #292]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6819      	ldr	r1, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	430b      	orrs	r3, r1
 8005abc:	4943      	ldr	r1, [pc, #268]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d17c      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ac8:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a3f      	ldr	r2, [pc, #252]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ace:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad4:	f7fc fba8 	bl	8002228 <HAL_GetTick>
 8005ad8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ada:	e009      	b.n	8005af0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005adc:	f7fc fba4 	bl	8002228 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d902      	bls.n	8005af0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	73fb      	strb	r3, [r7, #15]
        break;
 8005aee:	e005      	b.n	8005afc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005af0:	4b36      	ldr	r3, [pc, #216]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ef      	bne.n	8005adc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d15f      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d110      	bne.n	8005b2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b08:	4b30      	ldr	r3, [pc, #192]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005b10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6892      	ldr	r2, [r2, #8]
 8005b18:	0211      	lsls	r1, r2, #8
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	68d2      	ldr	r2, [r2, #12]
 8005b1e:	06d2      	lsls	r2, r2, #27
 8005b20:	430a      	orrs	r2, r1
 8005b22:	492a      	ldr	r1, [pc, #168]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	610b      	str	r3, [r1, #16]
 8005b28:	e027      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d112      	bne.n	8005b56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b30:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6892      	ldr	r2, [r2, #8]
 8005b40:	0211      	lsls	r1, r2, #8
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6912      	ldr	r2, [r2, #16]
 8005b46:	0852      	lsrs	r2, r2, #1
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	0552      	lsls	r2, r2, #21
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	491f      	ldr	r1, [pc, #124]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	610b      	str	r3, [r1, #16]
 8005b54:	e011      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b56:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6892      	ldr	r2, [r2, #8]
 8005b66:	0211      	lsls	r1, r2, #8
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6952      	ldr	r2, [r2, #20]
 8005b6c:	0852      	lsrs	r2, r2, #1
 8005b6e:	3a01      	subs	r2, #1
 8005b70:	0652      	lsls	r2, r2, #25
 8005b72:	430a      	orrs	r2, r1
 8005b74:	4915      	ldr	r1, [pc, #84]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b86:	f7fc fb4f 	bl	8002228 <HAL_GetTick>
 8005b8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b8c:	e009      	b.n	8005ba2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b8e:	f7fc fb4b 	bl	8002228 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d902      	bls.n	8005ba2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8005ba0:	e005      	b.n	8005bae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0ef      	beq.n	8005b8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	4903      	ldr	r1, [pc, #12]	; (8005bcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40021000 	.word	0x40021000

08005bd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bde:	4b69      	ldr	r3, [pc, #420]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d018      	beq.n	8005c1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bea:	4b66      	ldr	r3, [pc, #408]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0203 	and.w	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d10d      	bne.n	8005c16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c02:	4b60      	ldr	r3, [pc, #384]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
       ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d047      	beq.n	8005ca6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
 8005c1a:	e044      	b.n	8005ca6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d018      	beq.n	8005c56 <RCCEx_PLLSAI2_Config+0x86>
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d825      	bhi.n	8005c74 <RCCEx_PLLSAI2_Config+0xa4>
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d002      	beq.n	8005c32 <RCCEx_PLLSAI2_Config+0x62>
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d009      	beq.n	8005c44 <RCCEx_PLLSAI2_Config+0x74>
 8005c30:	e020      	b.n	8005c74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c32:	4b54      	ldr	r3, [pc, #336]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11d      	bne.n	8005c7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c42:	e01a      	b.n	8005c7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c44:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d116      	bne.n	8005c7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c54:	e013      	b.n	8005c7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c56:	4b4b      	ldr	r3, [pc, #300]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10f      	bne.n	8005c82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c62:	4b48      	ldr	r3, [pc, #288]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c72:	e006      	b.n	8005c82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e004      	b.n	8005c84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e002      	b.n	8005c84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	4938      	ldr	r1, [pc, #224]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d166      	bne.n	8005d7a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cac:	4b35      	ldr	r3, [pc, #212]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a34      	ldr	r2, [pc, #208]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fc fab6 	bl	8002228 <HAL_GetTick>
 8005cbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cbe:	e009      	b.n	8005cd4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cc0:	f7fc fab2 	bl	8002228 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d902      	bls.n	8005cd4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8005cd2:	e005      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1ef      	bne.n	8005cc0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d149      	bne.n	8005d7a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d110      	bne.n	8005d0e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005cf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6892      	ldr	r2, [r2, #8]
 8005cfc:	0211      	lsls	r1, r2, #8
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68d2      	ldr	r2, [r2, #12]
 8005d02:	06d2      	lsls	r2, r2, #27
 8005d04:	430a      	orrs	r2, r1
 8005d06:	491f      	ldr	r1, [pc, #124]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	614b      	str	r3, [r1, #20]
 8005d0c:	e011      	b.n	8005d32 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d0e:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6892      	ldr	r2, [r2, #8]
 8005d1e:	0211      	lsls	r1, r2, #8
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6912      	ldr	r2, [r2, #16]
 8005d24:	0852      	lsrs	r2, r2, #1
 8005d26:	3a01      	subs	r2, #1
 8005d28:	0652      	lsls	r2, r2, #25
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	4915      	ldr	r1, [pc, #84]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3e:	f7fc fa73 	bl	8002228 <HAL_GetTick>
 8005d42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d44:	e009      	b.n	8005d5a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d46:	f7fc fa6f 	bl	8002228 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d902      	bls.n	8005d5a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	73fb      	strb	r3, [r7, #15]
          break;
 8005d58:	e005      	b.n	8005d66 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0ef      	beq.n	8005d46 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000

08005d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e040      	b.n	8005e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb ff82 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f82c 	bl	8005e24 <UART_SetConfig>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e022      	b.n	8005e1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fad8 	bl	8006394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb5f 	bl	80064d8 <UART_CheckIdleState>
 8005e1a:	4603      	mov	r3, r0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e28:	b08a      	sub	sp, #40	; 0x28
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4ba4      	ldr	r3, [pc, #656]	; (80060e4 <UART_SetConfig+0x2c0>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a99      	ldr	r2, [pc, #612]	; (80060e8 <UART_SetConfig+0x2c4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a90      	ldr	r2, [pc, #576]	; (80060ec <UART_SetConfig+0x2c8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d126      	bne.n	8005efc <UART_SetConfig+0xd8>
 8005eae:	4b90      	ldr	r3, [pc, #576]	; (80060f0 <UART_SetConfig+0x2cc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d81b      	bhi.n	8005ef4 <UART_SetConfig+0xd0>
 8005ebc:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <UART_SetConfig+0xa0>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005eed 	.word	0x08005eed
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eda:	e116      	b.n	800610a <UART_SetConfig+0x2e6>
 8005edc:	2302      	movs	r3, #2
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e112      	b.n	800610a <UART_SetConfig+0x2e6>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e10e      	b.n	800610a <UART_SetConfig+0x2e6>
 8005eec:	2308      	movs	r3, #8
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e10a      	b.n	800610a <UART_SetConfig+0x2e6>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e106      	b.n	800610a <UART_SetConfig+0x2e6>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a7c      	ldr	r2, [pc, #496]	; (80060f4 <UART_SetConfig+0x2d0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d138      	bne.n	8005f78 <UART_SetConfig+0x154>
 8005f06:	4b7a      	ldr	r3, [pc, #488]	; (80060f0 <UART_SetConfig+0x2cc>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	f003 030c 	and.w	r3, r3, #12
 8005f10:	2b0c      	cmp	r3, #12
 8005f12:	d82d      	bhi.n	8005f70 <UART_SetConfig+0x14c>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <UART_SetConfig+0xf8>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005f71 	.word	0x08005f71
 8005f28:	08005f71 	.word	0x08005f71
 8005f2c:	08005f61 	.word	0x08005f61
 8005f30:	08005f71 	.word	0x08005f71
 8005f34:	08005f71 	.word	0x08005f71
 8005f38:	08005f71 	.word	0x08005f71
 8005f3c:	08005f59 	.word	0x08005f59
 8005f40:	08005f71 	.word	0x08005f71
 8005f44:	08005f71 	.word	0x08005f71
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f69 	.word	0x08005f69
 8005f50:	2300      	movs	r3, #0
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f56:	e0d8      	b.n	800610a <UART_SetConfig+0x2e6>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5e:	e0d4      	b.n	800610a <UART_SetConfig+0x2e6>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f66:	e0d0      	b.n	800610a <UART_SetConfig+0x2e6>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6e:	e0cc      	b.n	800610a <UART_SetConfig+0x2e6>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f76:	e0c8      	b.n	800610a <UART_SetConfig+0x2e6>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5e      	ldr	r2, [pc, #376]	; (80060f8 <UART_SetConfig+0x2d4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d125      	bne.n	8005fce <UART_SetConfig+0x1aa>
 8005f82:	4b5b      	ldr	r3, [pc, #364]	; (80060f0 <UART_SetConfig+0x2cc>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f8c:	2b30      	cmp	r3, #48	; 0x30
 8005f8e:	d016      	beq.n	8005fbe <UART_SetConfig+0x19a>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d818      	bhi.n	8005fc6 <UART_SetConfig+0x1a2>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d00a      	beq.n	8005fae <UART_SetConfig+0x18a>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d814      	bhi.n	8005fc6 <UART_SetConfig+0x1a2>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <UART_SetConfig+0x182>
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d008      	beq.n	8005fb6 <UART_SetConfig+0x192>
 8005fa4:	e00f      	b.n	8005fc6 <UART_SetConfig+0x1a2>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fac:	e0ad      	b.n	800610a <UART_SetConfig+0x2e6>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb4:	e0a9      	b.n	800610a <UART_SetConfig+0x2e6>
 8005fb6:	2304      	movs	r3, #4
 8005fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fbc:	e0a5      	b.n	800610a <UART_SetConfig+0x2e6>
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc4:	e0a1      	b.n	800610a <UART_SetConfig+0x2e6>
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fcc:	e09d      	b.n	800610a <UART_SetConfig+0x2e6>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a4a      	ldr	r2, [pc, #296]	; (80060fc <UART_SetConfig+0x2d8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d125      	bne.n	8006024 <UART_SetConfig+0x200>
 8005fd8:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <UART_SetConfig+0x2cc>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe4:	d016      	beq.n	8006014 <UART_SetConfig+0x1f0>
 8005fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fe8:	d818      	bhi.n	800601c <UART_SetConfig+0x1f8>
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d00a      	beq.n	8006004 <UART_SetConfig+0x1e0>
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d814      	bhi.n	800601c <UART_SetConfig+0x1f8>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <UART_SetConfig+0x1d8>
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d008      	beq.n	800600c <UART_SetConfig+0x1e8>
 8005ffa:	e00f      	b.n	800601c <UART_SetConfig+0x1f8>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006002:	e082      	b.n	800610a <UART_SetConfig+0x2e6>
 8006004:	2302      	movs	r3, #2
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600a:	e07e      	b.n	800610a <UART_SetConfig+0x2e6>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006012:	e07a      	b.n	800610a <UART_SetConfig+0x2e6>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601a:	e076      	b.n	800610a <UART_SetConfig+0x2e6>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006022:	e072      	b.n	800610a <UART_SetConfig+0x2e6>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a35      	ldr	r2, [pc, #212]	; (8006100 <UART_SetConfig+0x2dc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d12a      	bne.n	8006084 <UART_SetConfig+0x260>
 800602e:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <UART_SetConfig+0x2cc>)
 8006030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603c:	d01a      	beq.n	8006074 <UART_SetConfig+0x250>
 800603e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006042:	d81b      	bhi.n	800607c <UART_SetConfig+0x258>
 8006044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006048:	d00c      	beq.n	8006064 <UART_SetConfig+0x240>
 800604a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604e:	d815      	bhi.n	800607c <UART_SetConfig+0x258>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <UART_SetConfig+0x238>
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d008      	beq.n	800606c <UART_SetConfig+0x248>
 800605a:	e00f      	b.n	800607c <UART_SetConfig+0x258>
 800605c:	2300      	movs	r3, #0
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006062:	e052      	b.n	800610a <UART_SetConfig+0x2e6>
 8006064:	2302      	movs	r3, #2
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606a:	e04e      	b.n	800610a <UART_SetConfig+0x2e6>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006072:	e04a      	b.n	800610a <UART_SetConfig+0x2e6>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607a:	e046      	b.n	800610a <UART_SetConfig+0x2e6>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006082:	e042      	b.n	800610a <UART_SetConfig+0x2e6>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <UART_SetConfig+0x2c4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d13a      	bne.n	8006104 <UART_SetConfig+0x2e0>
 800608e:	4b18      	ldr	r3, [pc, #96]	; (80060f0 <UART_SetConfig+0x2cc>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800609c:	d01a      	beq.n	80060d4 <UART_SetConfig+0x2b0>
 800609e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a2:	d81b      	bhi.n	80060dc <UART_SetConfig+0x2b8>
 80060a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a8:	d00c      	beq.n	80060c4 <UART_SetConfig+0x2a0>
 80060aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ae:	d815      	bhi.n	80060dc <UART_SetConfig+0x2b8>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <UART_SetConfig+0x298>
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d008      	beq.n	80060cc <UART_SetConfig+0x2a8>
 80060ba:	e00f      	b.n	80060dc <UART_SetConfig+0x2b8>
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c2:	e022      	b.n	800610a <UART_SetConfig+0x2e6>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ca:	e01e      	b.n	800610a <UART_SetConfig+0x2e6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d2:	e01a      	b.n	800610a <UART_SetConfig+0x2e6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060da:	e016      	b.n	800610a <UART_SetConfig+0x2e6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e2:	e012      	b.n	800610a <UART_SetConfig+0x2e6>
 80060e4:	efff69f3 	.word	0xefff69f3
 80060e8:	40008000 	.word	0x40008000
 80060ec:	40013800 	.word	0x40013800
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40004400 	.word	0x40004400
 80060f8:	40004800 	.word	0x40004800
 80060fc:	40004c00 	.word	0x40004c00
 8006100:	40005000 	.word	0x40005000
 8006104:	2310      	movs	r3, #16
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a9f      	ldr	r2, [pc, #636]	; (800638c <UART_SetConfig+0x568>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d17a      	bne.n	800620a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006118:	2b08      	cmp	r3, #8
 800611a:	d824      	bhi.n	8006166 <UART_SetConfig+0x342>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0x300>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006149 	.word	0x08006149
 8006128:	08006167 	.word	0x08006167
 800612c:	08006151 	.word	0x08006151
 8006130:	08006167 	.word	0x08006167
 8006134:	08006157 	.word	0x08006157
 8006138:	08006167 	.word	0x08006167
 800613c:	08006167 	.word	0x08006167
 8006140:	08006167 	.word	0x08006167
 8006144:	0800615f 	.word	0x0800615f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006148:	f7ff f8b8 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 800614c:	61f8      	str	r0, [r7, #28]
        break;
 800614e:	e010      	b.n	8006172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006150:	4b8f      	ldr	r3, [pc, #572]	; (8006390 <UART_SetConfig+0x56c>)
 8006152:	61fb      	str	r3, [r7, #28]
        break;
 8006154:	e00d      	b.n	8006172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006156:	f7ff f819 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800615a:	61f8      	str	r0, [r7, #28]
        break;
 800615c:	e009      	b.n	8006172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006162:	61fb      	str	r3, [r7, #28]
        break;
 8006164:	e005      	b.n	8006172 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80fb 	beq.w	8006370 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	4413      	add	r3, r2
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	429a      	cmp	r2, r3
 8006188:	d305      	bcc.n	8006196 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	429a      	cmp	r2, r3
 8006194:	d903      	bls.n	800619e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800619c:	e0e8      	b.n	8006370 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2200      	movs	r2, #0
 80061a2:	461c      	mov	r4, r3
 80061a4:	4615      	mov	r5, r2
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	022b      	lsls	r3, r5, #8
 80061b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061b4:	0222      	lsls	r2, r4, #8
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	6849      	ldr	r1, [r1, #4]
 80061ba:	0849      	lsrs	r1, r1, #1
 80061bc:	2000      	movs	r0, #0
 80061be:	4688      	mov	r8, r1
 80061c0:	4681      	mov	r9, r0
 80061c2:	eb12 0a08 	adds.w	sl, r2, r8
 80061c6:	eb43 0b09 	adc.w	fp, r3, r9
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d8:	4650      	mov	r0, sl
 80061da:	4659      	mov	r1, fp
 80061dc:	f7fa fd14 	bl	8000c08 <__aeabi_uldivmod>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4613      	mov	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ee:	d308      	bcc.n	8006202 <UART_SetConfig+0x3de>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f6:	d204      	bcs.n	8006202 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	e0b6      	b.n	8006370 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006208:	e0b2      	b.n	8006370 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006212:	d15e      	bne.n	80062d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006218:	2b08      	cmp	r3, #8
 800621a:	d828      	bhi.n	800626e <UART_SetConfig+0x44a>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x400>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	0800626f 	.word	0x0800626f
 8006234:	0800625f 	.word	0x0800625f
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800626f 	.word	0x0800626f
 8006244:	08006267 	.word	0x08006267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7ff f838 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 800624c:	61f8      	str	r0, [r7, #28]
        break;
 800624e:	e014      	b.n	800627a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006250:	f7ff f84a 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 8006254:	61f8      	str	r0, [r7, #28]
        break;
 8006256:	e010      	b.n	800627a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006258:	4b4d      	ldr	r3, [pc, #308]	; (8006390 <UART_SetConfig+0x56c>)
 800625a:	61fb      	str	r3, [r7, #28]
        break;
 800625c:	e00d      	b.n	800627a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625e:	f7fe ff95 	bl	800518c <HAL_RCC_GetSysClockFreq>
 8006262:	61f8      	str	r0, [r7, #28]
        break;
 8006264:	e009      	b.n	800627a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626a:	61fb      	str	r3, [r7, #28]
        break;
 800626c:	e005      	b.n	800627a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d077      	beq.n	8006370 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	005a      	lsls	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	441a      	add	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b0f      	cmp	r3, #15
 800629a:	d916      	bls.n	80062ca <UART_SetConfig+0x4a6>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a2:	d212      	bcs.n	80062ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f023 030f 	bic.w	r3, r3, #15
 80062ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	085b      	lsrs	r3, r3, #1
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	8afb      	ldrh	r3, [r7, #22]
 80062bc:	4313      	orrs	r3, r2
 80062be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	8afa      	ldrh	r2, [r7, #22]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e052      	b.n	8006370 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062d0:	e04e      	b.n	8006370 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d827      	bhi.n	800632a <UART_SetConfig+0x506>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x4bc>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	0800632b 	.word	0x0800632b
 80062f0:	0800631b 	.word	0x0800631b
 80062f4:	0800632b 	.word	0x0800632b
 80062f8:	0800632b 	.word	0x0800632b
 80062fc:	0800632b 	.word	0x0800632b
 8006300:	08006323 	.word	0x08006323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fe ffda 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8006308:	61f8      	str	r0, [r7, #28]
        break;
 800630a:	e014      	b.n	8006336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800630c:	f7fe ffec 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 8006310:	61f8      	str	r0, [r7, #28]
        break;
 8006312:	e010      	b.n	8006336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006314:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <UART_SetConfig+0x56c>)
 8006316:	61fb      	str	r3, [r7, #28]
        break;
 8006318:	e00d      	b.n	8006336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631a:	f7fe ff37 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800631e:	61f8      	str	r0, [r7, #28]
        break;
 8006320:	e009      	b.n	8006336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006326:	61fb      	str	r3, [r7, #28]
        break;
 8006328:	e005      	b.n	8006336 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006334:	bf00      	nop
    }

    if (pclk != 0U)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d019      	beq.n	8006370 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	085a      	lsrs	r2, r3, #1
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	441a      	add	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	fbb2 f3f3 	udiv	r3, r2, r3
 800634e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	d909      	bls.n	800636a <UART_SetConfig+0x546>
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635c:	d205      	bcs.n	800636a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60da      	str	r2, [r3, #12]
 8006368:	e002      	b.n	8006370 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800637c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006380:	4618      	mov	r0, r3
 8006382:	3728      	adds	r7, #40	; 0x28
 8006384:	46bd      	mov	sp, r7
 8006386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800638a:	bf00      	nop
 800638c:	40008000 	.word	0x40008000
 8006390:	00f42400 	.word	0x00f42400

08006394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01a      	beq.n	80064aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006492:	d10a      	bne.n	80064aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
  }
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064e8:	f7fb fe9e 	bl	8002228 <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d10e      	bne.n	800651a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f82d 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e023      	b.n	8006562 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d10e      	bne.n	8006546 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f817 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e00d      	b.n	8006562 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b09c      	sub	sp, #112	; 0x70
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657a:	e0a5      	b.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	f000 80a1 	beq.w	80066c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fb fe4f 	bl	8002228 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <UART_WaitOnFlagUntilTimeout+0x32>
 8006596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006598:	2b00      	cmp	r3, #0
 800659a:	d13e      	bne.n	800661a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b0:	667b      	str	r3, [r7, #100]	; 0x64
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	663b      	str	r3, [r7, #96]	; 0x60
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80065f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e067      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d04f      	beq.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006636:	d147      	bne.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006640:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
 8006662:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e6      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3308      	adds	r3, #8
 800667a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	613b      	str	r3, [r7, #16]
   return(result);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	66bb      	str	r3, [r7, #104]	; 0x68
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3308      	adds	r3, #8
 8006692:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006694:	623a      	str	r2, [r7, #32]
 8006696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	69f9      	ldr	r1, [r7, #28]
 800669a:	6a3a      	ldr	r2, [r7, #32]
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e5      	bne.n	8006674 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e010      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	bf0c      	ite	eq
 80066d8:	2301      	moveq	r3, #1
 80066da:	2300      	movne	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	f43f af4a 	beq.w	800657c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3770      	adds	r7, #112	; 0x70
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066f2:	b084      	sub	sp, #16
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	f107 001c 	add.w	r0, r7, #28
 8006700:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa6b 	bl	8006bec <USB_CoreReset>
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800671a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	639a      	str	r2, [r3, #56]	; 0x38
 800672c:	e005      	b.n	800673a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006746:	b004      	add	sp, #16
 8006748:	4770      	bx	lr

0800674a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d115      	bne.n	80067ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800679a:	2001      	movs	r0, #1
 800679c:	f7fb fd50 	bl	8002240 <HAL_Delay>
      ms++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa12 	bl	8006bd0 <USB_GetMode>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d01e      	beq.n	80067f0 <USB_SetCurrentMode+0x84>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b31      	cmp	r3, #49	; 0x31
 80067b6:	d9f0      	bls.n	800679a <USB_SetCurrentMode+0x2e>
 80067b8:	e01a      	b.n	80067f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d115      	bne.n	80067ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067cc:	2001      	movs	r0, #1
 80067ce:	f7fb fd37 	bl	8002240 <HAL_Delay>
      ms++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9f9 	bl	8006bd0 <USB_GetMode>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <USB_SetCurrentMode+0x84>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b31      	cmp	r3, #49	; 0x31
 80067e8:	d9f0      	bls.n	80067cc <USB_SetCurrentMode+0x60>
 80067ea:	e001      	b.n	80067f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e005      	b.n	80067fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b32      	cmp	r3, #50	; 0x32
 80067f4:	d101      	bne.n	80067fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006804:	b084      	sub	sp, #16
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e009      	b.n	8006838 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3340      	adds	r3, #64	; 0x40
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	2200      	movs	r2, #0
 8006830:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3301      	adds	r3, #1
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b0e      	cmp	r3, #14
 800683c:	d9f2      	bls.n	8006824 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800683e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11c      	bne.n	800687e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006852:	f043 0302 	orr.w	r3, r3, #2
 8006856:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e005      	b.n	800688a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006890:	461a      	mov	r2, r3
 8006892:	2300      	movs	r3, #0
 8006894:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	4619      	mov	r1, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	461a      	mov	r2, r3
 80068a6:	680b      	ldr	r3, [r1, #0]
 80068a8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068aa:	2103      	movs	r1, #3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f955 	bl	8006b5c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068b2:	2110      	movs	r1, #16
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f8f1 	bl	8006a9c <USB_FlushTxFifo>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f91b 	bl	8006b00 <USB_FlushRxFifo>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	461a      	mov	r2, r3
 80068dc:	2300      	movs	r3, #0
 80068de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	461a      	mov	r2, r3
 80068e8:	2300      	movs	r3, #0
 80068ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	461a      	mov	r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	e043      	b.n	8006986 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006914:	d118      	bne.n	8006948 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	461a      	mov	r2, r3
 800692a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	e013      	b.n	800695a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	461a      	mov	r2, r3
 8006940:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e008      	b.n	800695a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	461a      	mov	r2, r3
 8006968:	2300      	movs	r3, #0
 800696a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	461a      	mov	r2, r3
 800697a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800697e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	3301      	adds	r3, #1
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d3b7      	bcc.n	80068fe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e043      	b.n	8006a1c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069aa:	d118      	bne.n	80069de <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e013      	b.n	80069f0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	e008      	b.n	80069f0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	461a      	mov	r2, r3
 80069ec:	2300      	movs	r3, #0
 80069ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	461a      	mov	r2, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d3b7      	bcc.n	8006994 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f043 0210 	orr.w	r2, r3, #16
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <USB_DevInit+0x294>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f043 0208 	orr.w	r2, r3, #8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d107      	bne.n	8006a86 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7e:	f043 0304 	orr.w	r3, r3, #4
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a92:	b004      	add	sp, #16
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	803c3800 	.word	0x803c3800

08006a9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	4a12      	ldr	r2, [pc, #72]	; (8006afc <USB_FlushTxFifo+0x60>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d901      	bls.n	8006aba <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e01a      	b.n	8006af0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	daf3      	bge.n	8006aaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	019b      	lsls	r3, r3, #6
 8006aca:	f043 0220 	orr.w	r2, r3, #32
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	4a08      	ldr	r2, [pc, #32]	; (8006afc <USB_FlushTxFifo+0x60>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d901      	bls.n	8006ae2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e006      	b.n	8006af0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d0f1      	beq.n	8006ad2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	00030d40 	.word	0x00030d40

08006b00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	4a11      	ldr	r2, [pc, #68]	; (8006b58 <USB_FlushRxFifo+0x58>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d901      	bls.n	8006b1c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e017      	b.n	8006b4c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	daf3      	bge.n	8006b0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3301      	adds	r3, #1
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <USB_FlushRxFifo+0x58>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e006      	b.n	8006b4c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d0f1      	beq.n	8006b2e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	00030d40 	.word	0x00030d40

08006b5c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ba8:	f023 0303 	bic.w	r3, r3, #3
 8006bac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <USB_CoreReset+0x60>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d901      	bls.n	8006c08 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e01a      	b.n	8006c3e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	daf3      	bge.n	8006bf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f043 0201 	orr.w	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <USB_CoreReset+0x60>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d901      	bls.n	8006c30 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e006      	b.n	8006c3e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d0f1      	beq.n	8006c20 <USB_CoreReset+0x34>

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	00030d40 	.word	0x00030d40

08006c50 <__errno>:
 8006c50:	4b01      	ldr	r3, [pc, #4]	; (8006c58 <__errno+0x8>)
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	2000060c 	.word	0x2000060c

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <__libc_init_array+0x38>)
 8006c60:	4c0d      	ldr	r4, [pc, #52]	; (8006c98 <__libc_init_array+0x3c>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	2600      	movs	r6, #0
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	4d0b      	ldr	r5, [pc, #44]	; (8006c9c <__libc_init_array+0x40>)
 8006c6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ca0 <__libc_init_array+0x44>)
 8006c70:	f002 fe14 	bl	800989c <_init>
 8006c74:	1b64      	subs	r4, r4, r5
 8006c76:	10a4      	asrs	r4, r4, #2
 8006c78:	2600      	movs	r6, #0
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	08009ce4 	.word	0x08009ce4
 8006c98:	08009ce4 	.word	0x08009ce4
 8006c9c:	08009ce4 	.word	0x08009ce4
 8006ca0:	08009ce8 	.word	0x08009ce8

08006ca4 <memset>:
 8006ca4:	4402      	add	r2, r0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d100      	bne.n	8006cae <memset+0xa>
 8006cac:	4770      	bx	lr
 8006cae:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb2:	e7f9      	b.n	8006ca8 <memset+0x4>

08006cb4 <__cvt>:
 8006cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb8:	ec55 4b10 	vmov	r4, r5, d0
 8006cbc:	2d00      	cmp	r5, #0
 8006cbe:	460e      	mov	r6, r1
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	bfbb      	ittet	lt
 8006cc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cca:	461d      	movlt	r5, r3
 8006ccc:	2300      	movge	r3, #0
 8006cce:	232d      	movlt	r3, #45	; 0x2d
 8006cd0:	700b      	strb	r3, [r1, #0]
 8006cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cd8:	4691      	mov	r9, r2
 8006cda:	f023 0820 	bic.w	r8, r3, #32
 8006cde:	bfbc      	itt	lt
 8006ce0:	4622      	movlt	r2, r4
 8006ce2:	4614      	movlt	r4, r2
 8006ce4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ce8:	d005      	beq.n	8006cf6 <__cvt+0x42>
 8006cea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cee:	d100      	bne.n	8006cf2 <__cvt+0x3e>
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	e000      	b.n	8006cf8 <__cvt+0x44>
 8006cf6:	2103      	movs	r1, #3
 8006cf8:	ab03      	add	r3, sp, #12
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	ab02      	add	r3, sp, #8
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	ec45 4b10 	vmov	d0, r4, r5
 8006d04:	4653      	mov	r3, sl
 8006d06:	4632      	mov	r2, r6
 8006d08:	f000 fcca 	bl	80076a0 <_dtoa_r>
 8006d0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d10:	4607      	mov	r7, r0
 8006d12:	d102      	bne.n	8006d1a <__cvt+0x66>
 8006d14:	f019 0f01 	tst.w	r9, #1
 8006d18:	d022      	beq.n	8006d60 <__cvt+0xac>
 8006d1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d1e:	eb07 0906 	add.w	r9, r7, r6
 8006d22:	d110      	bne.n	8006d46 <__cvt+0x92>
 8006d24:	783b      	ldrb	r3, [r7, #0]
 8006d26:	2b30      	cmp	r3, #48	; 0x30
 8006d28:	d10a      	bne.n	8006d40 <__cvt+0x8c>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fed9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d36:	b918      	cbnz	r0, 8006d40 <__cvt+0x8c>
 8006d38:	f1c6 0601 	rsb	r6, r6, #1
 8006d3c:	f8ca 6000 	str.w	r6, [sl]
 8006d40:	f8da 3000 	ldr.w	r3, [sl]
 8006d44:	4499      	add	r9, r3
 8006d46:	2200      	movs	r2, #0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f7f9 fecb 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d52:	b108      	cbz	r0, 8006d58 <__cvt+0xa4>
 8006d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d58:	2230      	movs	r2, #48	; 0x30
 8006d5a:	9b03      	ldr	r3, [sp, #12]
 8006d5c:	454b      	cmp	r3, r9
 8006d5e:	d307      	bcc.n	8006d70 <__cvt+0xbc>
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d64:	1bdb      	subs	r3, r3, r7
 8006d66:	4638      	mov	r0, r7
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	b004      	add	sp, #16
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	1c59      	adds	r1, r3, #1
 8006d72:	9103      	str	r1, [sp, #12]
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e7f0      	b.n	8006d5a <__cvt+0xa6>

08006d78 <__exponent>:
 8006d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	bfb8      	it	lt
 8006d80:	4249      	neglt	r1, r1
 8006d82:	f803 2b02 	strb.w	r2, [r3], #2
 8006d86:	bfb4      	ite	lt
 8006d88:	222d      	movlt	r2, #45	; 0x2d
 8006d8a:	222b      	movge	r2, #43	; 0x2b
 8006d8c:	2909      	cmp	r1, #9
 8006d8e:	7042      	strb	r2, [r0, #1]
 8006d90:	dd2a      	ble.n	8006de8 <__exponent+0x70>
 8006d92:	f10d 0407 	add.w	r4, sp, #7
 8006d96:	46a4      	mov	ip, r4
 8006d98:	270a      	movs	r7, #10
 8006d9a:	46a6      	mov	lr, r4
 8006d9c:	460a      	mov	r2, r1
 8006d9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006da2:	fb07 1516 	mls	r5, r7, r6, r1
 8006da6:	3530      	adds	r5, #48	; 0x30
 8006da8:	2a63      	cmp	r2, #99	; 0x63
 8006daa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006db2:	4631      	mov	r1, r6
 8006db4:	dcf1      	bgt.n	8006d9a <__exponent+0x22>
 8006db6:	3130      	adds	r1, #48	; 0x30
 8006db8:	f1ae 0502 	sub.w	r5, lr, #2
 8006dbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006dc0:	1c44      	adds	r4, r0, #1
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4561      	cmp	r1, ip
 8006dc6:	d30a      	bcc.n	8006dde <__exponent+0x66>
 8006dc8:	f10d 0209 	add.w	r2, sp, #9
 8006dcc:	eba2 020e 	sub.w	r2, r2, lr
 8006dd0:	4565      	cmp	r5, ip
 8006dd2:	bf88      	it	hi
 8006dd4:	2200      	movhi	r2, #0
 8006dd6:	4413      	add	r3, r2
 8006dd8:	1a18      	subs	r0, r3, r0
 8006dda:	b003      	add	sp, #12
 8006ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006de2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006de6:	e7ed      	b.n	8006dc4 <__exponent+0x4c>
 8006de8:	2330      	movs	r3, #48	; 0x30
 8006dea:	3130      	adds	r1, #48	; 0x30
 8006dec:	7083      	strb	r3, [r0, #2]
 8006dee:	70c1      	strb	r1, [r0, #3]
 8006df0:	1d03      	adds	r3, r0, #4
 8006df2:	e7f1      	b.n	8006dd8 <__exponent+0x60>

08006df4 <_printf_float>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	ed2d 8b02 	vpush	{d8}
 8006dfc:	b08d      	sub	sp, #52	; 0x34
 8006dfe:	460c      	mov	r4, r1
 8006e00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e04:	4616      	mov	r6, r2
 8006e06:	461f      	mov	r7, r3
 8006e08:	4605      	mov	r5, r0
 8006e0a:	f001 fa37 	bl	800827c <_localeconv_r>
 8006e0e:	f8d0 a000 	ldr.w	sl, [r0]
 8006e12:	4650      	mov	r0, sl
 8006e14:	f7f9 f9ec 	bl	80001f0 <strlen>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	9305      	str	r3, [sp, #20]
 8006e20:	f8d8 3000 	ldr.w	r3, [r8]
 8006e24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e28:	3307      	adds	r3, #7
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	f103 0208 	add.w	r2, r3, #8
 8006e32:	f8c8 2000 	str.w	r2, [r8]
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e46:	9307      	str	r3, [sp, #28]
 8006e48:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e4c:	ee08 0a10 	vmov	s16, r0
 8006e50:	4b9f      	ldr	r3, [pc, #636]	; (80070d0 <_printf_float+0x2dc>)
 8006e52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	f7f9 fe77 	bl	8000b4c <__aeabi_dcmpun>
 8006e5e:	bb88      	cbnz	r0, 8006ec4 <_printf_float+0xd0>
 8006e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e64:	4b9a      	ldr	r3, [pc, #616]	; (80070d0 <_printf_float+0x2dc>)
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6a:	f7f9 fe51 	bl	8000b10 <__aeabi_dcmple>
 8006e6e:	bb48      	cbnz	r0, 8006ec4 <_printf_float+0xd0>
 8006e70:	2200      	movs	r2, #0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4640      	mov	r0, r8
 8006e76:	4649      	mov	r1, r9
 8006e78:	f7f9 fe40 	bl	8000afc <__aeabi_dcmplt>
 8006e7c:	b110      	cbz	r0, 8006e84 <_printf_float+0x90>
 8006e7e:	232d      	movs	r3, #45	; 0x2d
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e84:	4b93      	ldr	r3, [pc, #588]	; (80070d4 <_printf_float+0x2e0>)
 8006e86:	4894      	ldr	r0, [pc, #592]	; (80070d8 <_printf_float+0x2e4>)
 8006e88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e8c:	bf94      	ite	ls
 8006e8e:	4698      	movls	r8, r3
 8006e90:	4680      	movhi	r8, r0
 8006e92:	2303      	movs	r3, #3
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	9b05      	ldr	r3, [sp, #20]
 8006e98:	f023 0204 	bic.w	r2, r3, #4
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	f04f 0900 	mov.w	r9, #0
 8006ea2:	9700      	str	r7, [sp, #0]
 8006ea4:	4633      	mov	r3, r6
 8006ea6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f9d8 	bl	8007260 <_printf_common>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f040 8090 	bne.w	8006fd6 <_printf_float+0x1e2>
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	b00d      	add	sp, #52	; 0x34
 8006ebc:	ecbd 8b02 	vpop	{d8}
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fe3e 	bl	8000b4c <__aeabi_dcmpun>
 8006ed0:	b140      	cbz	r0, 8006ee4 <_printf_float+0xf0>
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfbc      	itt	lt
 8006ed8:	232d      	movlt	r3, #45	; 0x2d
 8006eda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ede:	487f      	ldr	r0, [pc, #508]	; (80070dc <_printf_float+0x2e8>)
 8006ee0:	4b7f      	ldr	r3, [pc, #508]	; (80070e0 <_printf_float+0x2ec>)
 8006ee2:	e7d1      	b.n	8006e88 <_printf_float+0x94>
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eea:	9206      	str	r2, [sp, #24]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	d13f      	bne.n	8006f70 <_printf_float+0x17c>
 8006ef0:	2306      	movs	r3, #6
 8006ef2:	6063      	str	r3, [r4, #4]
 8006ef4:	9b05      	ldr	r3, [sp, #20]
 8006ef6:	6861      	ldr	r1, [r4, #4]
 8006ef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006efc:	2300      	movs	r3, #0
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	ab0a      	add	r3, sp, #40	; 0x28
 8006f02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f06:	ab09      	add	r3, sp, #36	; 0x24
 8006f08:	ec49 8b10 	vmov	d0, r8, r9
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6022      	str	r2, [r4, #0]
 8006f10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f14:	4628      	mov	r0, r5
 8006f16:	f7ff fecd 	bl	8006cb4 <__cvt>
 8006f1a:	9b06      	ldr	r3, [sp, #24]
 8006f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f1e:	2b47      	cmp	r3, #71	; 0x47
 8006f20:	4680      	mov	r8, r0
 8006f22:	d108      	bne.n	8006f36 <_printf_float+0x142>
 8006f24:	1cc8      	adds	r0, r1, #3
 8006f26:	db02      	blt.n	8006f2e <_printf_float+0x13a>
 8006f28:	6863      	ldr	r3, [r4, #4]
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	dd41      	ble.n	8006fb2 <_printf_float+0x1be>
 8006f2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f32:	fa5f fb8b 	uxtb.w	fp, fp
 8006f36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f3a:	d820      	bhi.n	8006f7e <_printf_float+0x18a>
 8006f3c:	3901      	subs	r1, #1
 8006f3e:	465a      	mov	r2, fp
 8006f40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f44:	9109      	str	r1, [sp, #36]	; 0x24
 8006f46:	f7ff ff17 	bl	8006d78 <__exponent>
 8006f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4c:	1813      	adds	r3, r2, r0
 8006f4e:	2a01      	cmp	r2, #1
 8006f50:	4681      	mov	r9, r0
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	dc02      	bgt.n	8006f5c <_printf_float+0x168>
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	07d2      	lsls	r2, r2, #31
 8006f5a:	d501      	bpl.n	8006f60 <_printf_float+0x16c>
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d09c      	beq.n	8006ea2 <_printf_float+0xae>
 8006f68:	232d      	movs	r3, #45	; 0x2d
 8006f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6e:	e798      	b.n	8006ea2 <_printf_float+0xae>
 8006f70:	9a06      	ldr	r2, [sp, #24]
 8006f72:	2a47      	cmp	r2, #71	; 0x47
 8006f74:	d1be      	bne.n	8006ef4 <_printf_float+0x100>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1bc      	bne.n	8006ef4 <_printf_float+0x100>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7b9      	b.n	8006ef2 <_printf_float+0xfe>
 8006f7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f82:	d118      	bne.n	8006fb6 <_printf_float+0x1c2>
 8006f84:	2900      	cmp	r1, #0
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	dd0b      	ble.n	8006fa2 <_printf_float+0x1ae>
 8006f8a:	6121      	str	r1, [r4, #16]
 8006f8c:	b913      	cbnz	r3, 8006f94 <_printf_float+0x1a0>
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	07d0      	lsls	r0, r2, #31
 8006f92:	d502      	bpl.n	8006f9a <_printf_float+0x1a6>
 8006f94:	3301      	adds	r3, #1
 8006f96:	440b      	add	r3, r1
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f9c:	f04f 0900 	mov.w	r9, #0
 8006fa0:	e7de      	b.n	8006f60 <_printf_float+0x16c>
 8006fa2:	b913      	cbnz	r3, 8006faa <_printf_float+0x1b6>
 8006fa4:	6822      	ldr	r2, [r4, #0]
 8006fa6:	07d2      	lsls	r2, r2, #31
 8006fa8:	d501      	bpl.n	8006fae <_printf_float+0x1ba>
 8006faa:	3302      	adds	r3, #2
 8006fac:	e7f4      	b.n	8006f98 <_printf_float+0x1a4>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e7f2      	b.n	8006f98 <_printf_float+0x1a4>
 8006fb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb8:	4299      	cmp	r1, r3
 8006fba:	db05      	blt.n	8006fc8 <_printf_float+0x1d4>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	6121      	str	r1, [r4, #16]
 8006fc0:	07d8      	lsls	r0, r3, #31
 8006fc2:	d5ea      	bpl.n	8006f9a <_printf_float+0x1a6>
 8006fc4:	1c4b      	adds	r3, r1, #1
 8006fc6:	e7e7      	b.n	8006f98 <_printf_float+0x1a4>
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	bfd4      	ite	le
 8006fcc:	f1c1 0202 	rsble	r2, r1, #2
 8006fd0:	2201      	movgt	r2, #1
 8006fd2:	4413      	add	r3, r2
 8006fd4:	e7e0      	b.n	8006f98 <_printf_float+0x1a4>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	055a      	lsls	r2, r3, #21
 8006fda:	d407      	bmi.n	8006fec <_printf_float+0x1f8>
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	4642      	mov	r2, r8
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d12c      	bne.n	8007044 <_printf_float+0x250>
 8006fea:	e764      	b.n	8006eb6 <_printf_float+0xc2>
 8006fec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ff0:	f240 80e0 	bls.w	80071b4 <_printf_float+0x3c0>
 8006ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f7f9 fd74 	bl	8000ae8 <__aeabi_dcmpeq>
 8007000:	2800      	cmp	r0, #0
 8007002:	d034      	beq.n	800706e <_printf_float+0x27a>
 8007004:	4a37      	ldr	r2, [pc, #220]	; (80070e4 <_printf_float+0x2f0>)
 8007006:	2301      	movs	r3, #1
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	47b8      	blx	r7
 800700e:	3001      	adds	r0, #1
 8007010:	f43f af51 	beq.w	8006eb6 <_printf_float+0xc2>
 8007014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007018:	429a      	cmp	r2, r3
 800701a:	db02      	blt.n	8007022 <_printf_float+0x22e>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07d8      	lsls	r0, r3, #31
 8007020:	d510      	bpl.n	8007044 <_printf_float+0x250>
 8007022:	ee18 3a10 	vmov	r3, s16
 8007026:	4652      	mov	r2, sl
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f af41 	beq.w	8006eb6 <_printf_float+0xc2>
 8007034:	f04f 0800 	mov.w	r8, #0
 8007038:	f104 091a 	add.w	r9, r4, #26
 800703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703e:	3b01      	subs	r3, #1
 8007040:	4543      	cmp	r3, r8
 8007042:	dc09      	bgt.n	8007058 <_printf_float+0x264>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	079b      	lsls	r3, r3, #30
 8007048:	f100 8105 	bmi.w	8007256 <_printf_float+0x462>
 800704c:	68e0      	ldr	r0, [r4, #12]
 800704e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007050:	4298      	cmp	r0, r3
 8007052:	bfb8      	it	lt
 8007054:	4618      	movlt	r0, r3
 8007056:	e730      	b.n	8006eba <_printf_float+0xc6>
 8007058:	2301      	movs	r3, #1
 800705a:	464a      	mov	r2, r9
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f af27 	beq.w	8006eb6 <_printf_float+0xc2>
 8007068:	f108 0801 	add.w	r8, r8, #1
 800706c:	e7e6      	b.n	800703c <_printf_float+0x248>
 800706e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	dc39      	bgt.n	80070e8 <_printf_float+0x2f4>
 8007074:	4a1b      	ldr	r2, [pc, #108]	; (80070e4 <_printf_float+0x2f0>)
 8007076:	2301      	movs	r3, #1
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f af19 	beq.w	8006eb6 <_printf_float+0xc2>
 8007084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007088:	4313      	orrs	r3, r2
 800708a:	d102      	bne.n	8007092 <_printf_float+0x29e>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	07d9      	lsls	r1, r3, #31
 8007090:	d5d8      	bpl.n	8007044 <_printf_float+0x250>
 8007092:	ee18 3a10 	vmov	r3, s16
 8007096:	4652      	mov	r2, sl
 8007098:	4631      	mov	r1, r6
 800709a:	4628      	mov	r0, r5
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	f43f af09 	beq.w	8006eb6 <_printf_float+0xc2>
 80070a4:	f04f 0900 	mov.w	r9, #0
 80070a8:	f104 0a1a 	add.w	sl, r4, #26
 80070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ae:	425b      	negs	r3, r3
 80070b0:	454b      	cmp	r3, r9
 80070b2:	dc01      	bgt.n	80070b8 <_printf_float+0x2c4>
 80070b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b6:	e792      	b.n	8006fde <_printf_float+0x1ea>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f aef7 	beq.w	8006eb6 <_printf_float+0xc2>
 80070c8:	f109 0901 	add.w	r9, r9, #1
 80070cc:	e7ee      	b.n	80070ac <_printf_float+0x2b8>
 80070ce:	bf00      	nop
 80070d0:	7fefffff 	.word	0x7fefffff
 80070d4:	08009904 	.word	0x08009904
 80070d8:	08009908 	.word	0x08009908
 80070dc:	08009910 	.word	0x08009910
 80070e0:	0800990c 	.word	0x0800990c
 80070e4:	08009914 	.word	0x08009914
 80070e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bfa8      	it	ge
 80070f0:	461a      	movge	r2, r3
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	4691      	mov	r9, r2
 80070f6:	dc37      	bgt.n	8007168 <_printf_float+0x374>
 80070f8:	f04f 0b00 	mov.w	fp, #0
 80070fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007100:	f104 021a 	add.w	r2, r4, #26
 8007104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	eba3 0309 	sub.w	r3, r3, r9
 800710c:	455b      	cmp	r3, fp
 800710e:	dc33      	bgt.n	8007178 <_printf_float+0x384>
 8007110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007114:	429a      	cmp	r2, r3
 8007116:	db3b      	blt.n	8007190 <_printf_float+0x39c>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	07da      	lsls	r2, r3, #31
 800711c:	d438      	bmi.n	8007190 <_printf_float+0x39c>
 800711e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007120:	9a05      	ldr	r2, [sp, #20]
 8007122:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007124:	1a9a      	subs	r2, r3, r2
 8007126:	eba3 0901 	sub.w	r9, r3, r1
 800712a:	4591      	cmp	r9, r2
 800712c:	bfa8      	it	ge
 800712e:	4691      	movge	r9, r2
 8007130:	f1b9 0f00 	cmp.w	r9, #0
 8007134:	dc35      	bgt.n	80071a2 <_printf_float+0x3ae>
 8007136:	f04f 0800 	mov.w	r8, #0
 800713a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800713e:	f104 0a1a 	add.w	sl, r4, #26
 8007142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	eba3 0309 	sub.w	r3, r3, r9
 800714c:	4543      	cmp	r3, r8
 800714e:	f77f af79 	ble.w	8007044 <_printf_float+0x250>
 8007152:	2301      	movs	r3, #1
 8007154:	4652      	mov	r2, sl
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f aeaa 	beq.w	8006eb6 <_printf_float+0xc2>
 8007162:	f108 0801 	add.w	r8, r8, #1
 8007166:	e7ec      	b.n	8007142 <_printf_float+0x34e>
 8007168:	4613      	mov	r3, r2
 800716a:	4631      	mov	r1, r6
 800716c:	4642      	mov	r2, r8
 800716e:	4628      	mov	r0, r5
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	d1c0      	bne.n	80070f8 <_printf_float+0x304>
 8007176:	e69e      	b.n	8006eb6 <_printf_float+0xc2>
 8007178:	2301      	movs	r3, #1
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	9205      	str	r2, [sp, #20]
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f ae97 	beq.w	8006eb6 <_printf_float+0xc2>
 8007188:	9a05      	ldr	r2, [sp, #20]
 800718a:	f10b 0b01 	add.w	fp, fp, #1
 800718e:	e7b9      	b.n	8007104 <_printf_float+0x310>
 8007190:	ee18 3a10 	vmov	r3, s16
 8007194:	4652      	mov	r2, sl
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	d1be      	bne.n	800711e <_printf_float+0x32a>
 80071a0:	e689      	b.n	8006eb6 <_printf_float+0xc2>
 80071a2:	9a05      	ldr	r2, [sp, #20]
 80071a4:	464b      	mov	r3, r9
 80071a6:	4442      	add	r2, r8
 80071a8:	4631      	mov	r1, r6
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	d1c1      	bne.n	8007136 <_printf_float+0x342>
 80071b2:	e680      	b.n	8006eb6 <_printf_float+0xc2>
 80071b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071b6:	2a01      	cmp	r2, #1
 80071b8:	dc01      	bgt.n	80071be <_printf_float+0x3ca>
 80071ba:	07db      	lsls	r3, r3, #31
 80071bc:	d538      	bpl.n	8007230 <_printf_float+0x43c>
 80071be:	2301      	movs	r3, #1
 80071c0:	4642      	mov	r2, r8
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	f43f ae74 	beq.w	8006eb6 <_printf_float+0xc2>
 80071ce:	ee18 3a10 	vmov	r3, s16
 80071d2:	4652      	mov	r2, sl
 80071d4:	4631      	mov	r1, r6
 80071d6:	4628      	mov	r0, r5
 80071d8:	47b8      	blx	r7
 80071da:	3001      	adds	r0, #1
 80071dc:	f43f ae6b 	beq.w	8006eb6 <_printf_float+0xc2>
 80071e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071e4:	2200      	movs	r2, #0
 80071e6:	2300      	movs	r3, #0
 80071e8:	f7f9 fc7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80071ec:	b9d8      	cbnz	r0, 8007226 <_printf_float+0x432>
 80071ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f0:	f108 0201 	add.w	r2, r8, #1
 80071f4:	3b01      	subs	r3, #1
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	d10e      	bne.n	800721e <_printf_float+0x42a>
 8007200:	e659      	b.n	8006eb6 <_printf_float+0xc2>
 8007202:	2301      	movs	r3, #1
 8007204:	4652      	mov	r2, sl
 8007206:	4631      	mov	r1, r6
 8007208:	4628      	mov	r0, r5
 800720a:	47b8      	blx	r7
 800720c:	3001      	adds	r0, #1
 800720e:	f43f ae52 	beq.w	8006eb6 <_printf_float+0xc2>
 8007212:	f108 0801 	add.w	r8, r8, #1
 8007216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007218:	3b01      	subs	r3, #1
 800721a:	4543      	cmp	r3, r8
 800721c:	dcf1      	bgt.n	8007202 <_printf_float+0x40e>
 800721e:	464b      	mov	r3, r9
 8007220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007224:	e6dc      	b.n	8006fe0 <_printf_float+0x1ec>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	f104 0a1a 	add.w	sl, r4, #26
 800722e:	e7f2      	b.n	8007216 <_printf_float+0x422>
 8007230:	2301      	movs	r3, #1
 8007232:	4642      	mov	r2, r8
 8007234:	e7df      	b.n	80071f6 <_printf_float+0x402>
 8007236:	2301      	movs	r3, #1
 8007238:	464a      	mov	r2, r9
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae38 	beq.w	8006eb6 <_printf_float+0xc2>
 8007246:	f108 0801 	add.w	r8, r8, #1
 800724a:	68e3      	ldr	r3, [r4, #12]
 800724c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800724e:	1a5b      	subs	r3, r3, r1
 8007250:	4543      	cmp	r3, r8
 8007252:	dcf0      	bgt.n	8007236 <_printf_float+0x442>
 8007254:	e6fa      	b.n	800704c <_printf_float+0x258>
 8007256:	f04f 0800 	mov.w	r8, #0
 800725a:	f104 0919 	add.w	r9, r4, #25
 800725e:	e7f4      	b.n	800724a <_printf_float+0x456>

08007260 <_printf_common>:
 8007260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007264:	4616      	mov	r6, r2
 8007266:	4699      	mov	r9, r3
 8007268:	688a      	ldr	r2, [r1, #8]
 800726a:	690b      	ldr	r3, [r1, #16]
 800726c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007270:	4293      	cmp	r3, r2
 8007272:	bfb8      	it	lt
 8007274:	4613      	movlt	r3, r2
 8007276:	6033      	str	r3, [r6, #0]
 8007278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800727c:	4607      	mov	r7, r0
 800727e:	460c      	mov	r4, r1
 8007280:	b10a      	cbz	r2, 8007286 <_printf_common+0x26>
 8007282:	3301      	adds	r3, #1
 8007284:	6033      	str	r3, [r6, #0]
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	0699      	lsls	r1, r3, #26
 800728a:	bf42      	ittt	mi
 800728c:	6833      	ldrmi	r3, [r6, #0]
 800728e:	3302      	addmi	r3, #2
 8007290:	6033      	strmi	r3, [r6, #0]
 8007292:	6825      	ldr	r5, [r4, #0]
 8007294:	f015 0506 	ands.w	r5, r5, #6
 8007298:	d106      	bne.n	80072a8 <_printf_common+0x48>
 800729a:	f104 0a19 	add.w	sl, r4, #25
 800729e:	68e3      	ldr	r3, [r4, #12]
 80072a0:	6832      	ldr	r2, [r6, #0]
 80072a2:	1a9b      	subs	r3, r3, r2
 80072a4:	42ab      	cmp	r3, r5
 80072a6:	dc26      	bgt.n	80072f6 <_printf_common+0x96>
 80072a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072ac:	1e13      	subs	r3, r2, #0
 80072ae:	6822      	ldr	r2, [r4, #0]
 80072b0:	bf18      	it	ne
 80072b2:	2301      	movne	r3, #1
 80072b4:	0692      	lsls	r2, r2, #26
 80072b6:	d42b      	bmi.n	8007310 <_printf_common+0xb0>
 80072b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072bc:	4649      	mov	r1, r9
 80072be:	4638      	mov	r0, r7
 80072c0:	47c0      	blx	r8
 80072c2:	3001      	adds	r0, #1
 80072c4:	d01e      	beq.n	8007304 <_printf_common+0xa4>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	68e5      	ldr	r5, [r4, #12]
 80072ca:	6832      	ldr	r2, [r6, #0]
 80072cc:	f003 0306 	and.w	r3, r3, #6
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	bf08      	it	eq
 80072d4:	1aad      	subeq	r5, r5, r2
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	6922      	ldr	r2, [r4, #16]
 80072da:	bf0c      	ite	eq
 80072dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072e0:	2500      	movne	r5, #0
 80072e2:	4293      	cmp	r3, r2
 80072e4:	bfc4      	itt	gt
 80072e6:	1a9b      	subgt	r3, r3, r2
 80072e8:	18ed      	addgt	r5, r5, r3
 80072ea:	2600      	movs	r6, #0
 80072ec:	341a      	adds	r4, #26
 80072ee:	42b5      	cmp	r5, r6
 80072f0:	d11a      	bne.n	8007328 <_printf_common+0xc8>
 80072f2:	2000      	movs	r0, #0
 80072f4:	e008      	b.n	8007308 <_printf_common+0xa8>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4652      	mov	r2, sl
 80072fa:	4649      	mov	r1, r9
 80072fc:	4638      	mov	r0, r7
 80072fe:	47c0      	blx	r8
 8007300:	3001      	adds	r0, #1
 8007302:	d103      	bne.n	800730c <_printf_common+0xac>
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730c:	3501      	adds	r5, #1
 800730e:	e7c6      	b.n	800729e <_printf_common+0x3e>
 8007310:	18e1      	adds	r1, r4, r3
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	2030      	movs	r0, #48	; 0x30
 8007316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800731a:	4422      	add	r2, r4
 800731c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007324:	3302      	adds	r3, #2
 8007326:	e7c7      	b.n	80072b8 <_printf_common+0x58>
 8007328:	2301      	movs	r3, #1
 800732a:	4622      	mov	r2, r4
 800732c:	4649      	mov	r1, r9
 800732e:	4638      	mov	r0, r7
 8007330:	47c0      	blx	r8
 8007332:	3001      	adds	r0, #1
 8007334:	d0e6      	beq.n	8007304 <_printf_common+0xa4>
 8007336:	3601      	adds	r6, #1
 8007338:	e7d9      	b.n	80072ee <_printf_common+0x8e>
	...

0800733c <_printf_i>:
 800733c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	7e0f      	ldrb	r7, [r1, #24]
 8007342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007344:	2f78      	cmp	r7, #120	; 0x78
 8007346:	4691      	mov	r9, r2
 8007348:	4680      	mov	r8, r0
 800734a:	460c      	mov	r4, r1
 800734c:	469a      	mov	sl, r3
 800734e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007352:	d807      	bhi.n	8007364 <_printf_i+0x28>
 8007354:	2f62      	cmp	r7, #98	; 0x62
 8007356:	d80a      	bhi.n	800736e <_printf_i+0x32>
 8007358:	2f00      	cmp	r7, #0
 800735a:	f000 80d8 	beq.w	800750e <_printf_i+0x1d2>
 800735e:	2f58      	cmp	r7, #88	; 0x58
 8007360:	f000 80a3 	beq.w	80074aa <_printf_i+0x16e>
 8007364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800736c:	e03a      	b.n	80073e4 <_printf_i+0xa8>
 800736e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007372:	2b15      	cmp	r3, #21
 8007374:	d8f6      	bhi.n	8007364 <_printf_i+0x28>
 8007376:	a101      	add	r1, pc, #4	; (adr r1, 800737c <_printf_i+0x40>)
 8007378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800737c:	080073d5 	.word	0x080073d5
 8007380:	080073e9 	.word	0x080073e9
 8007384:	08007365 	.word	0x08007365
 8007388:	08007365 	.word	0x08007365
 800738c:	08007365 	.word	0x08007365
 8007390:	08007365 	.word	0x08007365
 8007394:	080073e9 	.word	0x080073e9
 8007398:	08007365 	.word	0x08007365
 800739c:	08007365 	.word	0x08007365
 80073a0:	08007365 	.word	0x08007365
 80073a4:	08007365 	.word	0x08007365
 80073a8:	080074f5 	.word	0x080074f5
 80073ac:	08007419 	.word	0x08007419
 80073b0:	080074d7 	.word	0x080074d7
 80073b4:	08007365 	.word	0x08007365
 80073b8:	08007365 	.word	0x08007365
 80073bc:	08007517 	.word	0x08007517
 80073c0:	08007365 	.word	0x08007365
 80073c4:	08007419 	.word	0x08007419
 80073c8:	08007365 	.word	0x08007365
 80073cc:	08007365 	.word	0x08007365
 80073d0:	080074df 	.word	0x080074df
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	1d1a      	adds	r2, r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	602a      	str	r2, [r5, #0]
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0a3      	b.n	8007530 <_printf_i+0x1f4>
 80073e8:	6820      	ldr	r0, [r4, #0]
 80073ea:	6829      	ldr	r1, [r5, #0]
 80073ec:	0606      	lsls	r6, r0, #24
 80073ee:	f101 0304 	add.w	r3, r1, #4
 80073f2:	d50a      	bpl.n	800740a <_printf_i+0xce>
 80073f4:	680e      	ldr	r6, [r1, #0]
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	2e00      	cmp	r6, #0
 80073fa:	da03      	bge.n	8007404 <_printf_i+0xc8>
 80073fc:	232d      	movs	r3, #45	; 0x2d
 80073fe:	4276      	negs	r6, r6
 8007400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007404:	485e      	ldr	r0, [pc, #376]	; (8007580 <_printf_i+0x244>)
 8007406:	230a      	movs	r3, #10
 8007408:	e019      	b.n	800743e <_printf_i+0x102>
 800740a:	680e      	ldr	r6, [r1, #0]
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007412:	bf18      	it	ne
 8007414:	b236      	sxthne	r6, r6
 8007416:	e7ef      	b.n	80073f8 <_printf_i+0xbc>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	1d19      	adds	r1, r3, #4
 800741e:	6029      	str	r1, [r5, #0]
 8007420:	0601      	lsls	r1, r0, #24
 8007422:	d501      	bpl.n	8007428 <_printf_i+0xec>
 8007424:	681e      	ldr	r6, [r3, #0]
 8007426:	e002      	b.n	800742e <_printf_i+0xf2>
 8007428:	0646      	lsls	r6, r0, #25
 800742a:	d5fb      	bpl.n	8007424 <_printf_i+0xe8>
 800742c:	881e      	ldrh	r6, [r3, #0]
 800742e:	4854      	ldr	r0, [pc, #336]	; (8007580 <_printf_i+0x244>)
 8007430:	2f6f      	cmp	r7, #111	; 0x6f
 8007432:	bf0c      	ite	eq
 8007434:	2308      	moveq	r3, #8
 8007436:	230a      	movne	r3, #10
 8007438:	2100      	movs	r1, #0
 800743a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800743e:	6865      	ldr	r5, [r4, #4]
 8007440:	60a5      	str	r5, [r4, #8]
 8007442:	2d00      	cmp	r5, #0
 8007444:	bfa2      	ittt	ge
 8007446:	6821      	ldrge	r1, [r4, #0]
 8007448:	f021 0104 	bicge.w	r1, r1, #4
 800744c:	6021      	strge	r1, [r4, #0]
 800744e:	b90e      	cbnz	r6, 8007454 <_printf_i+0x118>
 8007450:	2d00      	cmp	r5, #0
 8007452:	d04d      	beq.n	80074f0 <_printf_i+0x1b4>
 8007454:	4615      	mov	r5, r2
 8007456:	fbb6 f1f3 	udiv	r1, r6, r3
 800745a:	fb03 6711 	mls	r7, r3, r1, r6
 800745e:	5dc7      	ldrb	r7, [r0, r7]
 8007460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007464:	4637      	mov	r7, r6
 8007466:	42bb      	cmp	r3, r7
 8007468:	460e      	mov	r6, r1
 800746a:	d9f4      	bls.n	8007456 <_printf_i+0x11a>
 800746c:	2b08      	cmp	r3, #8
 800746e:	d10b      	bne.n	8007488 <_printf_i+0x14c>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	07de      	lsls	r6, r3, #31
 8007474:	d508      	bpl.n	8007488 <_printf_i+0x14c>
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	6861      	ldr	r1, [r4, #4]
 800747a:	4299      	cmp	r1, r3
 800747c:	bfde      	ittt	le
 800747e:	2330      	movle	r3, #48	; 0x30
 8007480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007488:	1b52      	subs	r2, r2, r5
 800748a:	6122      	str	r2, [r4, #16]
 800748c:	f8cd a000 	str.w	sl, [sp]
 8007490:	464b      	mov	r3, r9
 8007492:	aa03      	add	r2, sp, #12
 8007494:	4621      	mov	r1, r4
 8007496:	4640      	mov	r0, r8
 8007498:	f7ff fee2 	bl	8007260 <_printf_common>
 800749c:	3001      	adds	r0, #1
 800749e:	d14c      	bne.n	800753a <_printf_i+0x1fe>
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	b004      	add	sp, #16
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	4835      	ldr	r0, [pc, #212]	; (8007580 <_printf_i+0x244>)
 80074ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074b0:	6829      	ldr	r1, [r5, #0]
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80074b8:	6029      	str	r1, [r5, #0]
 80074ba:	061d      	lsls	r5, r3, #24
 80074bc:	d514      	bpl.n	80074e8 <_printf_i+0x1ac>
 80074be:	07df      	lsls	r7, r3, #31
 80074c0:	bf44      	itt	mi
 80074c2:	f043 0320 	orrmi.w	r3, r3, #32
 80074c6:	6023      	strmi	r3, [r4, #0]
 80074c8:	b91e      	cbnz	r6, 80074d2 <_printf_i+0x196>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f023 0320 	bic.w	r3, r3, #32
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	2310      	movs	r3, #16
 80074d4:	e7b0      	b.n	8007438 <_printf_i+0xfc>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	f043 0320 	orr.w	r3, r3, #32
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	2378      	movs	r3, #120	; 0x78
 80074e0:	4828      	ldr	r0, [pc, #160]	; (8007584 <_printf_i+0x248>)
 80074e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074e6:	e7e3      	b.n	80074b0 <_printf_i+0x174>
 80074e8:	0659      	lsls	r1, r3, #25
 80074ea:	bf48      	it	mi
 80074ec:	b2b6      	uxthmi	r6, r6
 80074ee:	e7e6      	b.n	80074be <_printf_i+0x182>
 80074f0:	4615      	mov	r5, r2
 80074f2:	e7bb      	b.n	800746c <_printf_i+0x130>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	6826      	ldr	r6, [r4, #0]
 80074f8:	6961      	ldr	r1, [r4, #20]
 80074fa:	1d18      	adds	r0, r3, #4
 80074fc:	6028      	str	r0, [r5, #0]
 80074fe:	0635      	lsls	r5, r6, #24
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	d501      	bpl.n	8007508 <_printf_i+0x1cc>
 8007504:	6019      	str	r1, [r3, #0]
 8007506:	e002      	b.n	800750e <_printf_i+0x1d2>
 8007508:	0670      	lsls	r0, r6, #25
 800750a:	d5fb      	bpl.n	8007504 <_printf_i+0x1c8>
 800750c:	8019      	strh	r1, [r3, #0]
 800750e:	2300      	movs	r3, #0
 8007510:	6123      	str	r3, [r4, #16]
 8007512:	4615      	mov	r5, r2
 8007514:	e7ba      	b.n	800748c <_printf_i+0x150>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	1d1a      	adds	r2, r3, #4
 800751a:	602a      	str	r2, [r5, #0]
 800751c:	681d      	ldr	r5, [r3, #0]
 800751e:	6862      	ldr	r2, [r4, #4]
 8007520:	2100      	movs	r1, #0
 8007522:	4628      	mov	r0, r5
 8007524:	f7f8 fe6c 	bl	8000200 <memchr>
 8007528:	b108      	cbz	r0, 800752e <_printf_i+0x1f2>
 800752a:	1b40      	subs	r0, r0, r5
 800752c:	6060      	str	r0, [r4, #4]
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	6123      	str	r3, [r4, #16]
 8007532:	2300      	movs	r3, #0
 8007534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007538:	e7a8      	b.n	800748c <_printf_i+0x150>
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	462a      	mov	r2, r5
 800753e:	4649      	mov	r1, r9
 8007540:	4640      	mov	r0, r8
 8007542:	47d0      	blx	sl
 8007544:	3001      	adds	r0, #1
 8007546:	d0ab      	beq.n	80074a0 <_printf_i+0x164>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	079b      	lsls	r3, r3, #30
 800754c:	d413      	bmi.n	8007576 <_printf_i+0x23a>
 800754e:	68e0      	ldr	r0, [r4, #12]
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	4298      	cmp	r0, r3
 8007554:	bfb8      	it	lt
 8007556:	4618      	movlt	r0, r3
 8007558:	e7a4      	b.n	80074a4 <_printf_i+0x168>
 800755a:	2301      	movs	r3, #1
 800755c:	4632      	mov	r2, r6
 800755e:	4649      	mov	r1, r9
 8007560:	4640      	mov	r0, r8
 8007562:	47d0      	blx	sl
 8007564:	3001      	adds	r0, #1
 8007566:	d09b      	beq.n	80074a0 <_printf_i+0x164>
 8007568:	3501      	adds	r5, #1
 800756a:	68e3      	ldr	r3, [r4, #12]
 800756c:	9903      	ldr	r1, [sp, #12]
 800756e:	1a5b      	subs	r3, r3, r1
 8007570:	42ab      	cmp	r3, r5
 8007572:	dcf2      	bgt.n	800755a <_printf_i+0x21e>
 8007574:	e7eb      	b.n	800754e <_printf_i+0x212>
 8007576:	2500      	movs	r5, #0
 8007578:	f104 0619 	add.w	r6, r4, #25
 800757c:	e7f5      	b.n	800756a <_printf_i+0x22e>
 800757e:	bf00      	nop
 8007580:	08009916 	.word	0x08009916
 8007584:	08009927 	.word	0x08009927

08007588 <quorem>:
 8007588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	6903      	ldr	r3, [r0, #16]
 800758e:	690c      	ldr	r4, [r1, #16]
 8007590:	42a3      	cmp	r3, r4
 8007592:	4607      	mov	r7, r0
 8007594:	f2c0 8081 	blt.w	800769a <quorem+0x112>
 8007598:	3c01      	subs	r4, #1
 800759a:	f101 0814 	add.w	r8, r1, #20
 800759e:	f100 0514 	add.w	r5, r0, #20
 80075a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075b0:	3301      	adds	r3, #1
 80075b2:	429a      	cmp	r2, r3
 80075b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80075c0:	d331      	bcc.n	8007626 <quorem+0x9e>
 80075c2:	f04f 0e00 	mov.w	lr, #0
 80075c6:	4640      	mov	r0, r8
 80075c8:	46ac      	mov	ip, r5
 80075ca:	46f2      	mov	sl, lr
 80075cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80075d0:	b293      	uxth	r3, r2
 80075d2:	fb06 e303 	mla	r3, r6, r3, lr
 80075d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075da:	b29b      	uxth	r3, r3
 80075dc:	ebaa 0303 	sub.w	r3, sl, r3
 80075e0:	f8dc a000 	ldr.w	sl, [ip]
 80075e4:	0c12      	lsrs	r2, r2, #16
 80075e6:	fa13 f38a 	uxtah	r3, r3, sl
 80075ea:	fb06 e202 	mla	r2, r6, r2, lr
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	9b00      	ldr	r3, [sp, #0]
 80075f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075f6:	b292      	uxth	r2, r2
 80075f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007600:	f8bd 3000 	ldrh.w	r3, [sp]
 8007604:	4581      	cmp	r9, r0
 8007606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800760a:	f84c 3b04 	str.w	r3, [ip], #4
 800760e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007612:	d2db      	bcs.n	80075cc <quorem+0x44>
 8007614:	f855 300b 	ldr.w	r3, [r5, fp]
 8007618:	b92b      	cbnz	r3, 8007626 <quorem+0x9e>
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	3b04      	subs	r3, #4
 800761e:	429d      	cmp	r5, r3
 8007620:	461a      	mov	r2, r3
 8007622:	d32e      	bcc.n	8007682 <quorem+0xfa>
 8007624:	613c      	str	r4, [r7, #16]
 8007626:	4638      	mov	r0, r7
 8007628:	f001 f8c4 	bl	80087b4 <__mcmp>
 800762c:	2800      	cmp	r0, #0
 800762e:	db24      	blt.n	800767a <quorem+0xf2>
 8007630:	3601      	adds	r6, #1
 8007632:	4628      	mov	r0, r5
 8007634:	f04f 0c00 	mov.w	ip, #0
 8007638:	f858 2b04 	ldr.w	r2, [r8], #4
 800763c:	f8d0 e000 	ldr.w	lr, [r0]
 8007640:	b293      	uxth	r3, r2
 8007642:	ebac 0303 	sub.w	r3, ip, r3
 8007646:	0c12      	lsrs	r2, r2, #16
 8007648:	fa13 f38e 	uxtah	r3, r3, lr
 800764c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800765a:	45c1      	cmp	r9, r8
 800765c:	f840 3b04 	str.w	r3, [r0], #4
 8007660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007664:	d2e8      	bcs.n	8007638 <quorem+0xb0>
 8007666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800766a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800766e:	b922      	cbnz	r2, 800767a <quorem+0xf2>
 8007670:	3b04      	subs	r3, #4
 8007672:	429d      	cmp	r5, r3
 8007674:	461a      	mov	r2, r3
 8007676:	d30a      	bcc.n	800768e <quorem+0x106>
 8007678:	613c      	str	r4, [r7, #16]
 800767a:	4630      	mov	r0, r6
 800767c:	b003      	add	sp, #12
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	3b04      	subs	r3, #4
 8007686:	2a00      	cmp	r2, #0
 8007688:	d1cc      	bne.n	8007624 <quorem+0x9c>
 800768a:	3c01      	subs	r4, #1
 800768c:	e7c7      	b.n	800761e <quorem+0x96>
 800768e:	6812      	ldr	r2, [r2, #0]
 8007690:	3b04      	subs	r3, #4
 8007692:	2a00      	cmp	r2, #0
 8007694:	d1f0      	bne.n	8007678 <quorem+0xf0>
 8007696:	3c01      	subs	r4, #1
 8007698:	e7eb      	b.n	8007672 <quorem+0xea>
 800769a:	2000      	movs	r0, #0
 800769c:	e7ee      	b.n	800767c <quorem+0xf4>
	...

080076a0 <_dtoa_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	ed2d 8b04 	vpush	{d8-d9}
 80076a8:	ec57 6b10 	vmov	r6, r7, d0
 80076ac:	b093      	sub	sp, #76	; 0x4c
 80076ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076b4:	9106      	str	r1, [sp, #24]
 80076b6:	ee10 aa10 	vmov	sl, s0
 80076ba:	4604      	mov	r4, r0
 80076bc:	9209      	str	r2, [sp, #36]	; 0x24
 80076be:	930c      	str	r3, [sp, #48]	; 0x30
 80076c0:	46bb      	mov	fp, r7
 80076c2:	b975      	cbnz	r5, 80076e2 <_dtoa_r+0x42>
 80076c4:	2010      	movs	r0, #16
 80076c6:	f000 fddd 	bl	8008284 <malloc>
 80076ca:	4602      	mov	r2, r0
 80076cc:	6260      	str	r0, [r4, #36]	; 0x24
 80076ce:	b920      	cbnz	r0, 80076da <_dtoa_r+0x3a>
 80076d0:	4ba7      	ldr	r3, [pc, #668]	; (8007970 <_dtoa_r+0x2d0>)
 80076d2:	21ea      	movs	r1, #234	; 0xea
 80076d4:	48a7      	ldr	r0, [pc, #668]	; (8007974 <_dtoa_r+0x2d4>)
 80076d6:	f001 fa75 	bl	8008bc4 <__assert_func>
 80076da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076de:	6005      	str	r5, [r0, #0]
 80076e0:	60c5      	str	r5, [r0, #12]
 80076e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e4:	6819      	ldr	r1, [r3, #0]
 80076e6:	b151      	cbz	r1, 80076fe <_dtoa_r+0x5e>
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	604a      	str	r2, [r1, #4]
 80076ec:	2301      	movs	r3, #1
 80076ee:	4093      	lsls	r3, r2
 80076f0:	608b      	str	r3, [r1, #8]
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 fe1c 	bl	8008330 <_Bfree>
 80076f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	1e3b      	subs	r3, r7, #0
 8007700:	bfaa      	itet	ge
 8007702:	2300      	movge	r3, #0
 8007704:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007708:	f8c8 3000 	strge.w	r3, [r8]
 800770c:	4b9a      	ldr	r3, [pc, #616]	; (8007978 <_dtoa_r+0x2d8>)
 800770e:	bfbc      	itt	lt
 8007710:	2201      	movlt	r2, #1
 8007712:	f8c8 2000 	strlt.w	r2, [r8]
 8007716:	ea33 030b 	bics.w	r3, r3, fp
 800771a:	d11b      	bne.n	8007754 <_dtoa_r+0xb4>
 800771c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800771e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007728:	4333      	orrs	r3, r6
 800772a:	f000 8592 	beq.w	8008252 <_dtoa_r+0xbb2>
 800772e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007730:	b963      	cbnz	r3, 800774c <_dtoa_r+0xac>
 8007732:	4b92      	ldr	r3, [pc, #584]	; (800797c <_dtoa_r+0x2dc>)
 8007734:	e022      	b.n	800777c <_dtoa_r+0xdc>
 8007736:	4b92      	ldr	r3, [pc, #584]	; (8007980 <_dtoa_r+0x2e0>)
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	3308      	adds	r3, #8
 800773c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	9801      	ldr	r0, [sp, #4]
 8007742:	b013      	add	sp, #76	; 0x4c
 8007744:	ecbd 8b04 	vpop	{d8-d9}
 8007748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774c:	4b8b      	ldr	r3, [pc, #556]	; (800797c <_dtoa_r+0x2dc>)
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	3303      	adds	r3, #3
 8007752:	e7f3      	b.n	800773c <_dtoa_r+0x9c>
 8007754:	2200      	movs	r2, #0
 8007756:	2300      	movs	r3, #0
 8007758:	4650      	mov	r0, sl
 800775a:	4659      	mov	r1, fp
 800775c:	f7f9 f9c4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007760:	ec4b ab19 	vmov	d9, sl, fp
 8007764:	4680      	mov	r8, r0
 8007766:	b158      	cbz	r0, 8007780 <_dtoa_r+0xe0>
 8007768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800776a:	2301      	movs	r3, #1
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 856b 	beq.w	800824c <_dtoa_r+0xbac>
 8007776:	4883      	ldr	r0, [pc, #524]	; (8007984 <_dtoa_r+0x2e4>)
 8007778:	6018      	str	r0, [r3, #0]
 800777a:	1e43      	subs	r3, r0, #1
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	e7df      	b.n	8007740 <_dtoa_r+0xa0>
 8007780:	ec4b ab10 	vmov	d0, sl, fp
 8007784:	aa10      	add	r2, sp, #64	; 0x40
 8007786:	a911      	add	r1, sp, #68	; 0x44
 8007788:	4620      	mov	r0, r4
 800778a:	f001 f8b9 	bl	8008900 <__d2b>
 800778e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007792:	ee08 0a10 	vmov	s16, r0
 8007796:	2d00      	cmp	r5, #0
 8007798:	f000 8084 	beq.w	80078a4 <_dtoa_r+0x204>
 800779c:	ee19 3a90 	vmov	r3, s19
 80077a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077a8:	4656      	mov	r6, sl
 80077aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077b6:	4b74      	ldr	r3, [pc, #464]	; (8007988 <_dtoa_r+0x2e8>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	4630      	mov	r0, r6
 80077bc:	4639      	mov	r1, r7
 80077be:	f7f8 fd73 	bl	80002a8 <__aeabi_dsub>
 80077c2:	a365      	add	r3, pc, #404	; (adr r3, 8007958 <_dtoa_r+0x2b8>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f7f8 ff26 	bl	8000618 <__aeabi_dmul>
 80077cc:	a364      	add	r3, pc, #400	; (adr r3, 8007960 <_dtoa_r+0x2c0>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd6b 	bl	80002ac <__adddf3>
 80077d6:	4606      	mov	r6, r0
 80077d8:	4628      	mov	r0, r5
 80077da:	460f      	mov	r7, r1
 80077dc:	f7f8 feb2 	bl	8000544 <__aeabi_i2d>
 80077e0:	a361      	add	r3, pc, #388	; (adr r3, 8007968 <_dtoa_r+0x2c8>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f8 ff17 	bl	8000618 <__aeabi_dmul>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4630      	mov	r0, r6
 80077f0:	4639      	mov	r1, r7
 80077f2:	f7f8 fd5b 	bl	80002ac <__adddf3>
 80077f6:	4606      	mov	r6, r0
 80077f8:	460f      	mov	r7, r1
 80077fa:	f7f9 f9bd 	bl	8000b78 <__aeabi_d2iz>
 80077fe:	2200      	movs	r2, #0
 8007800:	9000      	str	r0, [sp, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f7f9 f978 	bl	8000afc <__aeabi_dcmplt>
 800780c:	b150      	cbz	r0, 8007824 <_dtoa_r+0x184>
 800780e:	9800      	ldr	r0, [sp, #0]
 8007810:	f7f8 fe98 	bl	8000544 <__aeabi_i2d>
 8007814:	4632      	mov	r2, r6
 8007816:	463b      	mov	r3, r7
 8007818:	f7f9 f966 	bl	8000ae8 <__aeabi_dcmpeq>
 800781c:	b910      	cbnz	r0, 8007824 <_dtoa_r+0x184>
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	3b01      	subs	r3, #1
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	9b00      	ldr	r3, [sp, #0]
 8007826:	2b16      	cmp	r3, #22
 8007828:	d85a      	bhi.n	80078e0 <_dtoa_r+0x240>
 800782a:	9a00      	ldr	r2, [sp, #0]
 800782c:	4b57      	ldr	r3, [pc, #348]	; (800798c <_dtoa_r+0x2ec>)
 800782e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	ec51 0b19 	vmov	r0, r1, d9
 800783a:	f7f9 f95f 	bl	8000afc <__aeabi_dcmplt>
 800783e:	2800      	cmp	r0, #0
 8007840:	d050      	beq.n	80078e4 <_dtoa_r+0x244>
 8007842:	9b00      	ldr	r3, [sp, #0]
 8007844:	3b01      	subs	r3, #1
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2300      	movs	r3, #0
 800784a:	930b      	str	r3, [sp, #44]	; 0x2c
 800784c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800784e:	1b5d      	subs	r5, r3, r5
 8007850:	1e6b      	subs	r3, r5, #1
 8007852:	9305      	str	r3, [sp, #20]
 8007854:	bf45      	ittet	mi
 8007856:	f1c5 0301 	rsbmi	r3, r5, #1
 800785a:	9304      	strmi	r3, [sp, #16]
 800785c:	2300      	movpl	r3, #0
 800785e:	2300      	movmi	r3, #0
 8007860:	bf4c      	ite	mi
 8007862:	9305      	strmi	r3, [sp, #20]
 8007864:	9304      	strpl	r3, [sp, #16]
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	db3d      	blt.n	80078e8 <_dtoa_r+0x248>
 800786c:	9b05      	ldr	r3, [sp, #20]
 800786e:	9a00      	ldr	r2, [sp, #0]
 8007870:	920a      	str	r2, [sp, #40]	; 0x28
 8007872:	4413      	add	r3, r2
 8007874:	9305      	str	r3, [sp, #20]
 8007876:	2300      	movs	r3, #0
 8007878:	9307      	str	r3, [sp, #28]
 800787a:	9b06      	ldr	r3, [sp, #24]
 800787c:	2b09      	cmp	r3, #9
 800787e:	f200 8089 	bhi.w	8007994 <_dtoa_r+0x2f4>
 8007882:	2b05      	cmp	r3, #5
 8007884:	bfc4      	itt	gt
 8007886:	3b04      	subgt	r3, #4
 8007888:	9306      	strgt	r3, [sp, #24]
 800788a:	9b06      	ldr	r3, [sp, #24]
 800788c:	f1a3 0302 	sub.w	r3, r3, #2
 8007890:	bfcc      	ite	gt
 8007892:	2500      	movgt	r5, #0
 8007894:	2501      	movle	r5, #1
 8007896:	2b03      	cmp	r3, #3
 8007898:	f200 8087 	bhi.w	80079aa <_dtoa_r+0x30a>
 800789c:	e8df f003 	tbb	[pc, r3]
 80078a0:	59383a2d 	.word	0x59383a2d
 80078a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078a8:	441d      	add	r5, r3
 80078aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	bfc1      	itttt	gt
 80078b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80078be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078c2:	bfda      	itte	le
 80078c4:	f1c3 0320 	rsble	r3, r3, #32
 80078c8:	fa06 f003 	lslle.w	r0, r6, r3
 80078cc:	4318      	orrgt	r0, r3
 80078ce:	f7f8 fe29 	bl	8000524 <__aeabi_ui2d>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4606      	mov	r6, r0
 80078d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078da:	3d01      	subs	r5, #1
 80078dc:	930e      	str	r3, [sp, #56]	; 0x38
 80078de:	e76a      	b.n	80077b6 <_dtoa_r+0x116>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e7b2      	b.n	800784a <_dtoa_r+0x1aa>
 80078e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80078e6:	e7b1      	b.n	800784c <_dtoa_r+0x1ac>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	9a00      	ldr	r2, [sp, #0]
 80078ec:	1a9b      	subs	r3, r3, r2
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	4253      	negs	r3, r2
 80078f2:	9307      	str	r3, [sp, #28]
 80078f4:	2300      	movs	r3, #0
 80078f6:	930a      	str	r3, [sp, #40]	; 0x28
 80078f8:	e7bf      	b.n	800787a <_dtoa_r+0x1da>
 80078fa:	2300      	movs	r3, #0
 80078fc:	9308      	str	r3, [sp, #32]
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	dc55      	bgt.n	80079b0 <_dtoa_r+0x310>
 8007904:	2301      	movs	r3, #1
 8007906:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800790a:	461a      	mov	r2, r3
 800790c:	9209      	str	r2, [sp, #36]	; 0x24
 800790e:	e00c      	b.n	800792a <_dtoa_r+0x28a>
 8007910:	2301      	movs	r3, #1
 8007912:	e7f3      	b.n	80078fc <_dtoa_r+0x25c>
 8007914:	2300      	movs	r3, #0
 8007916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007918:	9308      	str	r3, [sp, #32]
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	4413      	add	r3, r2
 800791e:	9302      	str	r3, [sp, #8]
 8007920:	3301      	adds	r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	9303      	str	r3, [sp, #12]
 8007926:	bfb8      	it	lt
 8007928:	2301      	movlt	r3, #1
 800792a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800792c:	2200      	movs	r2, #0
 800792e:	6042      	str	r2, [r0, #4]
 8007930:	2204      	movs	r2, #4
 8007932:	f102 0614 	add.w	r6, r2, #20
 8007936:	429e      	cmp	r6, r3
 8007938:	6841      	ldr	r1, [r0, #4]
 800793a:	d93d      	bls.n	80079b8 <_dtoa_r+0x318>
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fcb7 	bl	80082b0 <_Balloc>
 8007942:	9001      	str	r0, [sp, #4]
 8007944:	2800      	cmp	r0, #0
 8007946:	d13b      	bne.n	80079c0 <_dtoa_r+0x320>
 8007948:	4b11      	ldr	r3, [pc, #68]	; (8007990 <_dtoa_r+0x2f0>)
 800794a:	4602      	mov	r2, r0
 800794c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007950:	e6c0      	b.n	80076d4 <_dtoa_r+0x34>
 8007952:	2301      	movs	r3, #1
 8007954:	e7df      	b.n	8007916 <_dtoa_r+0x276>
 8007956:	bf00      	nop
 8007958:	636f4361 	.word	0x636f4361
 800795c:	3fd287a7 	.word	0x3fd287a7
 8007960:	8b60c8b3 	.word	0x8b60c8b3
 8007964:	3fc68a28 	.word	0x3fc68a28
 8007968:	509f79fb 	.word	0x509f79fb
 800796c:	3fd34413 	.word	0x3fd34413
 8007970:	08009945 	.word	0x08009945
 8007974:	0800995c 	.word	0x0800995c
 8007978:	7ff00000 	.word	0x7ff00000
 800797c:	08009941 	.word	0x08009941
 8007980:	08009938 	.word	0x08009938
 8007984:	08009915 	.word	0x08009915
 8007988:	3ff80000 	.word	0x3ff80000
 800798c:	08009a50 	.word	0x08009a50
 8007990:	080099b7 	.word	0x080099b7
 8007994:	2501      	movs	r5, #1
 8007996:	2300      	movs	r3, #0
 8007998:	9306      	str	r3, [sp, #24]
 800799a:	9508      	str	r5, [sp, #32]
 800799c:	f04f 33ff 	mov.w	r3, #4294967295
 80079a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079a4:	2200      	movs	r2, #0
 80079a6:	2312      	movs	r3, #18
 80079a8:	e7b0      	b.n	800790c <_dtoa_r+0x26c>
 80079aa:	2301      	movs	r3, #1
 80079ac:	9308      	str	r3, [sp, #32]
 80079ae:	e7f5      	b.n	800799c <_dtoa_r+0x2fc>
 80079b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079b6:	e7b8      	b.n	800792a <_dtoa_r+0x28a>
 80079b8:	3101      	adds	r1, #1
 80079ba:	6041      	str	r1, [r0, #4]
 80079bc:	0052      	lsls	r2, r2, #1
 80079be:	e7b8      	b.n	8007932 <_dtoa_r+0x292>
 80079c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c2:	9a01      	ldr	r2, [sp, #4]
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	9b03      	ldr	r3, [sp, #12]
 80079c8:	2b0e      	cmp	r3, #14
 80079ca:	f200 809d 	bhi.w	8007b08 <_dtoa_r+0x468>
 80079ce:	2d00      	cmp	r5, #0
 80079d0:	f000 809a 	beq.w	8007b08 <_dtoa_r+0x468>
 80079d4:	9b00      	ldr	r3, [sp, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dd32      	ble.n	8007a40 <_dtoa_r+0x3a0>
 80079da:	4ab7      	ldr	r2, [pc, #732]	; (8007cb8 <_dtoa_r+0x618>)
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079e8:	9b00      	ldr	r3, [sp, #0]
 80079ea:	05d8      	lsls	r0, r3, #23
 80079ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80079f0:	d516      	bpl.n	8007a20 <_dtoa_r+0x380>
 80079f2:	4bb2      	ldr	r3, [pc, #712]	; (8007cbc <_dtoa_r+0x61c>)
 80079f4:	ec51 0b19 	vmov	r0, r1, d9
 80079f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079fc:	f7f8 ff36 	bl	800086c <__aeabi_ddiv>
 8007a00:	f007 070f 	and.w	r7, r7, #15
 8007a04:	4682      	mov	sl, r0
 8007a06:	468b      	mov	fp, r1
 8007a08:	2503      	movs	r5, #3
 8007a0a:	4eac      	ldr	r6, [pc, #688]	; (8007cbc <_dtoa_r+0x61c>)
 8007a0c:	b957      	cbnz	r7, 8007a24 <_dtoa_r+0x384>
 8007a0e:	4642      	mov	r2, r8
 8007a10:	464b      	mov	r3, r9
 8007a12:	4650      	mov	r0, sl
 8007a14:	4659      	mov	r1, fp
 8007a16:	f7f8 ff29 	bl	800086c <__aeabi_ddiv>
 8007a1a:	4682      	mov	sl, r0
 8007a1c:	468b      	mov	fp, r1
 8007a1e:	e028      	b.n	8007a72 <_dtoa_r+0x3d2>
 8007a20:	2502      	movs	r5, #2
 8007a22:	e7f2      	b.n	8007a0a <_dtoa_r+0x36a>
 8007a24:	07f9      	lsls	r1, r7, #31
 8007a26:	d508      	bpl.n	8007a3a <_dtoa_r+0x39a>
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a30:	f7f8 fdf2 	bl	8000618 <__aeabi_dmul>
 8007a34:	3501      	adds	r5, #1
 8007a36:	4680      	mov	r8, r0
 8007a38:	4689      	mov	r9, r1
 8007a3a:	107f      	asrs	r7, r7, #1
 8007a3c:	3608      	adds	r6, #8
 8007a3e:	e7e5      	b.n	8007a0c <_dtoa_r+0x36c>
 8007a40:	f000 809b 	beq.w	8007b7a <_dtoa_r+0x4da>
 8007a44:	9b00      	ldr	r3, [sp, #0]
 8007a46:	4f9d      	ldr	r7, [pc, #628]	; (8007cbc <_dtoa_r+0x61c>)
 8007a48:	425e      	negs	r6, r3
 8007a4a:	4b9b      	ldr	r3, [pc, #620]	; (8007cb8 <_dtoa_r+0x618>)
 8007a4c:	f006 020f 	and.w	r2, r6, #15
 8007a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	ec51 0b19 	vmov	r0, r1, d9
 8007a5c:	f7f8 fddc 	bl	8000618 <__aeabi_dmul>
 8007a60:	1136      	asrs	r6, r6, #4
 8007a62:	4682      	mov	sl, r0
 8007a64:	468b      	mov	fp, r1
 8007a66:	2300      	movs	r3, #0
 8007a68:	2502      	movs	r5, #2
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	d17a      	bne.n	8007b64 <_dtoa_r+0x4c4>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1d3      	bne.n	8007a1a <_dtoa_r+0x37a>
 8007a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8082 	beq.w	8007b7e <_dtoa_r+0x4de>
 8007a7a:	4b91      	ldr	r3, [pc, #580]	; (8007cc0 <_dtoa_r+0x620>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4650      	mov	r0, sl
 8007a80:	4659      	mov	r1, fp
 8007a82:	f7f9 f83b 	bl	8000afc <__aeabi_dcmplt>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d079      	beq.n	8007b7e <_dtoa_r+0x4de>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d076      	beq.n	8007b7e <_dtoa_r+0x4de>
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dd36      	ble.n	8007b04 <_dtoa_r+0x464>
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	4650      	mov	r0, sl
 8007a9a:	4659      	mov	r1, fp
 8007a9c:	1e5f      	subs	r7, r3, #1
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4b88      	ldr	r3, [pc, #544]	; (8007cc4 <_dtoa_r+0x624>)
 8007aa2:	f7f8 fdb9 	bl	8000618 <__aeabi_dmul>
 8007aa6:	9e02      	ldr	r6, [sp, #8]
 8007aa8:	4682      	mov	sl, r0
 8007aaa:	468b      	mov	fp, r1
 8007aac:	3501      	adds	r5, #1
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7f8 fd48 	bl	8000544 <__aeabi_i2d>
 8007ab4:	4652      	mov	r2, sl
 8007ab6:	465b      	mov	r3, fp
 8007ab8:	f7f8 fdae 	bl	8000618 <__aeabi_dmul>
 8007abc:	4b82      	ldr	r3, [pc, #520]	; (8007cc8 <_dtoa_r+0x628>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f7f8 fbf4 	bl	80002ac <__adddf3>
 8007ac4:	46d0      	mov	r8, sl
 8007ac6:	46d9      	mov	r9, fp
 8007ac8:	4682      	mov	sl, r0
 8007aca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	d158      	bne.n	8007b84 <_dtoa_r+0x4e4>
 8007ad2:	4b7e      	ldr	r3, [pc, #504]	; (8007ccc <_dtoa_r+0x62c>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	4649      	mov	r1, r9
 8007ada:	f7f8 fbe5 	bl	80002a8 <__aeabi_dsub>
 8007ade:	4652      	mov	r2, sl
 8007ae0:	465b      	mov	r3, fp
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	4689      	mov	r9, r1
 8007ae6:	f7f9 f827 	bl	8000b38 <__aeabi_dcmpgt>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	f040 8295 	bne.w	800801a <_dtoa_r+0x97a>
 8007af0:	4652      	mov	r2, sl
 8007af2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007af6:	4640      	mov	r0, r8
 8007af8:	4649      	mov	r1, r9
 8007afa:	f7f8 ffff 	bl	8000afc <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f040 8289 	bne.w	8008016 <_dtoa_r+0x976>
 8007b04:	ec5b ab19 	vmov	sl, fp, d9
 8007b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f2c0 8148 	blt.w	8007da0 <_dtoa_r+0x700>
 8007b10:	9a00      	ldr	r2, [sp, #0]
 8007b12:	2a0e      	cmp	r2, #14
 8007b14:	f300 8144 	bgt.w	8007da0 <_dtoa_r+0x700>
 8007b18:	4b67      	ldr	r3, [pc, #412]	; (8007cb8 <_dtoa_r+0x618>)
 8007b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f280 80d5 	bge.w	8007cd4 <_dtoa_r+0x634>
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f300 80d1 	bgt.w	8007cd4 <_dtoa_r+0x634>
 8007b32:	f040 826f 	bne.w	8008014 <_dtoa_r+0x974>
 8007b36:	4b65      	ldr	r3, [pc, #404]	; (8007ccc <_dtoa_r+0x62c>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	f7f8 fd6b 	bl	8000618 <__aeabi_dmul>
 8007b42:	4652      	mov	r2, sl
 8007b44:	465b      	mov	r3, fp
 8007b46:	f7f8 ffed 	bl	8000b24 <__aeabi_dcmpge>
 8007b4a:	9e03      	ldr	r6, [sp, #12]
 8007b4c:	4637      	mov	r7, r6
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f040 8245 	bne.w	8007fde <_dtoa_r+0x93e>
 8007b54:	9d01      	ldr	r5, [sp, #4]
 8007b56:	2331      	movs	r3, #49	; 0x31
 8007b58:	f805 3b01 	strb.w	r3, [r5], #1
 8007b5c:	9b00      	ldr	r3, [sp, #0]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	e240      	b.n	8007fe6 <_dtoa_r+0x946>
 8007b64:	07f2      	lsls	r2, r6, #31
 8007b66:	d505      	bpl.n	8007b74 <_dtoa_r+0x4d4>
 8007b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6c:	f7f8 fd54 	bl	8000618 <__aeabi_dmul>
 8007b70:	3501      	adds	r5, #1
 8007b72:	2301      	movs	r3, #1
 8007b74:	1076      	asrs	r6, r6, #1
 8007b76:	3708      	adds	r7, #8
 8007b78:	e777      	b.n	8007a6a <_dtoa_r+0x3ca>
 8007b7a:	2502      	movs	r5, #2
 8007b7c:	e779      	b.n	8007a72 <_dtoa_r+0x3d2>
 8007b7e:	9f00      	ldr	r7, [sp, #0]
 8007b80:	9e03      	ldr	r6, [sp, #12]
 8007b82:	e794      	b.n	8007aae <_dtoa_r+0x40e>
 8007b84:	9901      	ldr	r1, [sp, #4]
 8007b86:	4b4c      	ldr	r3, [pc, #304]	; (8007cb8 <_dtoa_r+0x618>)
 8007b88:	4431      	add	r1, r6
 8007b8a:	910d      	str	r1, [sp, #52]	; 0x34
 8007b8c:	9908      	ldr	r1, [sp, #32]
 8007b8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b96:	2900      	cmp	r1, #0
 8007b98:	d043      	beq.n	8007c22 <_dtoa_r+0x582>
 8007b9a:	494d      	ldr	r1, [pc, #308]	; (8007cd0 <_dtoa_r+0x630>)
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f7f8 fe65 	bl	800086c <__aeabi_ddiv>
 8007ba2:	4652      	mov	r2, sl
 8007ba4:	465b      	mov	r3, fp
 8007ba6:	f7f8 fb7f 	bl	80002a8 <__aeabi_dsub>
 8007baa:	9d01      	ldr	r5, [sp, #4]
 8007bac:	4682      	mov	sl, r0
 8007bae:	468b      	mov	fp, r1
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	f7f8 ffe0 	bl	8000b78 <__aeabi_d2iz>
 8007bb8:	4606      	mov	r6, r0
 8007bba:	f7f8 fcc3 	bl	8000544 <__aeabi_i2d>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	f7f8 fb6f 	bl	80002a8 <__aeabi_dsub>
 8007bca:	3630      	adds	r6, #48	; 0x30
 8007bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	465b      	mov	r3, fp
 8007bd4:	4680      	mov	r8, r0
 8007bd6:	4689      	mov	r9, r1
 8007bd8:	f7f8 ff90 	bl	8000afc <__aeabi_dcmplt>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d163      	bne.n	8007ca8 <_dtoa_r+0x608>
 8007be0:	4642      	mov	r2, r8
 8007be2:	464b      	mov	r3, r9
 8007be4:	4936      	ldr	r1, [pc, #216]	; (8007cc0 <_dtoa_r+0x620>)
 8007be6:	2000      	movs	r0, #0
 8007be8:	f7f8 fb5e 	bl	80002a8 <__aeabi_dsub>
 8007bec:	4652      	mov	r2, sl
 8007bee:	465b      	mov	r3, fp
 8007bf0:	f7f8 ff84 	bl	8000afc <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f040 80b5 	bne.w	8007d64 <_dtoa_r+0x6c4>
 8007bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bfc:	429d      	cmp	r5, r3
 8007bfe:	d081      	beq.n	8007b04 <_dtoa_r+0x464>
 8007c00:	4b30      	ldr	r3, [pc, #192]	; (8007cc4 <_dtoa_r+0x624>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	4650      	mov	r0, sl
 8007c06:	4659      	mov	r1, fp
 8007c08:	f7f8 fd06 	bl	8000618 <__aeabi_dmul>
 8007c0c:	4b2d      	ldr	r3, [pc, #180]	; (8007cc4 <_dtoa_r+0x624>)
 8007c0e:	4682      	mov	sl, r0
 8007c10:	468b      	mov	fp, r1
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	2200      	movs	r2, #0
 8007c18:	f7f8 fcfe 	bl	8000618 <__aeabi_dmul>
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	4689      	mov	r9, r1
 8007c20:	e7c6      	b.n	8007bb0 <_dtoa_r+0x510>
 8007c22:	4650      	mov	r0, sl
 8007c24:	4659      	mov	r1, fp
 8007c26:	f7f8 fcf7 	bl	8000618 <__aeabi_dmul>
 8007c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c2c:	9d01      	ldr	r5, [sp, #4]
 8007c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c30:	4682      	mov	sl, r0
 8007c32:	468b      	mov	fp, r1
 8007c34:	4649      	mov	r1, r9
 8007c36:	4640      	mov	r0, r8
 8007c38:	f7f8 ff9e 	bl	8000b78 <__aeabi_d2iz>
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	f7f8 fc81 	bl	8000544 <__aeabi_i2d>
 8007c42:	3630      	adds	r6, #48	; 0x30
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4640      	mov	r0, r8
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	f7f8 fb2c 	bl	80002a8 <__aeabi_dsub>
 8007c50:	f805 6b01 	strb.w	r6, [r5], #1
 8007c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c56:	429d      	cmp	r5, r3
 8007c58:	4680      	mov	r8, r0
 8007c5a:	4689      	mov	r9, r1
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	d124      	bne.n	8007cac <_dtoa_r+0x60c>
 8007c62:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <_dtoa_r+0x630>)
 8007c64:	4650      	mov	r0, sl
 8007c66:	4659      	mov	r1, fp
 8007c68:	f7f8 fb20 	bl	80002ac <__adddf3>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	f7f8 ff60 	bl	8000b38 <__aeabi_dcmpgt>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d173      	bne.n	8007d64 <_dtoa_r+0x6c4>
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	465b      	mov	r3, fp
 8007c80:	4913      	ldr	r1, [pc, #76]	; (8007cd0 <_dtoa_r+0x630>)
 8007c82:	2000      	movs	r0, #0
 8007c84:	f7f8 fb10 	bl	80002a8 <__aeabi_dsub>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 ff34 	bl	8000afc <__aeabi_dcmplt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f43f af35 	beq.w	8007b04 <_dtoa_r+0x464>
 8007c9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c9c:	1e6b      	subs	r3, r5, #1
 8007c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ca4:	2b30      	cmp	r3, #48	; 0x30
 8007ca6:	d0f8      	beq.n	8007c9a <_dtoa_r+0x5fa>
 8007ca8:	9700      	str	r7, [sp, #0]
 8007caa:	e049      	b.n	8007d40 <_dtoa_r+0x6a0>
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <_dtoa_r+0x624>)
 8007cae:	f7f8 fcb3 	bl	8000618 <__aeabi_dmul>
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	4689      	mov	r9, r1
 8007cb6:	e7bd      	b.n	8007c34 <_dtoa_r+0x594>
 8007cb8:	08009a50 	.word	0x08009a50
 8007cbc:	08009a28 	.word	0x08009a28
 8007cc0:	3ff00000 	.word	0x3ff00000
 8007cc4:	40240000 	.word	0x40240000
 8007cc8:	401c0000 	.word	0x401c0000
 8007ccc:	40140000 	.word	0x40140000
 8007cd0:	3fe00000 	.word	0x3fe00000
 8007cd4:	9d01      	ldr	r5, [sp, #4]
 8007cd6:	4656      	mov	r6, sl
 8007cd8:	465f      	mov	r7, fp
 8007cda:	4642      	mov	r2, r8
 8007cdc:	464b      	mov	r3, r9
 8007cde:	4630      	mov	r0, r6
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	f7f8 fdc3 	bl	800086c <__aeabi_ddiv>
 8007ce6:	f7f8 ff47 	bl	8000b78 <__aeabi_d2iz>
 8007cea:	4682      	mov	sl, r0
 8007cec:	f7f8 fc2a 	bl	8000544 <__aeabi_i2d>
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	f7f8 fc90 	bl	8000618 <__aeabi_dmul>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d04:	f7f8 fad0 	bl	80002a8 <__aeabi_dsub>
 8007d08:	f805 6b01 	strb.w	r6, [r5], #1
 8007d0c:	9e01      	ldr	r6, [sp, #4]
 8007d0e:	9f03      	ldr	r7, [sp, #12]
 8007d10:	1bae      	subs	r6, r5, r6
 8007d12:	42b7      	cmp	r7, r6
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	d135      	bne.n	8007d86 <_dtoa_r+0x6e6>
 8007d1a:	f7f8 fac7 	bl	80002ac <__adddf3>
 8007d1e:	4642      	mov	r2, r8
 8007d20:	464b      	mov	r3, r9
 8007d22:	4606      	mov	r6, r0
 8007d24:	460f      	mov	r7, r1
 8007d26:	f7f8 ff07 	bl	8000b38 <__aeabi_dcmpgt>
 8007d2a:	b9d0      	cbnz	r0, 8007d62 <_dtoa_r+0x6c2>
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	464b      	mov	r3, r9
 8007d30:	4630      	mov	r0, r6
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7f8 fed8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d38:	b110      	cbz	r0, 8007d40 <_dtoa_r+0x6a0>
 8007d3a:	f01a 0f01 	tst.w	sl, #1
 8007d3e:	d110      	bne.n	8007d62 <_dtoa_r+0x6c2>
 8007d40:	4620      	mov	r0, r4
 8007d42:	ee18 1a10 	vmov	r1, s16
 8007d46:	f000 faf3 	bl	8008330 <_Bfree>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9800      	ldr	r0, [sp, #0]
 8007d4e:	702b      	strb	r3, [r5, #0]
 8007d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d52:	3001      	adds	r0, #1
 8007d54:	6018      	str	r0, [r3, #0]
 8007d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f43f acf1 	beq.w	8007740 <_dtoa_r+0xa0>
 8007d5e:	601d      	str	r5, [r3, #0]
 8007d60:	e4ee      	b.n	8007740 <_dtoa_r+0xa0>
 8007d62:	9f00      	ldr	r7, [sp, #0]
 8007d64:	462b      	mov	r3, r5
 8007d66:	461d      	mov	r5, r3
 8007d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d6c:	2a39      	cmp	r2, #57	; 0x39
 8007d6e:	d106      	bne.n	8007d7e <_dtoa_r+0x6de>
 8007d70:	9a01      	ldr	r2, [sp, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d1f7      	bne.n	8007d66 <_dtoa_r+0x6c6>
 8007d76:	9901      	ldr	r1, [sp, #4]
 8007d78:	2230      	movs	r2, #48	; 0x30
 8007d7a:	3701      	adds	r7, #1
 8007d7c:	700a      	strb	r2, [r1, #0]
 8007d7e:	781a      	ldrb	r2, [r3, #0]
 8007d80:	3201      	adds	r2, #1
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	e790      	b.n	8007ca8 <_dtoa_r+0x608>
 8007d86:	4ba6      	ldr	r3, [pc, #664]	; (8008020 <_dtoa_r+0x980>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f7f8 fc45 	bl	8000618 <__aeabi_dmul>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4606      	mov	r6, r0
 8007d94:	460f      	mov	r7, r1
 8007d96:	f7f8 fea7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d09d      	beq.n	8007cda <_dtoa_r+0x63a>
 8007d9e:	e7cf      	b.n	8007d40 <_dtoa_r+0x6a0>
 8007da0:	9a08      	ldr	r2, [sp, #32]
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	f000 80d7 	beq.w	8007f56 <_dtoa_r+0x8b6>
 8007da8:	9a06      	ldr	r2, [sp, #24]
 8007daa:	2a01      	cmp	r2, #1
 8007dac:	f300 80ba 	bgt.w	8007f24 <_dtoa_r+0x884>
 8007db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	f000 80b2 	beq.w	8007f1c <_dtoa_r+0x87c>
 8007db8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dbc:	9e07      	ldr	r6, [sp, #28]
 8007dbe:	9d04      	ldr	r5, [sp, #16]
 8007dc0:	9a04      	ldr	r2, [sp, #16]
 8007dc2:	441a      	add	r2, r3
 8007dc4:	9204      	str	r2, [sp, #16]
 8007dc6:	9a05      	ldr	r2, [sp, #20]
 8007dc8:	2101      	movs	r1, #1
 8007dca:	441a      	add	r2, r3
 8007dcc:	4620      	mov	r0, r4
 8007dce:	9205      	str	r2, [sp, #20]
 8007dd0:	f000 fb66 	bl	80084a0 <__i2b>
 8007dd4:	4607      	mov	r7, r0
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	dd0c      	ble.n	8007df4 <_dtoa_r+0x754>
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dd09      	ble.n	8007df4 <_dtoa_r+0x754>
 8007de0:	42ab      	cmp	r3, r5
 8007de2:	9a04      	ldr	r2, [sp, #16]
 8007de4:	bfa8      	it	ge
 8007de6:	462b      	movge	r3, r5
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	9204      	str	r2, [sp, #16]
 8007dec:	9a05      	ldr	r2, [sp, #20]
 8007dee:	1aed      	subs	r5, r5, r3
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	b31b      	cbz	r3, 8007e40 <_dtoa_r+0x7a0>
 8007df8:	9b08      	ldr	r3, [sp, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80af 	beq.w	8007f5e <_dtoa_r+0x8be>
 8007e00:	2e00      	cmp	r6, #0
 8007e02:	dd13      	ble.n	8007e2c <_dtoa_r+0x78c>
 8007e04:	4639      	mov	r1, r7
 8007e06:	4632      	mov	r2, r6
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fc09 	bl	8008620 <__pow5mult>
 8007e0e:	ee18 2a10 	vmov	r2, s16
 8007e12:	4601      	mov	r1, r0
 8007e14:	4607      	mov	r7, r0
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 fb58 	bl	80084cc <__multiply>
 8007e1c:	ee18 1a10 	vmov	r1, s16
 8007e20:	4680      	mov	r8, r0
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 fa84 	bl	8008330 <_Bfree>
 8007e28:	ee08 8a10 	vmov	s16, r8
 8007e2c:	9b07      	ldr	r3, [sp, #28]
 8007e2e:	1b9a      	subs	r2, r3, r6
 8007e30:	d006      	beq.n	8007e40 <_dtoa_r+0x7a0>
 8007e32:	ee18 1a10 	vmov	r1, s16
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 fbf2 	bl	8008620 <__pow5mult>
 8007e3c:	ee08 0a10 	vmov	s16, r0
 8007e40:	2101      	movs	r1, #1
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fb2c 	bl	80084a0 <__i2b>
 8007e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	f340 8088 	ble.w	8007f62 <_dtoa_r+0x8c2>
 8007e52:	461a      	mov	r2, r3
 8007e54:	4601      	mov	r1, r0
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 fbe2 	bl	8008620 <__pow5mult>
 8007e5c:	9b06      	ldr	r3, [sp, #24]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	4606      	mov	r6, r0
 8007e62:	f340 8081 	ble.w	8007f68 <_dtoa_r+0x8c8>
 8007e66:	f04f 0800 	mov.w	r8, #0
 8007e6a:	6933      	ldr	r3, [r6, #16]
 8007e6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e70:	6918      	ldr	r0, [r3, #16]
 8007e72:	f000 fac5 	bl	8008400 <__hi0bits>
 8007e76:	f1c0 0020 	rsb	r0, r0, #32
 8007e7a:	9b05      	ldr	r3, [sp, #20]
 8007e7c:	4418      	add	r0, r3
 8007e7e:	f010 001f 	ands.w	r0, r0, #31
 8007e82:	f000 8092 	beq.w	8007faa <_dtoa_r+0x90a>
 8007e86:	f1c0 0320 	rsb	r3, r0, #32
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	f340 808a 	ble.w	8007fa4 <_dtoa_r+0x904>
 8007e90:	f1c0 001c 	rsb	r0, r0, #28
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	4403      	add	r3, r0
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	9b05      	ldr	r3, [sp, #20]
 8007e9c:	4403      	add	r3, r0
 8007e9e:	4405      	add	r5, r0
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	9b04      	ldr	r3, [sp, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dd07      	ble.n	8007eb8 <_dtoa_r+0x818>
 8007ea8:	ee18 1a10 	vmov	r1, s16
 8007eac:	461a      	mov	r2, r3
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fc10 	bl	80086d4 <__lshift>
 8007eb4:	ee08 0a10 	vmov	s16, r0
 8007eb8:	9b05      	ldr	r3, [sp, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dd05      	ble.n	8007eca <_dtoa_r+0x82a>
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 fc06 	bl	80086d4 <__lshift>
 8007ec8:	4606      	mov	r6, r0
 8007eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d06e      	beq.n	8007fae <_dtoa_r+0x90e>
 8007ed0:	ee18 0a10 	vmov	r0, s16
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	f000 fc6d 	bl	80087b4 <__mcmp>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	da67      	bge.n	8007fae <_dtoa_r+0x90e>
 8007ede:	9b00      	ldr	r3, [sp, #0]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	ee18 1a10 	vmov	r1, s16
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	220a      	movs	r2, #10
 8007eea:	2300      	movs	r3, #0
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fa41 	bl	8008374 <__multadd>
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	ee08 0a10 	vmov	s16, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 81b1 	beq.w	8008260 <_dtoa_r+0xbc0>
 8007efe:	2300      	movs	r3, #0
 8007f00:	4639      	mov	r1, r7
 8007f02:	220a      	movs	r2, #10
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fa35 	bl	8008374 <__multadd>
 8007f0a:	9b02      	ldr	r3, [sp, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	4607      	mov	r7, r0
 8007f10:	f300 808e 	bgt.w	8008030 <_dtoa_r+0x990>
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dc51      	bgt.n	8007fbe <_dtoa_r+0x91e>
 8007f1a:	e089      	b.n	8008030 <_dtoa_r+0x990>
 8007f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f22:	e74b      	b.n	8007dbc <_dtoa_r+0x71c>
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	1e5e      	subs	r6, r3, #1
 8007f28:	9b07      	ldr	r3, [sp, #28]
 8007f2a:	42b3      	cmp	r3, r6
 8007f2c:	bfbf      	itttt	lt
 8007f2e:	9b07      	ldrlt	r3, [sp, #28]
 8007f30:	9607      	strlt	r6, [sp, #28]
 8007f32:	1af2      	sublt	r2, r6, r3
 8007f34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f36:	bfb6      	itet	lt
 8007f38:	189b      	addlt	r3, r3, r2
 8007f3a:	1b9e      	subge	r6, r3, r6
 8007f3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	bfb8      	it	lt
 8007f42:	2600      	movlt	r6, #0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfb7      	itett	lt
 8007f48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f50:	1a9d      	sublt	r5, r3, r2
 8007f52:	2300      	movlt	r3, #0
 8007f54:	e734      	b.n	8007dc0 <_dtoa_r+0x720>
 8007f56:	9e07      	ldr	r6, [sp, #28]
 8007f58:	9d04      	ldr	r5, [sp, #16]
 8007f5a:	9f08      	ldr	r7, [sp, #32]
 8007f5c:	e73b      	b.n	8007dd6 <_dtoa_r+0x736>
 8007f5e:	9a07      	ldr	r2, [sp, #28]
 8007f60:	e767      	b.n	8007e32 <_dtoa_r+0x792>
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	dc18      	bgt.n	8007f9a <_dtoa_r+0x8fa>
 8007f68:	f1ba 0f00 	cmp.w	sl, #0
 8007f6c:	d115      	bne.n	8007f9a <_dtoa_r+0x8fa>
 8007f6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f72:	b993      	cbnz	r3, 8007f9a <_dtoa_r+0x8fa>
 8007f74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f78:	0d1b      	lsrs	r3, r3, #20
 8007f7a:	051b      	lsls	r3, r3, #20
 8007f7c:	b183      	cbz	r3, 8007fa0 <_dtoa_r+0x900>
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	3301      	adds	r3, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	3301      	adds	r3, #1
 8007f88:	9305      	str	r3, [sp, #20]
 8007f8a:	f04f 0801 	mov.w	r8, #1
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f47f af6a 	bne.w	8007e6a <_dtoa_r+0x7ca>
 8007f96:	2001      	movs	r0, #1
 8007f98:	e76f      	b.n	8007e7a <_dtoa_r+0x7da>
 8007f9a:	f04f 0800 	mov.w	r8, #0
 8007f9e:	e7f6      	b.n	8007f8e <_dtoa_r+0x8ee>
 8007fa0:	4698      	mov	r8, r3
 8007fa2:	e7f4      	b.n	8007f8e <_dtoa_r+0x8ee>
 8007fa4:	f43f af7d 	beq.w	8007ea2 <_dtoa_r+0x802>
 8007fa8:	4618      	mov	r0, r3
 8007faa:	301c      	adds	r0, #28
 8007fac:	e772      	b.n	8007e94 <_dtoa_r+0x7f4>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dc37      	bgt.n	8008024 <_dtoa_r+0x984>
 8007fb4:	9b06      	ldr	r3, [sp, #24]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	dd34      	ble.n	8008024 <_dtoa_r+0x984>
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	9b02      	ldr	r3, [sp, #8]
 8007fc0:	b96b      	cbnz	r3, 8007fde <_dtoa_r+0x93e>
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	2205      	movs	r2, #5
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 f9d4 	bl	8008374 <__multadd>
 8007fcc:	4601      	mov	r1, r0
 8007fce:	4606      	mov	r6, r0
 8007fd0:	ee18 0a10 	vmov	r0, s16
 8007fd4:	f000 fbee 	bl	80087b4 <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f73f adbb 	bgt.w	8007b54 <_dtoa_r+0x4b4>
 8007fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe0:	9d01      	ldr	r5, [sp, #4]
 8007fe2:	43db      	mvns	r3, r3
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	f04f 0800 	mov.w	r8, #0
 8007fea:	4631      	mov	r1, r6
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f99f 	bl	8008330 <_Bfree>
 8007ff2:	2f00      	cmp	r7, #0
 8007ff4:	f43f aea4 	beq.w	8007d40 <_dtoa_r+0x6a0>
 8007ff8:	f1b8 0f00 	cmp.w	r8, #0
 8007ffc:	d005      	beq.n	800800a <_dtoa_r+0x96a>
 8007ffe:	45b8      	cmp	r8, r7
 8008000:	d003      	beq.n	800800a <_dtoa_r+0x96a>
 8008002:	4641      	mov	r1, r8
 8008004:	4620      	mov	r0, r4
 8008006:	f000 f993 	bl	8008330 <_Bfree>
 800800a:	4639      	mov	r1, r7
 800800c:	4620      	mov	r0, r4
 800800e:	f000 f98f 	bl	8008330 <_Bfree>
 8008012:	e695      	b.n	8007d40 <_dtoa_r+0x6a0>
 8008014:	2600      	movs	r6, #0
 8008016:	4637      	mov	r7, r6
 8008018:	e7e1      	b.n	8007fde <_dtoa_r+0x93e>
 800801a:	9700      	str	r7, [sp, #0]
 800801c:	4637      	mov	r7, r6
 800801e:	e599      	b.n	8007b54 <_dtoa_r+0x4b4>
 8008020:	40240000 	.word	0x40240000
 8008024:	9b08      	ldr	r3, [sp, #32]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 80ca 	beq.w	80081c0 <_dtoa_r+0xb20>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	9302      	str	r3, [sp, #8]
 8008030:	2d00      	cmp	r5, #0
 8008032:	dd05      	ble.n	8008040 <_dtoa_r+0x9a0>
 8008034:	4639      	mov	r1, r7
 8008036:	462a      	mov	r2, r5
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fb4b 	bl	80086d4 <__lshift>
 800803e:	4607      	mov	r7, r0
 8008040:	f1b8 0f00 	cmp.w	r8, #0
 8008044:	d05b      	beq.n	80080fe <_dtoa_r+0xa5e>
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4620      	mov	r0, r4
 800804a:	f000 f931 	bl	80082b0 <_Balloc>
 800804e:	4605      	mov	r5, r0
 8008050:	b928      	cbnz	r0, 800805e <_dtoa_r+0x9be>
 8008052:	4b87      	ldr	r3, [pc, #540]	; (8008270 <_dtoa_r+0xbd0>)
 8008054:	4602      	mov	r2, r0
 8008056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800805a:	f7ff bb3b 	b.w	80076d4 <_dtoa_r+0x34>
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	3202      	adds	r2, #2
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	f107 010c 	add.w	r1, r7, #12
 8008068:	300c      	adds	r0, #12
 800806a:	f000 f913 	bl	8008294 <memcpy>
 800806e:	2201      	movs	r2, #1
 8008070:	4629      	mov	r1, r5
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fb2e 	bl	80086d4 <__lshift>
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	f103 0901 	add.w	r9, r3, #1
 800807e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008082:	4413      	add	r3, r2
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	f00a 0301 	and.w	r3, sl, #1
 800808a:	46b8      	mov	r8, r7
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	4607      	mov	r7, r0
 8008090:	4631      	mov	r1, r6
 8008092:	ee18 0a10 	vmov	r0, s16
 8008096:	f7ff fa77 	bl	8007588 <quorem>
 800809a:	4641      	mov	r1, r8
 800809c:	9002      	str	r0, [sp, #8]
 800809e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080a2:	ee18 0a10 	vmov	r0, s16
 80080a6:	f000 fb85 	bl	80087b4 <__mcmp>
 80080aa:	463a      	mov	r2, r7
 80080ac:	9003      	str	r0, [sp, #12]
 80080ae:	4631      	mov	r1, r6
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fb9b 	bl	80087ec <__mdiff>
 80080b6:	68c2      	ldr	r2, [r0, #12]
 80080b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80080bc:	4605      	mov	r5, r0
 80080be:	bb02      	cbnz	r2, 8008102 <_dtoa_r+0xa62>
 80080c0:	4601      	mov	r1, r0
 80080c2:	ee18 0a10 	vmov	r0, s16
 80080c6:	f000 fb75 	bl	80087b4 <__mcmp>
 80080ca:	4602      	mov	r2, r0
 80080cc:	4629      	mov	r1, r5
 80080ce:	4620      	mov	r0, r4
 80080d0:	9207      	str	r2, [sp, #28]
 80080d2:	f000 f92d 	bl	8008330 <_Bfree>
 80080d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080da:	ea43 0102 	orr.w	r1, r3, r2
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	430b      	orrs	r3, r1
 80080e2:	464d      	mov	r5, r9
 80080e4:	d10f      	bne.n	8008106 <_dtoa_r+0xa66>
 80080e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080ea:	d02a      	beq.n	8008142 <_dtoa_r+0xaa2>
 80080ec:	9b03      	ldr	r3, [sp, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dd02      	ble.n	80080f8 <_dtoa_r+0xa58>
 80080f2:	9b02      	ldr	r3, [sp, #8]
 80080f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80080f8:	f88b a000 	strb.w	sl, [fp]
 80080fc:	e775      	b.n	8007fea <_dtoa_r+0x94a>
 80080fe:	4638      	mov	r0, r7
 8008100:	e7ba      	b.n	8008078 <_dtoa_r+0x9d8>
 8008102:	2201      	movs	r2, #1
 8008104:	e7e2      	b.n	80080cc <_dtoa_r+0xa2c>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	db04      	blt.n	8008116 <_dtoa_r+0xa76>
 800810c:	9906      	ldr	r1, [sp, #24]
 800810e:	430b      	orrs	r3, r1
 8008110:	9904      	ldr	r1, [sp, #16]
 8008112:	430b      	orrs	r3, r1
 8008114:	d122      	bne.n	800815c <_dtoa_r+0xabc>
 8008116:	2a00      	cmp	r2, #0
 8008118:	ddee      	ble.n	80080f8 <_dtoa_r+0xa58>
 800811a:	ee18 1a10 	vmov	r1, s16
 800811e:	2201      	movs	r2, #1
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fad7 	bl	80086d4 <__lshift>
 8008126:	4631      	mov	r1, r6
 8008128:	ee08 0a10 	vmov	s16, r0
 800812c:	f000 fb42 	bl	80087b4 <__mcmp>
 8008130:	2800      	cmp	r0, #0
 8008132:	dc03      	bgt.n	800813c <_dtoa_r+0xa9c>
 8008134:	d1e0      	bne.n	80080f8 <_dtoa_r+0xa58>
 8008136:	f01a 0f01 	tst.w	sl, #1
 800813a:	d0dd      	beq.n	80080f8 <_dtoa_r+0xa58>
 800813c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008140:	d1d7      	bne.n	80080f2 <_dtoa_r+0xa52>
 8008142:	2339      	movs	r3, #57	; 0x39
 8008144:	f88b 3000 	strb.w	r3, [fp]
 8008148:	462b      	mov	r3, r5
 800814a:	461d      	mov	r5, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008152:	2a39      	cmp	r2, #57	; 0x39
 8008154:	d071      	beq.n	800823a <_dtoa_r+0xb9a>
 8008156:	3201      	adds	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	e746      	b.n	8007fea <_dtoa_r+0x94a>
 800815c:	2a00      	cmp	r2, #0
 800815e:	dd07      	ble.n	8008170 <_dtoa_r+0xad0>
 8008160:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008164:	d0ed      	beq.n	8008142 <_dtoa_r+0xaa2>
 8008166:	f10a 0301 	add.w	r3, sl, #1
 800816a:	f88b 3000 	strb.w	r3, [fp]
 800816e:	e73c      	b.n	8007fea <_dtoa_r+0x94a>
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008176:	4599      	cmp	r9, r3
 8008178:	d047      	beq.n	800820a <_dtoa_r+0xb6a>
 800817a:	ee18 1a10 	vmov	r1, s16
 800817e:	2300      	movs	r3, #0
 8008180:	220a      	movs	r2, #10
 8008182:	4620      	mov	r0, r4
 8008184:	f000 f8f6 	bl	8008374 <__multadd>
 8008188:	45b8      	cmp	r8, r7
 800818a:	ee08 0a10 	vmov	s16, r0
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	f04f 020a 	mov.w	r2, #10
 8008196:	4641      	mov	r1, r8
 8008198:	4620      	mov	r0, r4
 800819a:	d106      	bne.n	80081aa <_dtoa_r+0xb0a>
 800819c:	f000 f8ea 	bl	8008374 <__multadd>
 80081a0:	4680      	mov	r8, r0
 80081a2:	4607      	mov	r7, r0
 80081a4:	f109 0901 	add.w	r9, r9, #1
 80081a8:	e772      	b.n	8008090 <_dtoa_r+0x9f0>
 80081aa:	f000 f8e3 	bl	8008374 <__multadd>
 80081ae:	4639      	mov	r1, r7
 80081b0:	4680      	mov	r8, r0
 80081b2:	2300      	movs	r3, #0
 80081b4:	220a      	movs	r2, #10
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 f8dc 	bl	8008374 <__multadd>
 80081bc:	4607      	mov	r7, r0
 80081be:	e7f1      	b.n	80081a4 <_dtoa_r+0xb04>
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	9302      	str	r3, [sp, #8]
 80081c4:	9d01      	ldr	r5, [sp, #4]
 80081c6:	ee18 0a10 	vmov	r0, s16
 80081ca:	4631      	mov	r1, r6
 80081cc:	f7ff f9dc 	bl	8007588 <quorem>
 80081d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	f805 ab01 	strb.w	sl, [r5], #1
 80081da:	1aea      	subs	r2, r5, r3
 80081dc:	9b02      	ldr	r3, [sp, #8]
 80081de:	4293      	cmp	r3, r2
 80081e0:	dd09      	ble.n	80081f6 <_dtoa_r+0xb56>
 80081e2:	ee18 1a10 	vmov	r1, s16
 80081e6:	2300      	movs	r3, #0
 80081e8:	220a      	movs	r2, #10
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 f8c2 	bl	8008374 <__multadd>
 80081f0:	ee08 0a10 	vmov	s16, r0
 80081f4:	e7e7      	b.n	80081c6 <_dtoa_r+0xb26>
 80081f6:	9b02      	ldr	r3, [sp, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bfc8      	it	gt
 80081fc:	461d      	movgt	r5, r3
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	bfd8      	it	le
 8008202:	2501      	movle	r5, #1
 8008204:	441d      	add	r5, r3
 8008206:	f04f 0800 	mov.w	r8, #0
 800820a:	ee18 1a10 	vmov	r1, s16
 800820e:	2201      	movs	r2, #1
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fa5f 	bl	80086d4 <__lshift>
 8008216:	4631      	mov	r1, r6
 8008218:	ee08 0a10 	vmov	s16, r0
 800821c:	f000 faca 	bl	80087b4 <__mcmp>
 8008220:	2800      	cmp	r0, #0
 8008222:	dc91      	bgt.n	8008148 <_dtoa_r+0xaa8>
 8008224:	d102      	bne.n	800822c <_dtoa_r+0xb8c>
 8008226:	f01a 0f01 	tst.w	sl, #1
 800822a:	d18d      	bne.n	8008148 <_dtoa_r+0xaa8>
 800822c:	462b      	mov	r3, r5
 800822e:	461d      	mov	r5, r3
 8008230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008234:	2a30      	cmp	r2, #48	; 0x30
 8008236:	d0fa      	beq.n	800822e <_dtoa_r+0xb8e>
 8008238:	e6d7      	b.n	8007fea <_dtoa_r+0x94a>
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	429a      	cmp	r2, r3
 800823e:	d184      	bne.n	800814a <_dtoa_r+0xaaa>
 8008240:	9b00      	ldr	r3, [sp, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	2331      	movs	r3, #49	; 0x31
 8008248:	7013      	strb	r3, [r2, #0]
 800824a:	e6ce      	b.n	8007fea <_dtoa_r+0x94a>
 800824c:	4b09      	ldr	r3, [pc, #36]	; (8008274 <_dtoa_r+0xbd4>)
 800824e:	f7ff ba95 	b.w	800777c <_dtoa_r+0xdc>
 8008252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008254:	2b00      	cmp	r3, #0
 8008256:	f47f aa6e 	bne.w	8007736 <_dtoa_r+0x96>
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <_dtoa_r+0xbd8>)
 800825c:	f7ff ba8e 	b.w	800777c <_dtoa_r+0xdc>
 8008260:	9b02      	ldr	r3, [sp, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	dcae      	bgt.n	80081c4 <_dtoa_r+0xb24>
 8008266:	9b06      	ldr	r3, [sp, #24]
 8008268:	2b02      	cmp	r3, #2
 800826a:	f73f aea8 	bgt.w	8007fbe <_dtoa_r+0x91e>
 800826e:	e7a9      	b.n	80081c4 <_dtoa_r+0xb24>
 8008270:	080099b7 	.word	0x080099b7
 8008274:	08009914 	.word	0x08009914
 8008278:	08009938 	.word	0x08009938

0800827c <_localeconv_r>:
 800827c:	4800      	ldr	r0, [pc, #0]	; (8008280 <_localeconv_r+0x4>)
 800827e:	4770      	bx	lr
 8008280:	20000760 	.word	0x20000760

08008284 <malloc>:
 8008284:	4b02      	ldr	r3, [pc, #8]	; (8008290 <malloc+0xc>)
 8008286:	4601      	mov	r1, r0
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	f000 bc17 	b.w	8008abc <_malloc_r>
 800828e:	bf00      	nop
 8008290:	2000060c 	.word	0x2000060c

08008294 <memcpy>:
 8008294:	440a      	add	r2, r1
 8008296:	4291      	cmp	r1, r2
 8008298:	f100 33ff 	add.w	r3, r0, #4294967295
 800829c:	d100      	bne.n	80082a0 <memcpy+0xc>
 800829e:	4770      	bx	lr
 80082a0:	b510      	push	{r4, lr}
 80082a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082aa:	4291      	cmp	r1, r2
 80082ac:	d1f9      	bne.n	80082a2 <memcpy+0xe>
 80082ae:	bd10      	pop	{r4, pc}

080082b0 <_Balloc>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082b4:	4604      	mov	r4, r0
 80082b6:	460d      	mov	r5, r1
 80082b8:	b976      	cbnz	r6, 80082d8 <_Balloc+0x28>
 80082ba:	2010      	movs	r0, #16
 80082bc:	f7ff ffe2 	bl	8008284 <malloc>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6260      	str	r0, [r4, #36]	; 0x24
 80082c4:	b920      	cbnz	r0, 80082d0 <_Balloc+0x20>
 80082c6:	4b18      	ldr	r3, [pc, #96]	; (8008328 <_Balloc+0x78>)
 80082c8:	4818      	ldr	r0, [pc, #96]	; (800832c <_Balloc+0x7c>)
 80082ca:	2166      	movs	r1, #102	; 0x66
 80082cc:	f000 fc7a 	bl	8008bc4 <__assert_func>
 80082d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d4:	6006      	str	r6, [r0, #0]
 80082d6:	60c6      	str	r6, [r0, #12]
 80082d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082da:	68f3      	ldr	r3, [r6, #12]
 80082dc:	b183      	cbz	r3, 8008300 <_Balloc+0x50>
 80082de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082e6:	b9b8      	cbnz	r0, 8008318 <_Balloc+0x68>
 80082e8:	2101      	movs	r1, #1
 80082ea:	fa01 f605 	lsl.w	r6, r1, r5
 80082ee:	1d72      	adds	r2, r6, #5
 80082f0:	0092      	lsls	r2, r2, #2
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 fb60 	bl	80089b8 <_calloc_r>
 80082f8:	b160      	cbz	r0, 8008314 <_Balloc+0x64>
 80082fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082fe:	e00e      	b.n	800831e <_Balloc+0x6e>
 8008300:	2221      	movs	r2, #33	; 0x21
 8008302:	2104      	movs	r1, #4
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fb57 	bl	80089b8 <_calloc_r>
 800830a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830c:	60f0      	str	r0, [r6, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e4      	bne.n	80082de <_Balloc+0x2e>
 8008314:	2000      	movs	r0, #0
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	6802      	ldr	r2, [r0, #0]
 800831a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800831e:	2300      	movs	r3, #0
 8008320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008324:	e7f7      	b.n	8008316 <_Balloc+0x66>
 8008326:	bf00      	nop
 8008328:	08009945 	.word	0x08009945
 800832c:	080099c8 	.word	0x080099c8

08008330 <_Bfree>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	b976      	cbnz	r6, 8008358 <_Bfree+0x28>
 800833a:	2010      	movs	r0, #16
 800833c:	f7ff ffa2 	bl	8008284 <malloc>
 8008340:	4602      	mov	r2, r0
 8008342:	6268      	str	r0, [r5, #36]	; 0x24
 8008344:	b920      	cbnz	r0, 8008350 <_Bfree+0x20>
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <_Bfree+0x3c>)
 8008348:	4809      	ldr	r0, [pc, #36]	; (8008370 <_Bfree+0x40>)
 800834a:	218a      	movs	r1, #138	; 0x8a
 800834c:	f000 fc3a 	bl	8008bc4 <__assert_func>
 8008350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008354:	6006      	str	r6, [r0, #0]
 8008356:	60c6      	str	r6, [r0, #12]
 8008358:	b13c      	cbz	r4, 800836a <_Bfree+0x3a>
 800835a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800835c:	6862      	ldr	r2, [r4, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008364:	6021      	str	r1, [r4, #0]
 8008366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	08009945 	.word	0x08009945
 8008370:	080099c8 	.word	0x080099c8

08008374 <__multadd>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	690d      	ldr	r5, [r1, #16]
 800837a:	4607      	mov	r7, r0
 800837c:	460c      	mov	r4, r1
 800837e:	461e      	mov	r6, r3
 8008380:	f101 0c14 	add.w	ip, r1, #20
 8008384:	2000      	movs	r0, #0
 8008386:	f8dc 3000 	ldr.w	r3, [ip]
 800838a:	b299      	uxth	r1, r3
 800838c:	fb02 6101 	mla	r1, r2, r1, r6
 8008390:	0c1e      	lsrs	r6, r3, #16
 8008392:	0c0b      	lsrs	r3, r1, #16
 8008394:	fb02 3306 	mla	r3, r2, r6, r3
 8008398:	b289      	uxth	r1, r1
 800839a:	3001      	adds	r0, #1
 800839c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083a0:	4285      	cmp	r5, r0
 80083a2:	f84c 1b04 	str.w	r1, [ip], #4
 80083a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083aa:	dcec      	bgt.n	8008386 <__multadd+0x12>
 80083ac:	b30e      	cbz	r6, 80083f2 <__multadd+0x7e>
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	42ab      	cmp	r3, r5
 80083b2:	dc19      	bgt.n	80083e8 <__multadd+0x74>
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	4638      	mov	r0, r7
 80083b8:	3101      	adds	r1, #1
 80083ba:	f7ff ff79 	bl	80082b0 <_Balloc>
 80083be:	4680      	mov	r8, r0
 80083c0:	b928      	cbnz	r0, 80083ce <__multadd+0x5a>
 80083c2:	4602      	mov	r2, r0
 80083c4:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <__multadd+0x84>)
 80083c6:	480d      	ldr	r0, [pc, #52]	; (80083fc <__multadd+0x88>)
 80083c8:	21b5      	movs	r1, #181	; 0xb5
 80083ca:	f000 fbfb 	bl	8008bc4 <__assert_func>
 80083ce:	6922      	ldr	r2, [r4, #16]
 80083d0:	3202      	adds	r2, #2
 80083d2:	f104 010c 	add.w	r1, r4, #12
 80083d6:	0092      	lsls	r2, r2, #2
 80083d8:	300c      	adds	r0, #12
 80083da:	f7ff ff5b 	bl	8008294 <memcpy>
 80083de:	4621      	mov	r1, r4
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff ffa5 	bl	8008330 <_Bfree>
 80083e6:	4644      	mov	r4, r8
 80083e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083ec:	3501      	adds	r5, #1
 80083ee:	615e      	str	r6, [r3, #20]
 80083f0:	6125      	str	r5, [r4, #16]
 80083f2:	4620      	mov	r0, r4
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	080099b7 	.word	0x080099b7
 80083fc:	080099c8 	.word	0x080099c8

08008400 <__hi0bits>:
 8008400:	0c03      	lsrs	r3, r0, #16
 8008402:	041b      	lsls	r3, r3, #16
 8008404:	b9d3      	cbnz	r3, 800843c <__hi0bits+0x3c>
 8008406:	0400      	lsls	r0, r0, #16
 8008408:	2310      	movs	r3, #16
 800840a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800840e:	bf04      	itt	eq
 8008410:	0200      	lsleq	r0, r0, #8
 8008412:	3308      	addeq	r3, #8
 8008414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008418:	bf04      	itt	eq
 800841a:	0100      	lsleq	r0, r0, #4
 800841c:	3304      	addeq	r3, #4
 800841e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008422:	bf04      	itt	eq
 8008424:	0080      	lsleq	r0, r0, #2
 8008426:	3302      	addeq	r3, #2
 8008428:	2800      	cmp	r0, #0
 800842a:	db05      	blt.n	8008438 <__hi0bits+0x38>
 800842c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008430:	f103 0301 	add.w	r3, r3, #1
 8008434:	bf08      	it	eq
 8008436:	2320      	moveq	r3, #32
 8008438:	4618      	mov	r0, r3
 800843a:	4770      	bx	lr
 800843c:	2300      	movs	r3, #0
 800843e:	e7e4      	b.n	800840a <__hi0bits+0xa>

08008440 <__lo0bits>:
 8008440:	6803      	ldr	r3, [r0, #0]
 8008442:	f013 0207 	ands.w	r2, r3, #7
 8008446:	4601      	mov	r1, r0
 8008448:	d00b      	beq.n	8008462 <__lo0bits+0x22>
 800844a:	07da      	lsls	r2, r3, #31
 800844c:	d423      	bmi.n	8008496 <__lo0bits+0x56>
 800844e:	0798      	lsls	r0, r3, #30
 8008450:	bf49      	itett	mi
 8008452:	085b      	lsrmi	r3, r3, #1
 8008454:	089b      	lsrpl	r3, r3, #2
 8008456:	2001      	movmi	r0, #1
 8008458:	600b      	strmi	r3, [r1, #0]
 800845a:	bf5c      	itt	pl
 800845c:	600b      	strpl	r3, [r1, #0]
 800845e:	2002      	movpl	r0, #2
 8008460:	4770      	bx	lr
 8008462:	b298      	uxth	r0, r3
 8008464:	b9a8      	cbnz	r0, 8008492 <__lo0bits+0x52>
 8008466:	0c1b      	lsrs	r3, r3, #16
 8008468:	2010      	movs	r0, #16
 800846a:	b2da      	uxtb	r2, r3
 800846c:	b90a      	cbnz	r2, 8008472 <__lo0bits+0x32>
 800846e:	3008      	adds	r0, #8
 8008470:	0a1b      	lsrs	r3, r3, #8
 8008472:	071a      	lsls	r2, r3, #28
 8008474:	bf04      	itt	eq
 8008476:	091b      	lsreq	r3, r3, #4
 8008478:	3004      	addeq	r0, #4
 800847a:	079a      	lsls	r2, r3, #30
 800847c:	bf04      	itt	eq
 800847e:	089b      	lsreq	r3, r3, #2
 8008480:	3002      	addeq	r0, #2
 8008482:	07da      	lsls	r2, r3, #31
 8008484:	d403      	bmi.n	800848e <__lo0bits+0x4e>
 8008486:	085b      	lsrs	r3, r3, #1
 8008488:	f100 0001 	add.w	r0, r0, #1
 800848c:	d005      	beq.n	800849a <__lo0bits+0x5a>
 800848e:	600b      	str	r3, [r1, #0]
 8008490:	4770      	bx	lr
 8008492:	4610      	mov	r0, r2
 8008494:	e7e9      	b.n	800846a <__lo0bits+0x2a>
 8008496:	2000      	movs	r0, #0
 8008498:	4770      	bx	lr
 800849a:	2020      	movs	r0, #32
 800849c:	4770      	bx	lr
	...

080084a0 <__i2b>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	460c      	mov	r4, r1
 80084a4:	2101      	movs	r1, #1
 80084a6:	f7ff ff03 	bl	80082b0 <_Balloc>
 80084aa:	4602      	mov	r2, r0
 80084ac:	b928      	cbnz	r0, 80084ba <__i2b+0x1a>
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <__i2b+0x24>)
 80084b0:	4805      	ldr	r0, [pc, #20]	; (80084c8 <__i2b+0x28>)
 80084b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084b6:	f000 fb85 	bl	8008bc4 <__assert_func>
 80084ba:	2301      	movs	r3, #1
 80084bc:	6144      	str	r4, [r0, #20]
 80084be:	6103      	str	r3, [r0, #16]
 80084c0:	bd10      	pop	{r4, pc}
 80084c2:	bf00      	nop
 80084c4:	080099b7 	.word	0x080099b7
 80084c8:	080099c8 	.word	0x080099c8

080084cc <__multiply>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	4691      	mov	r9, r2
 80084d2:	690a      	ldr	r2, [r1, #16]
 80084d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084d8:	429a      	cmp	r2, r3
 80084da:	bfb8      	it	lt
 80084dc:	460b      	movlt	r3, r1
 80084de:	460c      	mov	r4, r1
 80084e0:	bfbc      	itt	lt
 80084e2:	464c      	movlt	r4, r9
 80084e4:	4699      	movlt	r9, r3
 80084e6:	6927      	ldr	r7, [r4, #16]
 80084e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084ec:	68a3      	ldr	r3, [r4, #8]
 80084ee:	6861      	ldr	r1, [r4, #4]
 80084f0:	eb07 060a 	add.w	r6, r7, sl
 80084f4:	42b3      	cmp	r3, r6
 80084f6:	b085      	sub	sp, #20
 80084f8:	bfb8      	it	lt
 80084fa:	3101      	addlt	r1, #1
 80084fc:	f7ff fed8 	bl	80082b0 <_Balloc>
 8008500:	b930      	cbnz	r0, 8008510 <__multiply+0x44>
 8008502:	4602      	mov	r2, r0
 8008504:	4b44      	ldr	r3, [pc, #272]	; (8008618 <__multiply+0x14c>)
 8008506:	4845      	ldr	r0, [pc, #276]	; (800861c <__multiply+0x150>)
 8008508:	f240 115d 	movw	r1, #349	; 0x15d
 800850c:	f000 fb5a 	bl	8008bc4 <__assert_func>
 8008510:	f100 0514 	add.w	r5, r0, #20
 8008514:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008518:	462b      	mov	r3, r5
 800851a:	2200      	movs	r2, #0
 800851c:	4543      	cmp	r3, r8
 800851e:	d321      	bcc.n	8008564 <__multiply+0x98>
 8008520:	f104 0314 	add.w	r3, r4, #20
 8008524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008528:	f109 0314 	add.w	r3, r9, #20
 800852c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008530:	9202      	str	r2, [sp, #8]
 8008532:	1b3a      	subs	r2, r7, r4
 8008534:	3a15      	subs	r2, #21
 8008536:	f022 0203 	bic.w	r2, r2, #3
 800853a:	3204      	adds	r2, #4
 800853c:	f104 0115 	add.w	r1, r4, #21
 8008540:	428f      	cmp	r7, r1
 8008542:	bf38      	it	cc
 8008544:	2204      	movcc	r2, #4
 8008546:	9201      	str	r2, [sp, #4]
 8008548:	9a02      	ldr	r2, [sp, #8]
 800854a:	9303      	str	r3, [sp, #12]
 800854c:	429a      	cmp	r2, r3
 800854e:	d80c      	bhi.n	800856a <__multiply+0x9e>
 8008550:	2e00      	cmp	r6, #0
 8008552:	dd03      	ble.n	800855c <__multiply+0x90>
 8008554:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008558:	2b00      	cmp	r3, #0
 800855a:	d05a      	beq.n	8008612 <__multiply+0x146>
 800855c:	6106      	str	r6, [r0, #16]
 800855e:	b005      	add	sp, #20
 8008560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008564:	f843 2b04 	str.w	r2, [r3], #4
 8008568:	e7d8      	b.n	800851c <__multiply+0x50>
 800856a:	f8b3 a000 	ldrh.w	sl, [r3]
 800856e:	f1ba 0f00 	cmp.w	sl, #0
 8008572:	d024      	beq.n	80085be <__multiply+0xf2>
 8008574:	f104 0e14 	add.w	lr, r4, #20
 8008578:	46a9      	mov	r9, r5
 800857a:	f04f 0c00 	mov.w	ip, #0
 800857e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008582:	f8d9 1000 	ldr.w	r1, [r9]
 8008586:	fa1f fb82 	uxth.w	fp, r2
 800858a:	b289      	uxth	r1, r1
 800858c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008590:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008594:	f8d9 2000 	ldr.w	r2, [r9]
 8008598:	4461      	add	r1, ip
 800859a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800859e:	fb0a c20b 	mla	r2, sl, fp, ip
 80085a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085a6:	b289      	uxth	r1, r1
 80085a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085ac:	4577      	cmp	r7, lr
 80085ae:	f849 1b04 	str.w	r1, [r9], #4
 80085b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085b6:	d8e2      	bhi.n	800857e <__multiply+0xb2>
 80085b8:	9a01      	ldr	r2, [sp, #4]
 80085ba:	f845 c002 	str.w	ip, [r5, r2]
 80085be:	9a03      	ldr	r2, [sp, #12]
 80085c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085c4:	3304      	adds	r3, #4
 80085c6:	f1b9 0f00 	cmp.w	r9, #0
 80085ca:	d020      	beq.n	800860e <__multiply+0x142>
 80085cc:	6829      	ldr	r1, [r5, #0]
 80085ce:	f104 0c14 	add.w	ip, r4, #20
 80085d2:	46ae      	mov	lr, r5
 80085d4:	f04f 0a00 	mov.w	sl, #0
 80085d8:	f8bc b000 	ldrh.w	fp, [ip]
 80085dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085e0:	fb09 220b 	mla	r2, r9, fp, r2
 80085e4:	4492      	add	sl, r2
 80085e6:	b289      	uxth	r1, r1
 80085e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085ec:	f84e 1b04 	str.w	r1, [lr], #4
 80085f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085f4:	f8be 1000 	ldrh.w	r1, [lr]
 80085f8:	0c12      	lsrs	r2, r2, #16
 80085fa:	fb09 1102 	mla	r1, r9, r2, r1
 80085fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008602:	4567      	cmp	r7, ip
 8008604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008608:	d8e6      	bhi.n	80085d8 <__multiply+0x10c>
 800860a:	9a01      	ldr	r2, [sp, #4]
 800860c:	50a9      	str	r1, [r5, r2]
 800860e:	3504      	adds	r5, #4
 8008610:	e79a      	b.n	8008548 <__multiply+0x7c>
 8008612:	3e01      	subs	r6, #1
 8008614:	e79c      	b.n	8008550 <__multiply+0x84>
 8008616:	bf00      	nop
 8008618:	080099b7 	.word	0x080099b7
 800861c:	080099c8 	.word	0x080099c8

08008620 <__pow5mult>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	4615      	mov	r5, r2
 8008626:	f012 0203 	ands.w	r2, r2, #3
 800862a:	4606      	mov	r6, r0
 800862c:	460f      	mov	r7, r1
 800862e:	d007      	beq.n	8008640 <__pow5mult+0x20>
 8008630:	4c25      	ldr	r4, [pc, #148]	; (80086c8 <__pow5mult+0xa8>)
 8008632:	3a01      	subs	r2, #1
 8008634:	2300      	movs	r3, #0
 8008636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800863a:	f7ff fe9b 	bl	8008374 <__multadd>
 800863e:	4607      	mov	r7, r0
 8008640:	10ad      	asrs	r5, r5, #2
 8008642:	d03d      	beq.n	80086c0 <__pow5mult+0xa0>
 8008644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008646:	b97c      	cbnz	r4, 8008668 <__pow5mult+0x48>
 8008648:	2010      	movs	r0, #16
 800864a:	f7ff fe1b 	bl	8008284 <malloc>
 800864e:	4602      	mov	r2, r0
 8008650:	6270      	str	r0, [r6, #36]	; 0x24
 8008652:	b928      	cbnz	r0, 8008660 <__pow5mult+0x40>
 8008654:	4b1d      	ldr	r3, [pc, #116]	; (80086cc <__pow5mult+0xac>)
 8008656:	481e      	ldr	r0, [pc, #120]	; (80086d0 <__pow5mult+0xb0>)
 8008658:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800865c:	f000 fab2 	bl	8008bc4 <__assert_func>
 8008660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008664:	6004      	str	r4, [r0, #0]
 8008666:	60c4      	str	r4, [r0, #12]
 8008668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800866c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008670:	b94c      	cbnz	r4, 8008686 <__pow5mult+0x66>
 8008672:	f240 2171 	movw	r1, #625	; 0x271
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff12 	bl	80084a0 <__i2b>
 800867c:	2300      	movs	r3, #0
 800867e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008682:	4604      	mov	r4, r0
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	07eb      	lsls	r3, r5, #31
 800868c:	d50a      	bpl.n	80086a4 <__pow5mult+0x84>
 800868e:	4639      	mov	r1, r7
 8008690:	4622      	mov	r2, r4
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ff1a 	bl	80084cc <__multiply>
 8008698:	4639      	mov	r1, r7
 800869a:	4680      	mov	r8, r0
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff fe47 	bl	8008330 <_Bfree>
 80086a2:	4647      	mov	r7, r8
 80086a4:	106d      	asrs	r5, r5, #1
 80086a6:	d00b      	beq.n	80086c0 <__pow5mult+0xa0>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	b938      	cbnz	r0, 80086bc <__pow5mult+0x9c>
 80086ac:	4622      	mov	r2, r4
 80086ae:	4621      	mov	r1, r4
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ff0b 	bl	80084cc <__multiply>
 80086b6:	6020      	str	r0, [r4, #0]
 80086b8:	f8c0 9000 	str.w	r9, [r0]
 80086bc:	4604      	mov	r4, r0
 80086be:	e7e4      	b.n	800868a <__pow5mult+0x6a>
 80086c0:	4638      	mov	r0, r7
 80086c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c6:	bf00      	nop
 80086c8:	08009b18 	.word	0x08009b18
 80086cc:	08009945 	.word	0x08009945
 80086d0:	080099c8 	.word	0x080099c8

080086d4 <__lshift>:
 80086d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	460c      	mov	r4, r1
 80086da:	6849      	ldr	r1, [r1, #4]
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	4607      	mov	r7, r0
 80086e6:	4691      	mov	r9, r2
 80086e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086ec:	f108 0601 	add.w	r6, r8, #1
 80086f0:	42b3      	cmp	r3, r6
 80086f2:	db0b      	blt.n	800870c <__lshift+0x38>
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff fddb 	bl	80082b0 <_Balloc>
 80086fa:	4605      	mov	r5, r0
 80086fc:	b948      	cbnz	r0, 8008712 <__lshift+0x3e>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b2a      	ldr	r3, [pc, #168]	; (80087ac <__lshift+0xd8>)
 8008702:	482b      	ldr	r0, [pc, #172]	; (80087b0 <__lshift+0xdc>)
 8008704:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008708:	f000 fa5c 	bl	8008bc4 <__assert_func>
 800870c:	3101      	adds	r1, #1
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	e7ee      	b.n	80086f0 <__lshift+0x1c>
 8008712:	2300      	movs	r3, #0
 8008714:	f100 0114 	add.w	r1, r0, #20
 8008718:	f100 0210 	add.w	r2, r0, #16
 800871c:	4618      	mov	r0, r3
 800871e:	4553      	cmp	r3, sl
 8008720:	db37      	blt.n	8008792 <__lshift+0xbe>
 8008722:	6920      	ldr	r0, [r4, #16]
 8008724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008728:	f104 0314 	add.w	r3, r4, #20
 800872c:	f019 091f 	ands.w	r9, r9, #31
 8008730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008734:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008738:	d02f      	beq.n	800879a <__lshift+0xc6>
 800873a:	f1c9 0e20 	rsb	lr, r9, #32
 800873e:	468a      	mov	sl, r1
 8008740:	f04f 0c00 	mov.w	ip, #0
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	fa02 f209 	lsl.w	r2, r2, r9
 800874a:	ea42 020c 	orr.w	r2, r2, ip
 800874e:	f84a 2b04 	str.w	r2, [sl], #4
 8008752:	f853 2b04 	ldr.w	r2, [r3], #4
 8008756:	4298      	cmp	r0, r3
 8008758:	fa22 fc0e 	lsr.w	ip, r2, lr
 800875c:	d8f2      	bhi.n	8008744 <__lshift+0x70>
 800875e:	1b03      	subs	r3, r0, r4
 8008760:	3b15      	subs	r3, #21
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	3304      	adds	r3, #4
 8008768:	f104 0215 	add.w	r2, r4, #21
 800876c:	4290      	cmp	r0, r2
 800876e:	bf38      	it	cc
 8008770:	2304      	movcc	r3, #4
 8008772:	f841 c003 	str.w	ip, [r1, r3]
 8008776:	f1bc 0f00 	cmp.w	ip, #0
 800877a:	d001      	beq.n	8008780 <__lshift+0xac>
 800877c:	f108 0602 	add.w	r6, r8, #2
 8008780:	3e01      	subs	r6, #1
 8008782:	4638      	mov	r0, r7
 8008784:	612e      	str	r6, [r5, #16]
 8008786:	4621      	mov	r1, r4
 8008788:	f7ff fdd2 	bl	8008330 <_Bfree>
 800878c:	4628      	mov	r0, r5
 800878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008792:	f842 0f04 	str.w	r0, [r2, #4]!
 8008796:	3301      	adds	r3, #1
 8008798:	e7c1      	b.n	800871e <__lshift+0x4a>
 800879a:	3904      	subs	r1, #4
 800879c:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80087a4:	4298      	cmp	r0, r3
 80087a6:	d8f9      	bhi.n	800879c <__lshift+0xc8>
 80087a8:	e7ea      	b.n	8008780 <__lshift+0xac>
 80087aa:	bf00      	nop
 80087ac:	080099b7 	.word	0x080099b7
 80087b0:	080099c8 	.word	0x080099c8

080087b4 <__mcmp>:
 80087b4:	b530      	push	{r4, r5, lr}
 80087b6:	6902      	ldr	r2, [r0, #16]
 80087b8:	690c      	ldr	r4, [r1, #16]
 80087ba:	1b12      	subs	r2, r2, r4
 80087bc:	d10e      	bne.n	80087dc <__mcmp+0x28>
 80087be:	f100 0314 	add.w	r3, r0, #20
 80087c2:	3114      	adds	r1, #20
 80087c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087d4:	42a5      	cmp	r5, r4
 80087d6:	d003      	beq.n	80087e0 <__mcmp+0x2c>
 80087d8:	d305      	bcc.n	80087e6 <__mcmp+0x32>
 80087da:	2201      	movs	r2, #1
 80087dc:	4610      	mov	r0, r2
 80087de:	bd30      	pop	{r4, r5, pc}
 80087e0:	4283      	cmp	r3, r0
 80087e2:	d3f3      	bcc.n	80087cc <__mcmp+0x18>
 80087e4:	e7fa      	b.n	80087dc <__mcmp+0x28>
 80087e6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ea:	e7f7      	b.n	80087dc <__mcmp+0x28>

080087ec <__mdiff>:
 80087ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	460c      	mov	r4, r1
 80087f2:	4606      	mov	r6, r0
 80087f4:	4611      	mov	r1, r2
 80087f6:	4620      	mov	r0, r4
 80087f8:	4690      	mov	r8, r2
 80087fa:	f7ff ffdb 	bl	80087b4 <__mcmp>
 80087fe:	1e05      	subs	r5, r0, #0
 8008800:	d110      	bne.n	8008824 <__mdiff+0x38>
 8008802:	4629      	mov	r1, r5
 8008804:	4630      	mov	r0, r6
 8008806:	f7ff fd53 	bl	80082b0 <_Balloc>
 800880a:	b930      	cbnz	r0, 800881a <__mdiff+0x2e>
 800880c:	4b3a      	ldr	r3, [pc, #232]	; (80088f8 <__mdiff+0x10c>)
 800880e:	4602      	mov	r2, r0
 8008810:	f240 2132 	movw	r1, #562	; 0x232
 8008814:	4839      	ldr	r0, [pc, #228]	; (80088fc <__mdiff+0x110>)
 8008816:	f000 f9d5 	bl	8008bc4 <__assert_func>
 800881a:	2301      	movs	r3, #1
 800881c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008824:	bfa4      	itt	ge
 8008826:	4643      	movge	r3, r8
 8008828:	46a0      	movge	r8, r4
 800882a:	4630      	mov	r0, r6
 800882c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008830:	bfa6      	itte	ge
 8008832:	461c      	movge	r4, r3
 8008834:	2500      	movge	r5, #0
 8008836:	2501      	movlt	r5, #1
 8008838:	f7ff fd3a 	bl	80082b0 <_Balloc>
 800883c:	b920      	cbnz	r0, 8008848 <__mdiff+0x5c>
 800883e:	4b2e      	ldr	r3, [pc, #184]	; (80088f8 <__mdiff+0x10c>)
 8008840:	4602      	mov	r2, r0
 8008842:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008846:	e7e5      	b.n	8008814 <__mdiff+0x28>
 8008848:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800884c:	6926      	ldr	r6, [r4, #16]
 800884e:	60c5      	str	r5, [r0, #12]
 8008850:	f104 0914 	add.w	r9, r4, #20
 8008854:	f108 0514 	add.w	r5, r8, #20
 8008858:	f100 0e14 	add.w	lr, r0, #20
 800885c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008864:	f108 0210 	add.w	r2, r8, #16
 8008868:	46f2      	mov	sl, lr
 800886a:	2100      	movs	r1, #0
 800886c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008874:	fa1f f883 	uxth.w	r8, r3
 8008878:	fa11 f18b 	uxtah	r1, r1, fp
 800887c:	0c1b      	lsrs	r3, r3, #16
 800887e:	eba1 0808 	sub.w	r8, r1, r8
 8008882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800888a:	fa1f f888 	uxth.w	r8, r8
 800888e:	1419      	asrs	r1, r3, #16
 8008890:	454e      	cmp	r6, r9
 8008892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008896:	f84a 3b04 	str.w	r3, [sl], #4
 800889a:	d8e7      	bhi.n	800886c <__mdiff+0x80>
 800889c:	1b33      	subs	r3, r6, r4
 800889e:	3b15      	subs	r3, #21
 80088a0:	f023 0303 	bic.w	r3, r3, #3
 80088a4:	3304      	adds	r3, #4
 80088a6:	3415      	adds	r4, #21
 80088a8:	42a6      	cmp	r6, r4
 80088aa:	bf38      	it	cc
 80088ac:	2304      	movcc	r3, #4
 80088ae:	441d      	add	r5, r3
 80088b0:	4473      	add	r3, lr
 80088b2:	469e      	mov	lr, r3
 80088b4:	462e      	mov	r6, r5
 80088b6:	4566      	cmp	r6, ip
 80088b8:	d30e      	bcc.n	80088d8 <__mdiff+0xec>
 80088ba:	f10c 0203 	add.w	r2, ip, #3
 80088be:	1b52      	subs	r2, r2, r5
 80088c0:	f022 0203 	bic.w	r2, r2, #3
 80088c4:	3d03      	subs	r5, #3
 80088c6:	45ac      	cmp	ip, r5
 80088c8:	bf38      	it	cc
 80088ca:	2200      	movcc	r2, #0
 80088cc:	441a      	add	r2, r3
 80088ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088d2:	b17b      	cbz	r3, 80088f4 <__mdiff+0x108>
 80088d4:	6107      	str	r7, [r0, #16]
 80088d6:	e7a3      	b.n	8008820 <__mdiff+0x34>
 80088d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80088dc:	fa11 f288 	uxtah	r2, r1, r8
 80088e0:	1414      	asrs	r4, r2, #16
 80088e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088e6:	b292      	uxth	r2, r2
 80088e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088ec:	f84e 2b04 	str.w	r2, [lr], #4
 80088f0:	1421      	asrs	r1, r4, #16
 80088f2:	e7e0      	b.n	80088b6 <__mdiff+0xca>
 80088f4:	3f01      	subs	r7, #1
 80088f6:	e7ea      	b.n	80088ce <__mdiff+0xe2>
 80088f8:	080099b7 	.word	0x080099b7
 80088fc:	080099c8 	.word	0x080099c8

08008900 <__d2b>:
 8008900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008904:	4689      	mov	r9, r1
 8008906:	2101      	movs	r1, #1
 8008908:	ec57 6b10 	vmov	r6, r7, d0
 800890c:	4690      	mov	r8, r2
 800890e:	f7ff fccf 	bl	80082b0 <_Balloc>
 8008912:	4604      	mov	r4, r0
 8008914:	b930      	cbnz	r0, 8008924 <__d2b+0x24>
 8008916:	4602      	mov	r2, r0
 8008918:	4b25      	ldr	r3, [pc, #148]	; (80089b0 <__d2b+0xb0>)
 800891a:	4826      	ldr	r0, [pc, #152]	; (80089b4 <__d2b+0xb4>)
 800891c:	f240 310a 	movw	r1, #778	; 0x30a
 8008920:	f000 f950 	bl	8008bc4 <__assert_func>
 8008924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800892c:	bb35      	cbnz	r5, 800897c <__d2b+0x7c>
 800892e:	2e00      	cmp	r6, #0
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	d028      	beq.n	8008986 <__d2b+0x86>
 8008934:	4668      	mov	r0, sp
 8008936:	9600      	str	r6, [sp, #0]
 8008938:	f7ff fd82 	bl	8008440 <__lo0bits>
 800893c:	9900      	ldr	r1, [sp, #0]
 800893e:	b300      	cbz	r0, 8008982 <__d2b+0x82>
 8008940:	9a01      	ldr	r2, [sp, #4]
 8008942:	f1c0 0320 	rsb	r3, r0, #32
 8008946:	fa02 f303 	lsl.w	r3, r2, r3
 800894a:	430b      	orrs	r3, r1
 800894c:	40c2      	lsrs	r2, r0
 800894e:	6163      	str	r3, [r4, #20]
 8008950:	9201      	str	r2, [sp, #4]
 8008952:	9b01      	ldr	r3, [sp, #4]
 8008954:	61a3      	str	r3, [r4, #24]
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf14      	ite	ne
 800895a:	2202      	movne	r2, #2
 800895c:	2201      	moveq	r2, #1
 800895e:	6122      	str	r2, [r4, #16]
 8008960:	b1d5      	cbz	r5, 8008998 <__d2b+0x98>
 8008962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008966:	4405      	add	r5, r0
 8008968:	f8c9 5000 	str.w	r5, [r9]
 800896c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008970:	f8c8 0000 	str.w	r0, [r8]
 8008974:	4620      	mov	r0, r4
 8008976:	b003      	add	sp, #12
 8008978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800897c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008980:	e7d5      	b.n	800892e <__d2b+0x2e>
 8008982:	6161      	str	r1, [r4, #20]
 8008984:	e7e5      	b.n	8008952 <__d2b+0x52>
 8008986:	a801      	add	r0, sp, #4
 8008988:	f7ff fd5a 	bl	8008440 <__lo0bits>
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	6163      	str	r3, [r4, #20]
 8008990:	2201      	movs	r2, #1
 8008992:	6122      	str	r2, [r4, #16]
 8008994:	3020      	adds	r0, #32
 8008996:	e7e3      	b.n	8008960 <__d2b+0x60>
 8008998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800899c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089a0:	f8c9 0000 	str.w	r0, [r9]
 80089a4:	6918      	ldr	r0, [r3, #16]
 80089a6:	f7ff fd2b 	bl	8008400 <__hi0bits>
 80089aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089ae:	e7df      	b.n	8008970 <__d2b+0x70>
 80089b0:	080099b7 	.word	0x080099b7
 80089b4:	080099c8 	.word	0x080099c8

080089b8 <_calloc_r>:
 80089b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ba:	fba1 2402 	umull	r2, r4, r1, r2
 80089be:	b94c      	cbnz	r4, 80089d4 <_calloc_r+0x1c>
 80089c0:	4611      	mov	r1, r2
 80089c2:	9201      	str	r2, [sp, #4]
 80089c4:	f000 f87a 	bl	8008abc <_malloc_r>
 80089c8:	9a01      	ldr	r2, [sp, #4]
 80089ca:	4605      	mov	r5, r0
 80089cc:	b930      	cbnz	r0, 80089dc <_calloc_r+0x24>
 80089ce:	4628      	mov	r0, r5
 80089d0:	b003      	add	sp, #12
 80089d2:	bd30      	pop	{r4, r5, pc}
 80089d4:	220c      	movs	r2, #12
 80089d6:	6002      	str	r2, [r0, #0]
 80089d8:	2500      	movs	r5, #0
 80089da:	e7f8      	b.n	80089ce <_calloc_r+0x16>
 80089dc:	4621      	mov	r1, r4
 80089de:	f7fe f961 	bl	8006ca4 <memset>
 80089e2:	e7f4      	b.n	80089ce <_calloc_r+0x16>

080089e4 <_free_r>:
 80089e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e6:	2900      	cmp	r1, #0
 80089e8:	d044      	beq.n	8008a74 <_free_r+0x90>
 80089ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ee:	9001      	str	r0, [sp, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f1a1 0404 	sub.w	r4, r1, #4
 80089f6:	bfb8      	it	lt
 80089f8:	18e4      	addlt	r4, r4, r3
 80089fa:	f000 f925 	bl	8008c48 <__malloc_lock>
 80089fe:	4a1e      	ldr	r2, [pc, #120]	; (8008a78 <_free_r+0x94>)
 8008a00:	9801      	ldr	r0, [sp, #4]
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	b933      	cbnz	r3, 8008a14 <_free_r+0x30>
 8008a06:	6063      	str	r3, [r4, #4]
 8008a08:	6014      	str	r4, [r2, #0]
 8008a0a:	b003      	add	sp, #12
 8008a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a10:	f000 b920 	b.w	8008c54 <__malloc_unlock>
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d908      	bls.n	8008a2a <_free_r+0x46>
 8008a18:	6825      	ldr	r5, [r4, #0]
 8008a1a:	1961      	adds	r1, r4, r5
 8008a1c:	428b      	cmp	r3, r1
 8008a1e:	bf01      	itttt	eq
 8008a20:	6819      	ldreq	r1, [r3, #0]
 8008a22:	685b      	ldreq	r3, [r3, #4]
 8008a24:	1949      	addeq	r1, r1, r5
 8008a26:	6021      	streq	r1, [r4, #0]
 8008a28:	e7ed      	b.n	8008a06 <_free_r+0x22>
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b10b      	cbz	r3, 8008a34 <_free_r+0x50>
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	d9fa      	bls.n	8008a2a <_free_r+0x46>
 8008a34:	6811      	ldr	r1, [r2, #0]
 8008a36:	1855      	adds	r5, r2, r1
 8008a38:	42a5      	cmp	r5, r4
 8008a3a:	d10b      	bne.n	8008a54 <_free_r+0x70>
 8008a3c:	6824      	ldr	r4, [r4, #0]
 8008a3e:	4421      	add	r1, r4
 8008a40:	1854      	adds	r4, r2, r1
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	6011      	str	r1, [r2, #0]
 8008a46:	d1e0      	bne.n	8008a0a <_free_r+0x26>
 8008a48:	681c      	ldr	r4, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	6053      	str	r3, [r2, #4]
 8008a4e:	4421      	add	r1, r4
 8008a50:	6011      	str	r1, [r2, #0]
 8008a52:	e7da      	b.n	8008a0a <_free_r+0x26>
 8008a54:	d902      	bls.n	8008a5c <_free_r+0x78>
 8008a56:	230c      	movs	r3, #12
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	e7d6      	b.n	8008a0a <_free_r+0x26>
 8008a5c:	6825      	ldr	r5, [r4, #0]
 8008a5e:	1961      	adds	r1, r4, r5
 8008a60:	428b      	cmp	r3, r1
 8008a62:	bf04      	itt	eq
 8008a64:	6819      	ldreq	r1, [r3, #0]
 8008a66:	685b      	ldreq	r3, [r3, #4]
 8008a68:	6063      	str	r3, [r4, #4]
 8008a6a:	bf04      	itt	eq
 8008a6c:	1949      	addeq	r1, r1, r5
 8008a6e:	6021      	streq	r1, [r4, #0]
 8008a70:	6054      	str	r4, [r2, #4]
 8008a72:	e7ca      	b.n	8008a0a <_free_r+0x26>
 8008a74:	b003      	add	sp, #12
 8008a76:	bd30      	pop	{r4, r5, pc}
 8008a78:	20002544 	.word	0x20002544

08008a7c <sbrk_aligned>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4e0e      	ldr	r6, [pc, #56]	; (8008ab8 <sbrk_aligned+0x3c>)
 8008a80:	460c      	mov	r4, r1
 8008a82:	6831      	ldr	r1, [r6, #0]
 8008a84:	4605      	mov	r5, r0
 8008a86:	b911      	cbnz	r1, 8008a8e <sbrk_aligned+0x12>
 8008a88:	f000 f88c 	bl	8008ba4 <_sbrk_r>
 8008a8c:	6030      	str	r0, [r6, #0]
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 f887 	bl	8008ba4 <_sbrk_r>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d00a      	beq.n	8008ab0 <sbrk_aligned+0x34>
 8008a9a:	1cc4      	adds	r4, r0, #3
 8008a9c:	f024 0403 	bic.w	r4, r4, #3
 8008aa0:	42a0      	cmp	r0, r4
 8008aa2:	d007      	beq.n	8008ab4 <sbrk_aligned+0x38>
 8008aa4:	1a21      	subs	r1, r4, r0
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f87c 	bl	8008ba4 <_sbrk_r>
 8008aac:	3001      	adds	r0, #1
 8008aae:	d101      	bne.n	8008ab4 <sbrk_aligned+0x38>
 8008ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	20002548 	.word	0x20002548

08008abc <_malloc_r>:
 8008abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac0:	1ccd      	adds	r5, r1, #3
 8008ac2:	f025 0503 	bic.w	r5, r5, #3
 8008ac6:	3508      	adds	r5, #8
 8008ac8:	2d0c      	cmp	r5, #12
 8008aca:	bf38      	it	cc
 8008acc:	250c      	movcc	r5, #12
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	db01      	blt.n	8008ad8 <_malloc_r+0x1c>
 8008ad4:	42a9      	cmp	r1, r5
 8008ad6:	d905      	bls.n	8008ae4 <_malloc_r+0x28>
 8008ad8:	230c      	movs	r3, #12
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	2600      	movs	r6, #0
 8008ade:	4630      	mov	r0, r6
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	4e2e      	ldr	r6, [pc, #184]	; (8008ba0 <_malloc_r+0xe4>)
 8008ae6:	f000 f8af 	bl	8008c48 <__malloc_lock>
 8008aea:	6833      	ldr	r3, [r6, #0]
 8008aec:	461c      	mov	r4, r3
 8008aee:	bb34      	cbnz	r4, 8008b3e <_malloc_r+0x82>
 8008af0:	4629      	mov	r1, r5
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ffc2 	bl	8008a7c <sbrk_aligned>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	4604      	mov	r4, r0
 8008afc:	d14d      	bne.n	8008b9a <_malloc_r+0xde>
 8008afe:	6834      	ldr	r4, [r6, #0]
 8008b00:	4626      	mov	r6, r4
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	d140      	bne.n	8008b88 <_malloc_r+0xcc>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	eb04 0803 	add.w	r8, r4, r3
 8008b10:	f000 f848 	bl	8008ba4 <_sbrk_r>
 8008b14:	4580      	cmp	r8, r0
 8008b16:	d13a      	bne.n	8008b8e <_malloc_r+0xd2>
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	3503      	adds	r5, #3
 8008b1c:	1a6d      	subs	r5, r5, r1
 8008b1e:	f025 0503 	bic.w	r5, r5, #3
 8008b22:	3508      	adds	r5, #8
 8008b24:	2d0c      	cmp	r5, #12
 8008b26:	bf38      	it	cc
 8008b28:	250c      	movcc	r5, #12
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff ffa5 	bl	8008a7c <sbrk_aligned>
 8008b32:	3001      	adds	r0, #1
 8008b34:	d02b      	beq.n	8008b8e <_malloc_r+0xd2>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	442b      	add	r3, r5
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	e00e      	b.n	8008b5c <_malloc_r+0xa0>
 8008b3e:	6822      	ldr	r2, [r4, #0]
 8008b40:	1b52      	subs	r2, r2, r5
 8008b42:	d41e      	bmi.n	8008b82 <_malloc_r+0xc6>
 8008b44:	2a0b      	cmp	r2, #11
 8008b46:	d916      	bls.n	8008b76 <_malloc_r+0xba>
 8008b48:	1961      	adds	r1, r4, r5
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	6025      	str	r5, [r4, #0]
 8008b4e:	bf18      	it	ne
 8008b50:	6059      	strne	r1, [r3, #4]
 8008b52:	6863      	ldr	r3, [r4, #4]
 8008b54:	bf08      	it	eq
 8008b56:	6031      	streq	r1, [r6, #0]
 8008b58:	5162      	str	r2, [r4, r5]
 8008b5a:	604b      	str	r3, [r1, #4]
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f104 060b 	add.w	r6, r4, #11
 8008b62:	f000 f877 	bl	8008c54 <__malloc_unlock>
 8008b66:	f026 0607 	bic.w	r6, r6, #7
 8008b6a:	1d23      	adds	r3, r4, #4
 8008b6c:	1af2      	subs	r2, r6, r3
 8008b6e:	d0b6      	beq.n	8008ade <_malloc_r+0x22>
 8008b70:	1b9b      	subs	r3, r3, r6
 8008b72:	50a3      	str	r3, [r4, r2]
 8008b74:	e7b3      	b.n	8008ade <_malloc_r+0x22>
 8008b76:	6862      	ldr	r2, [r4, #4]
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	bf0c      	ite	eq
 8008b7c:	6032      	streq	r2, [r6, #0]
 8008b7e:	605a      	strne	r2, [r3, #4]
 8008b80:	e7ec      	b.n	8008b5c <_malloc_r+0xa0>
 8008b82:	4623      	mov	r3, r4
 8008b84:	6864      	ldr	r4, [r4, #4]
 8008b86:	e7b2      	b.n	8008aee <_malloc_r+0x32>
 8008b88:	4634      	mov	r4, r6
 8008b8a:	6876      	ldr	r6, [r6, #4]
 8008b8c:	e7b9      	b.n	8008b02 <_malloc_r+0x46>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	603b      	str	r3, [r7, #0]
 8008b92:	4638      	mov	r0, r7
 8008b94:	f000 f85e 	bl	8008c54 <__malloc_unlock>
 8008b98:	e7a1      	b.n	8008ade <_malloc_r+0x22>
 8008b9a:	6025      	str	r5, [r4, #0]
 8008b9c:	e7de      	b.n	8008b5c <_malloc_r+0xa0>
 8008b9e:	bf00      	nop
 8008ba0:	20002544 	.word	0x20002544

08008ba4 <_sbrk_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d06      	ldr	r5, [pc, #24]	; (8008bc0 <_sbrk_r+0x1c>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	602b      	str	r3, [r5, #0]
 8008bb0:	f7f9 fa40 	bl	8002034 <_sbrk>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_sbrk_r+0x1a>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_sbrk_r+0x1a>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	2000254c 	.word	0x2000254c

08008bc4 <__assert_func>:
 8008bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bc6:	4614      	mov	r4, r2
 8008bc8:	461a      	mov	r2, r3
 8008bca:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <__assert_func+0x2c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4605      	mov	r5, r0
 8008bd0:	68d8      	ldr	r0, [r3, #12]
 8008bd2:	b14c      	cbz	r4, 8008be8 <__assert_func+0x24>
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <__assert_func+0x30>)
 8008bd6:	9100      	str	r1, [sp, #0]
 8008bd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bdc:	4906      	ldr	r1, [pc, #24]	; (8008bf8 <__assert_func+0x34>)
 8008bde:	462b      	mov	r3, r5
 8008be0:	f000 f80e 	bl	8008c00 <fiprintf>
 8008be4:	f000 fa64 	bl	80090b0 <abort>
 8008be8:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <__assert_func+0x38>)
 8008bea:	461c      	mov	r4, r3
 8008bec:	e7f3      	b.n	8008bd6 <__assert_func+0x12>
 8008bee:	bf00      	nop
 8008bf0:	2000060c 	.word	0x2000060c
 8008bf4:	08009b24 	.word	0x08009b24
 8008bf8:	08009b31 	.word	0x08009b31
 8008bfc:	08009b5f 	.word	0x08009b5f

08008c00 <fiprintf>:
 8008c00:	b40e      	push	{r1, r2, r3}
 8008c02:	b503      	push	{r0, r1, lr}
 8008c04:	4601      	mov	r1, r0
 8008c06:	ab03      	add	r3, sp, #12
 8008c08:	4805      	ldr	r0, [pc, #20]	; (8008c20 <fiprintf+0x20>)
 8008c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c0e:	6800      	ldr	r0, [r0, #0]
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	f000 f84f 	bl	8008cb4 <_vfiprintf_r>
 8008c16:	b002      	add	sp, #8
 8008c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c1c:	b003      	add	sp, #12
 8008c1e:	4770      	bx	lr
 8008c20:	2000060c 	.word	0x2000060c

08008c24 <__ascii_mbtowc>:
 8008c24:	b082      	sub	sp, #8
 8008c26:	b901      	cbnz	r1, 8008c2a <__ascii_mbtowc+0x6>
 8008c28:	a901      	add	r1, sp, #4
 8008c2a:	b142      	cbz	r2, 8008c3e <__ascii_mbtowc+0x1a>
 8008c2c:	b14b      	cbz	r3, 8008c42 <__ascii_mbtowc+0x1e>
 8008c2e:	7813      	ldrb	r3, [r2, #0]
 8008c30:	600b      	str	r3, [r1, #0]
 8008c32:	7812      	ldrb	r2, [r2, #0]
 8008c34:	1e10      	subs	r0, r2, #0
 8008c36:	bf18      	it	ne
 8008c38:	2001      	movne	r0, #1
 8008c3a:	b002      	add	sp, #8
 8008c3c:	4770      	bx	lr
 8008c3e:	4610      	mov	r0, r2
 8008c40:	e7fb      	b.n	8008c3a <__ascii_mbtowc+0x16>
 8008c42:	f06f 0001 	mvn.w	r0, #1
 8008c46:	e7f8      	b.n	8008c3a <__ascii_mbtowc+0x16>

08008c48 <__malloc_lock>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__malloc_lock+0x8>)
 8008c4a:	f000 bbf1 	b.w	8009430 <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	20002550 	.word	0x20002550

08008c54 <__malloc_unlock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__malloc_unlock+0x8>)
 8008c56:	f000 bbec 	b.w	8009432 <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	20002550 	.word	0x20002550

08008c60 <__sfputc_r>:
 8008c60:	6893      	ldr	r3, [r2, #8]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	b410      	push	{r4}
 8008c68:	6093      	str	r3, [r2, #8]
 8008c6a:	da08      	bge.n	8008c7e <__sfputc_r+0x1e>
 8008c6c:	6994      	ldr	r4, [r2, #24]
 8008c6e:	42a3      	cmp	r3, r4
 8008c70:	db01      	blt.n	8008c76 <__sfputc_r+0x16>
 8008c72:	290a      	cmp	r1, #10
 8008c74:	d103      	bne.n	8008c7e <__sfputc_r+0x1e>
 8008c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c7a:	f000 b94b 	b.w	8008f14 <__swbuf_r>
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	1c58      	adds	r0, r3, #1
 8008c82:	6010      	str	r0, [r2, #0]
 8008c84:	7019      	strb	r1, [r3, #0]
 8008c86:	4608      	mov	r0, r1
 8008c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <__sfputs_r>:
 8008c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c90:	4606      	mov	r6, r0
 8008c92:	460f      	mov	r7, r1
 8008c94:	4614      	mov	r4, r2
 8008c96:	18d5      	adds	r5, r2, r3
 8008c98:	42ac      	cmp	r4, r5
 8008c9a:	d101      	bne.n	8008ca0 <__sfputs_r+0x12>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e007      	b.n	8008cb0 <__sfputs_r+0x22>
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	463a      	mov	r2, r7
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff ffda 	bl	8008c60 <__sfputc_r>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d1f3      	bne.n	8008c98 <__sfputs_r+0xa>
 8008cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cb4 <_vfiprintf_r>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	460d      	mov	r5, r1
 8008cba:	b09d      	sub	sp, #116	; 0x74
 8008cbc:	4614      	mov	r4, r2
 8008cbe:	4698      	mov	r8, r3
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	b118      	cbz	r0, 8008ccc <_vfiprintf_r+0x18>
 8008cc4:	6983      	ldr	r3, [r0, #24]
 8008cc6:	b90b      	cbnz	r3, 8008ccc <_vfiprintf_r+0x18>
 8008cc8:	f000 fb14 	bl	80092f4 <__sinit>
 8008ccc:	4b89      	ldr	r3, [pc, #548]	; (8008ef4 <_vfiprintf_r+0x240>)
 8008cce:	429d      	cmp	r5, r3
 8008cd0:	d11b      	bne.n	8008d0a <_vfiprintf_r+0x56>
 8008cd2:	6875      	ldr	r5, [r6, #4]
 8008cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cd6:	07d9      	lsls	r1, r3, #31
 8008cd8:	d405      	bmi.n	8008ce6 <_vfiprintf_r+0x32>
 8008cda:	89ab      	ldrh	r3, [r5, #12]
 8008cdc:	059a      	lsls	r2, r3, #22
 8008cde:	d402      	bmi.n	8008ce6 <_vfiprintf_r+0x32>
 8008ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ce2:	f000 fba5 	bl	8009430 <__retarget_lock_acquire_recursive>
 8008ce6:	89ab      	ldrh	r3, [r5, #12]
 8008ce8:	071b      	lsls	r3, r3, #28
 8008cea:	d501      	bpl.n	8008cf0 <_vfiprintf_r+0x3c>
 8008cec:	692b      	ldr	r3, [r5, #16]
 8008cee:	b9eb      	cbnz	r3, 8008d2c <_vfiprintf_r+0x78>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f000 f96e 	bl	8008fd4 <__swsetup_r>
 8008cf8:	b1c0      	cbz	r0, 8008d2c <_vfiprintf_r+0x78>
 8008cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cfc:	07dc      	lsls	r4, r3, #31
 8008cfe:	d50e      	bpl.n	8008d1e <_vfiprintf_r+0x6a>
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	b01d      	add	sp, #116	; 0x74
 8008d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0a:	4b7b      	ldr	r3, [pc, #492]	; (8008ef8 <_vfiprintf_r+0x244>)
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	d101      	bne.n	8008d14 <_vfiprintf_r+0x60>
 8008d10:	68b5      	ldr	r5, [r6, #8]
 8008d12:	e7df      	b.n	8008cd4 <_vfiprintf_r+0x20>
 8008d14:	4b79      	ldr	r3, [pc, #484]	; (8008efc <_vfiprintf_r+0x248>)
 8008d16:	429d      	cmp	r5, r3
 8008d18:	bf08      	it	eq
 8008d1a:	68f5      	ldreq	r5, [r6, #12]
 8008d1c:	e7da      	b.n	8008cd4 <_vfiprintf_r+0x20>
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	0598      	lsls	r0, r3, #22
 8008d22:	d4ed      	bmi.n	8008d00 <_vfiprintf_r+0x4c>
 8008d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d26:	f000 fb84 	bl	8009432 <__retarget_lock_release_recursive>
 8008d2a:	e7e9      	b.n	8008d00 <_vfiprintf_r+0x4c>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d30:	2320      	movs	r3, #32
 8008d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d3a:	2330      	movs	r3, #48	; 0x30
 8008d3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f00 <_vfiprintf_r+0x24c>
 8008d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d44:	f04f 0901 	mov.w	r9, #1
 8008d48:	4623      	mov	r3, r4
 8008d4a:	469a      	mov	sl, r3
 8008d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d50:	b10a      	cbz	r2, 8008d56 <_vfiprintf_r+0xa2>
 8008d52:	2a25      	cmp	r2, #37	; 0x25
 8008d54:	d1f9      	bne.n	8008d4a <_vfiprintf_r+0x96>
 8008d56:	ebba 0b04 	subs.w	fp, sl, r4
 8008d5a:	d00b      	beq.n	8008d74 <_vfiprintf_r+0xc0>
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ff93 	bl	8008c8e <__sfputs_r>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	f000 80aa 	beq.w	8008ec2 <_vfiprintf_r+0x20e>
 8008d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d70:	445a      	add	r2, fp
 8008d72:	9209      	str	r2, [sp, #36]	; 0x24
 8008d74:	f89a 3000 	ldrb.w	r3, [sl]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 80a2 	beq.w	8008ec2 <_vfiprintf_r+0x20e>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d88:	f10a 0a01 	add.w	sl, sl, #1
 8008d8c:	9304      	str	r3, [sp, #16]
 8008d8e:	9307      	str	r3, [sp, #28]
 8008d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d94:	931a      	str	r3, [sp, #104]	; 0x68
 8008d96:	4654      	mov	r4, sl
 8008d98:	2205      	movs	r2, #5
 8008d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9e:	4858      	ldr	r0, [pc, #352]	; (8008f00 <_vfiprintf_r+0x24c>)
 8008da0:	f7f7 fa2e 	bl	8000200 <memchr>
 8008da4:	9a04      	ldr	r2, [sp, #16]
 8008da6:	b9d8      	cbnz	r0, 8008de0 <_vfiprintf_r+0x12c>
 8008da8:	06d1      	lsls	r1, r2, #27
 8008daa:	bf44      	itt	mi
 8008dac:	2320      	movmi	r3, #32
 8008dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db2:	0713      	lsls	r3, r2, #28
 8008db4:	bf44      	itt	mi
 8008db6:	232b      	movmi	r3, #43	; 0x2b
 8008db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc2:	d015      	beq.n	8008df0 <_vfiprintf_r+0x13c>
 8008dc4:	9a07      	ldr	r2, [sp, #28]
 8008dc6:	4654      	mov	r4, sl
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f04f 0c0a 	mov.w	ip, #10
 8008dce:	4621      	mov	r1, r4
 8008dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd4:	3b30      	subs	r3, #48	; 0x30
 8008dd6:	2b09      	cmp	r3, #9
 8008dd8:	d94e      	bls.n	8008e78 <_vfiprintf_r+0x1c4>
 8008dda:	b1b0      	cbz	r0, 8008e0a <_vfiprintf_r+0x156>
 8008ddc:	9207      	str	r2, [sp, #28]
 8008dde:	e014      	b.n	8008e0a <_vfiprintf_r+0x156>
 8008de0:	eba0 0308 	sub.w	r3, r0, r8
 8008de4:	fa09 f303 	lsl.w	r3, r9, r3
 8008de8:	4313      	orrs	r3, r2
 8008dea:	9304      	str	r3, [sp, #16]
 8008dec:	46a2      	mov	sl, r4
 8008dee:	e7d2      	b.n	8008d96 <_vfiprintf_r+0xe2>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	1d19      	adds	r1, r3, #4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	9103      	str	r1, [sp, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bfbb      	ittet	lt
 8008dfc:	425b      	neglt	r3, r3
 8008dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8008e02:	9307      	strge	r3, [sp, #28]
 8008e04:	9307      	strlt	r3, [sp, #28]
 8008e06:	bfb8      	it	lt
 8008e08:	9204      	strlt	r2, [sp, #16]
 8008e0a:	7823      	ldrb	r3, [r4, #0]
 8008e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e0e:	d10c      	bne.n	8008e2a <_vfiprintf_r+0x176>
 8008e10:	7863      	ldrb	r3, [r4, #1]
 8008e12:	2b2a      	cmp	r3, #42	; 0x2a
 8008e14:	d135      	bne.n	8008e82 <_vfiprintf_r+0x1ce>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	1d1a      	adds	r2, r3, #4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	9203      	str	r2, [sp, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bfb8      	it	lt
 8008e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e26:	3402      	adds	r4, #2
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f10 <_vfiprintf_r+0x25c>
 8008e2e:	7821      	ldrb	r1, [r4, #0]
 8008e30:	2203      	movs	r2, #3
 8008e32:	4650      	mov	r0, sl
 8008e34:	f7f7 f9e4 	bl	8000200 <memchr>
 8008e38:	b140      	cbz	r0, 8008e4c <_vfiprintf_r+0x198>
 8008e3a:	2340      	movs	r3, #64	; 0x40
 8008e3c:	eba0 000a 	sub.w	r0, r0, sl
 8008e40:	fa03 f000 	lsl.w	r0, r3, r0
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	4303      	orrs	r3, r0
 8008e48:	3401      	adds	r4, #1
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e50:	482c      	ldr	r0, [pc, #176]	; (8008f04 <_vfiprintf_r+0x250>)
 8008e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e56:	2206      	movs	r2, #6
 8008e58:	f7f7 f9d2 	bl	8000200 <memchr>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d03f      	beq.n	8008ee0 <_vfiprintf_r+0x22c>
 8008e60:	4b29      	ldr	r3, [pc, #164]	; (8008f08 <_vfiprintf_r+0x254>)
 8008e62:	bb1b      	cbnz	r3, 8008eac <_vfiprintf_r+0x1f8>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	3307      	adds	r3, #7
 8008e68:	f023 0307 	bic.w	r3, r3, #7
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	9303      	str	r3, [sp, #12]
 8008e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e72:	443b      	add	r3, r7
 8008e74:	9309      	str	r3, [sp, #36]	; 0x24
 8008e76:	e767      	b.n	8008d48 <_vfiprintf_r+0x94>
 8008e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	2001      	movs	r0, #1
 8008e80:	e7a5      	b.n	8008dce <_vfiprintf_r+0x11a>
 8008e82:	2300      	movs	r3, #0
 8008e84:	3401      	adds	r4, #1
 8008e86:	9305      	str	r3, [sp, #20]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f04f 0c0a 	mov.w	ip, #10
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e94:	3a30      	subs	r2, #48	; 0x30
 8008e96:	2a09      	cmp	r2, #9
 8008e98:	d903      	bls.n	8008ea2 <_vfiprintf_r+0x1ee>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0c5      	beq.n	8008e2a <_vfiprintf_r+0x176>
 8008e9e:	9105      	str	r1, [sp, #20]
 8008ea0:	e7c3      	b.n	8008e2a <_vfiprintf_r+0x176>
 8008ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e7f0      	b.n	8008e8e <_vfiprintf_r+0x1da>
 8008eac:	ab03      	add	r3, sp, #12
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	462a      	mov	r2, r5
 8008eb2:	4b16      	ldr	r3, [pc, #88]	; (8008f0c <_vfiprintf_r+0x258>)
 8008eb4:	a904      	add	r1, sp, #16
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7fd ff9c 	bl	8006df4 <_printf_float>
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	1c78      	adds	r0, r7, #1
 8008ec0:	d1d6      	bne.n	8008e70 <_vfiprintf_r+0x1bc>
 8008ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec4:	07d9      	lsls	r1, r3, #31
 8008ec6:	d405      	bmi.n	8008ed4 <_vfiprintf_r+0x220>
 8008ec8:	89ab      	ldrh	r3, [r5, #12]
 8008eca:	059a      	lsls	r2, r3, #22
 8008ecc:	d402      	bmi.n	8008ed4 <_vfiprintf_r+0x220>
 8008ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed0:	f000 faaf 	bl	8009432 <__retarget_lock_release_recursive>
 8008ed4:	89ab      	ldrh	r3, [r5, #12]
 8008ed6:	065b      	lsls	r3, r3, #25
 8008ed8:	f53f af12 	bmi.w	8008d00 <_vfiprintf_r+0x4c>
 8008edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ede:	e711      	b.n	8008d04 <_vfiprintf_r+0x50>
 8008ee0:	ab03      	add	r3, sp, #12
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	462a      	mov	r2, r5
 8008ee6:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <_vfiprintf_r+0x258>)
 8008ee8:	a904      	add	r1, sp, #16
 8008eea:	4630      	mov	r0, r6
 8008eec:	f7fe fa26 	bl	800733c <_printf_i>
 8008ef0:	e7e4      	b.n	8008ebc <_vfiprintf_r+0x208>
 8008ef2:	bf00      	nop
 8008ef4:	08009c9c 	.word	0x08009c9c
 8008ef8:	08009cbc 	.word	0x08009cbc
 8008efc:	08009c7c 	.word	0x08009c7c
 8008f00:	08009b6a 	.word	0x08009b6a
 8008f04:	08009b74 	.word	0x08009b74
 8008f08:	08006df5 	.word	0x08006df5
 8008f0c:	08008c8f 	.word	0x08008c8f
 8008f10:	08009b70 	.word	0x08009b70

08008f14 <__swbuf_r>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	460e      	mov	r6, r1
 8008f18:	4614      	mov	r4, r2
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	b118      	cbz	r0, 8008f26 <__swbuf_r+0x12>
 8008f1e:	6983      	ldr	r3, [r0, #24]
 8008f20:	b90b      	cbnz	r3, 8008f26 <__swbuf_r+0x12>
 8008f22:	f000 f9e7 	bl	80092f4 <__sinit>
 8008f26:	4b21      	ldr	r3, [pc, #132]	; (8008fac <__swbuf_r+0x98>)
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	d12b      	bne.n	8008f84 <__swbuf_r+0x70>
 8008f2c:	686c      	ldr	r4, [r5, #4]
 8008f2e:	69a3      	ldr	r3, [r4, #24]
 8008f30:	60a3      	str	r3, [r4, #8]
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	071a      	lsls	r2, r3, #28
 8008f36:	d52f      	bpl.n	8008f98 <__swbuf_r+0x84>
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	b36b      	cbz	r3, 8008f98 <__swbuf_r+0x84>
 8008f3c:	6923      	ldr	r3, [r4, #16]
 8008f3e:	6820      	ldr	r0, [r4, #0]
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	6963      	ldr	r3, [r4, #20]
 8008f44:	b2f6      	uxtb	r6, r6
 8008f46:	4283      	cmp	r3, r0
 8008f48:	4637      	mov	r7, r6
 8008f4a:	dc04      	bgt.n	8008f56 <__swbuf_r+0x42>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 f93c 	bl	80091cc <_fflush_r>
 8008f54:	bb30      	cbnz	r0, 8008fa4 <__swbuf_r+0x90>
 8008f56:	68a3      	ldr	r3, [r4, #8]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	60a3      	str	r3, [r4, #8]
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	701e      	strb	r6, [r3, #0]
 8008f64:	6963      	ldr	r3, [r4, #20]
 8008f66:	3001      	adds	r0, #1
 8008f68:	4283      	cmp	r3, r0
 8008f6a:	d004      	beq.n	8008f76 <__swbuf_r+0x62>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	07db      	lsls	r3, r3, #31
 8008f70:	d506      	bpl.n	8008f80 <__swbuf_r+0x6c>
 8008f72:	2e0a      	cmp	r6, #10
 8008f74:	d104      	bne.n	8008f80 <__swbuf_r+0x6c>
 8008f76:	4621      	mov	r1, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f000 f927 	bl	80091cc <_fflush_r>
 8008f7e:	b988      	cbnz	r0, 8008fa4 <__swbuf_r+0x90>
 8008f80:	4638      	mov	r0, r7
 8008f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f84:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <__swbuf_r+0x9c>)
 8008f86:	429c      	cmp	r4, r3
 8008f88:	d101      	bne.n	8008f8e <__swbuf_r+0x7a>
 8008f8a:	68ac      	ldr	r4, [r5, #8]
 8008f8c:	e7cf      	b.n	8008f2e <__swbuf_r+0x1a>
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <__swbuf_r+0xa0>)
 8008f90:	429c      	cmp	r4, r3
 8008f92:	bf08      	it	eq
 8008f94:	68ec      	ldreq	r4, [r5, #12]
 8008f96:	e7ca      	b.n	8008f2e <__swbuf_r+0x1a>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 f81a 	bl	8008fd4 <__swsetup_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d0cb      	beq.n	8008f3c <__swbuf_r+0x28>
 8008fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fa8:	e7ea      	b.n	8008f80 <__swbuf_r+0x6c>
 8008faa:	bf00      	nop
 8008fac:	08009c9c 	.word	0x08009c9c
 8008fb0:	08009cbc 	.word	0x08009cbc
 8008fb4:	08009c7c 	.word	0x08009c7c

08008fb8 <__ascii_wctomb>:
 8008fb8:	b149      	cbz	r1, 8008fce <__ascii_wctomb+0x16>
 8008fba:	2aff      	cmp	r2, #255	; 0xff
 8008fbc:	bf85      	ittet	hi
 8008fbe:	238a      	movhi	r3, #138	; 0x8a
 8008fc0:	6003      	strhi	r3, [r0, #0]
 8008fc2:	700a      	strbls	r2, [r1, #0]
 8008fc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fc8:	bf98      	it	ls
 8008fca:	2001      	movls	r0, #1
 8008fcc:	4770      	bx	lr
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4770      	bx	lr
	...

08008fd4 <__swsetup_r>:
 8008fd4:	4b32      	ldr	r3, [pc, #200]	; (80090a0 <__swsetup_r+0xcc>)
 8008fd6:	b570      	push	{r4, r5, r6, lr}
 8008fd8:	681d      	ldr	r5, [r3, #0]
 8008fda:	4606      	mov	r6, r0
 8008fdc:	460c      	mov	r4, r1
 8008fde:	b125      	cbz	r5, 8008fea <__swsetup_r+0x16>
 8008fe0:	69ab      	ldr	r3, [r5, #24]
 8008fe2:	b913      	cbnz	r3, 8008fea <__swsetup_r+0x16>
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f000 f985 	bl	80092f4 <__sinit>
 8008fea:	4b2e      	ldr	r3, [pc, #184]	; (80090a4 <__swsetup_r+0xd0>)
 8008fec:	429c      	cmp	r4, r3
 8008fee:	d10f      	bne.n	8009010 <__swsetup_r+0x3c>
 8008ff0:	686c      	ldr	r4, [r5, #4]
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ff8:	0719      	lsls	r1, r3, #28
 8008ffa:	d42c      	bmi.n	8009056 <__swsetup_r+0x82>
 8008ffc:	06dd      	lsls	r5, r3, #27
 8008ffe:	d411      	bmi.n	8009024 <__swsetup_r+0x50>
 8009000:	2309      	movs	r3, #9
 8009002:	6033      	str	r3, [r6, #0]
 8009004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	f04f 30ff 	mov.w	r0, #4294967295
 800900e:	e03e      	b.n	800908e <__swsetup_r+0xba>
 8009010:	4b25      	ldr	r3, [pc, #148]	; (80090a8 <__swsetup_r+0xd4>)
 8009012:	429c      	cmp	r4, r3
 8009014:	d101      	bne.n	800901a <__swsetup_r+0x46>
 8009016:	68ac      	ldr	r4, [r5, #8]
 8009018:	e7eb      	b.n	8008ff2 <__swsetup_r+0x1e>
 800901a:	4b24      	ldr	r3, [pc, #144]	; (80090ac <__swsetup_r+0xd8>)
 800901c:	429c      	cmp	r4, r3
 800901e:	bf08      	it	eq
 8009020:	68ec      	ldreq	r4, [r5, #12]
 8009022:	e7e6      	b.n	8008ff2 <__swsetup_r+0x1e>
 8009024:	0758      	lsls	r0, r3, #29
 8009026:	d512      	bpl.n	800904e <__swsetup_r+0x7a>
 8009028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800902a:	b141      	cbz	r1, 800903e <__swsetup_r+0x6a>
 800902c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009030:	4299      	cmp	r1, r3
 8009032:	d002      	beq.n	800903a <__swsetup_r+0x66>
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff fcd5 	bl	80089e4 <_free_r>
 800903a:	2300      	movs	r3, #0
 800903c:	6363      	str	r3, [r4, #52]	; 0x34
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	2300      	movs	r3, #0
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f043 0308 	orr.w	r3, r3, #8
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	b94b      	cbnz	r3, 800906e <__swsetup_r+0x9a>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009064:	d003      	beq.n	800906e <__swsetup_r+0x9a>
 8009066:	4621      	mov	r1, r4
 8009068:	4630      	mov	r0, r6
 800906a:	f000 fa09 	bl	8009480 <__smakebuf_r>
 800906e:	89a0      	ldrh	r0, [r4, #12]
 8009070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009074:	f010 0301 	ands.w	r3, r0, #1
 8009078:	d00a      	beq.n	8009090 <__swsetup_r+0xbc>
 800907a:	2300      	movs	r3, #0
 800907c:	60a3      	str	r3, [r4, #8]
 800907e:	6963      	ldr	r3, [r4, #20]
 8009080:	425b      	negs	r3, r3
 8009082:	61a3      	str	r3, [r4, #24]
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	b943      	cbnz	r3, 800909a <__swsetup_r+0xc6>
 8009088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800908c:	d1ba      	bne.n	8009004 <__swsetup_r+0x30>
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	0781      	lsls	r1, r0, #30
 8009092:	bf58      	it	pl
 8009094:	6963      	ldrpl	r3, [r4, #20]
 8009096:	60a3      	str	r3, [r4, #8]
 8009098:	e7f4      	b.n	8009084 <__swsetup_r+0xb0>
 800909a:	2000      	movs	r0, #0
 800909c:	e7f7      	b.n	800908e <__swsetup_r+0xba>
 800909e:	bf00      	nop
 80090a0:	2000060c 	.word	0x2000060c
 80090a4:	08009c9c 	.word	0x08009c9c
 80090a8:	08009cbc 	.word	0x08009cbc
 80090ac:	08009c7c 	.word	0x08009c7c

080090b0 <abort>:
 80090b0:	b508      	push	{r3, lr}
 80090b2:	2006      	movs	r0, #6
 80090b4:	f000 fa4c 	bl	8009550 <raise>
 80090b8:	2001      	movs	r0, #1
 80090ba:	f7f8 ff43 	bl	8001f44 <_exit>
	...

080090c0 <__sflush_r>:
 80090c0:	898a      	ldrh	r2, [r1, #12]
 80090c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c6:	4605      	mov	r5, r0
 80090c8:	0710      	lsls	r0, r2, #28
 80090ca:	460c      	mov	r4, r1
 80090cc:	d458      	bmi.n	8009180 <__sflush_r+0xc0>
 80090ce:	684b      	ldr	r3, [r1, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	dc05      	bgt.n	80090e0 <__sflush_r+0x20>
 80090d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dc02      	bgt.n	80090e0 <__sflush_r+0x20>
 80090da:	2000      	movs	r0, #0
 80090dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090e2:	2e00      	cmp	r6, #0
 80090e4:	d0f9      	beq.n	80090da <__sflush_r+0x1a>
 80090e6:	2300      	movs	r3, #0
 80090e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090ec:	682f      	ldr	r7, [r5, #0]
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	d032      	beq.n	8009158 <__sflush_r+0x98>
 80090f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	075a      	lsls	r2, r3, #29
 80090f8:	d505      	bpl.n	8009106 <__sflush_r+0x46>
 80090fa:	6863      	ldr	r3, [r4, #4]
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009100:	b10b      	cbz	r3, 8009106 <__sflush_r+0x46>
 8009102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009104:	1ac0      	subs	r0, r0, r3
 8009106:	2300      	movs	r3, #0
 8009108:	4602      	mov	r2, r0
 800910a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800910c:	6a21      	ldr	r1, [r4, #32]
 800910e:	4628      	mov	r0, r5
 8009110:	47b0      	blx	r6
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	d106      	bne.n	8009126 <__sflush_r+0x66>
 8009118:	6829      	ldr	r1, [r5, #0]
 800911a:	291d      	cmp	r1, #29
 800911c:	d82c      	bhi.n	8009178 <__sflush_r+0xb8>
 800911e:	4a2a      	ldr	r2, [pc, #168]	; (80091c8 <__sflush_r+0x108>)
 8009120:	40ca      	lsrs	r2, r1
 8009122:	07d6      	lsls	r6, r2, #31
 8009124:	d528      	bpl.n	8009178 <__sflush_r+0xb8>
 8009126:	2200      	movs	r2, #0
 8009128:	6062      	str	r2, [r4, #4]
 800912a:	04d9      	lsls	r1, r3, #19
 800912c:	6922      	ldr	r2, [r4, #16]
 800912e:	6022      	str	r2, [r4, #0]
 8009130:	d504      	bpl.n	800913c <__sflush_r+0x7c>
 8009132:	1c42      	adds	r2, r0, #1
 8009134:	d101      	bne.n	800913a <__sflush_r+0x7a>
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	b903      	cbnz	r3, 800913c <__sflush_r+0x7c>
 800913a:	6560      	str	r0, [r4, #84]	; 0x54
 800913c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800913e:	602f      	str	r7, [r5, #0]
 8009140:	2900      	cmp	r1, #0
 8009142:	d0ca      	beq.n	80090da <__sflush_r+0x1a>
 8009144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009148:	4299      	cmp	r1, r3
 800914a:	d002      	beq.n	8009152 <__sflush_r+0x92>
 800914c:	4628      	mov	r0, r5
 800914e:	f7ff fc49 	bl	80089e4 <_free_r>
 8009152:	2000      	movs	r0, #0
 8009154:	6360      	str	r0, [r4, #52]	; 0x34
 8009156:	e7c1      	b.n	80090dc <__sflush_r+0x1c>
 8009158:	6a21      	ldr	r1, [r4, #32]
 800915a:	2301      	movs	r3, #1
 800915c:	4628      	mov	r0, r5
 800915e:	47b0      	blx	r6
 8009160:	1c41      	adds	r1, r0, #1
 8009162:	d1c7      	bne.n	80090f4 <__sflush_r+0x34>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0c4      	beq.n	80090f4 <__sflush_r+0x34>
 800916a:	2b1d      	cmp	r3, #29
 800916c:	d001      	beq.n	8009172 <__sflush_r+0xb2>
 800916e:	2b16      	cmp	r3, #22
 8009170:	d101      	bne.n	8009176 <__sflush_r+0xb6>
 8009172:	602f      	str	r7, [r5, #0]
 8009174:	e7b1      	b.n	80090da <__sflush_r+0x1a>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	e7ad      	b.n	80090dc <__sflush_r+0x1c>
 8009180:	690f      	ldr	r7, [r1, #16]
 8009182:	2f00      	cmp	r7, #0
 8009184:	d0a9      	beq.n	80090da <__sflush_r+0x1a>
 8009186:	0793      	lsls	r3, r2, #30
 8009188:	680e      	ldr	r6, [r1, #0]
 800918a:	bf08      	it	eq
 800918c:	694b      	ldreq	r3, [r1, #20]
 800918e:	600f      	str	r7, [r1, #0]
 8009190:	bf18      	it	ne
 8009192:	2300      	movne	r3, #0
 8009194:	eba6 0807 	sub.w	r8, r6, r7
 8009198:	608b      	str	r3, [r1, #8]
 800919a:	f1b8 0f00 	cmp.w	r8, #0
 800919e:	dd9c      	ble.n	80090da <__sflush_r+0x1a>
 80091a0:	6a21      	ldr	r1, [r4, #32]
 80091a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091a4:	4643      	mov	r3, r8
 80091a6:	463a      	mov	r2, r7
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b0      	blx	r6
 80091ac:	2800      	cmp	r0, #0
 80091ae:	dc06      	bgt.n	80091be <__sflush_r+0xfe>
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b6:	81a3      	strh	r3, [r4, #12]
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	e78e      	b.n	80090dc <__sflush_r+0x1c>
 80091be:	4407      	add	r7, r0
 80091c0:	eba8 0800 	sub.w	r8, r8, r0
 80091c4:	e7e9      	b.n	800919a <__sflush_r+0xda>
 80091c6:	bf00      	nop
 80091c8:	20400001 	.word	0x20400001

080091cc <_fflush_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	690b      	ldr	r3, [r1, #16]
 80091d0:	4605      	mov	r5, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	b913      	cbnz	r3, 80091dc <_fflush_r+0x10>
 80091d6:	2500      	movs	r5, #0
 80091d8:	4628      	mov	r0, r5
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	b118      	cbz	r0, 80091e6 <_fflush_r+0x1a>
 80091de:	6983      	ldr	r3, [r0, #24]
 80091e0:	b90b      	cbnz	r3, 80091e6 <_fflush_r+0x1a>
 80091e2:	f000 f887 	bl	80092f4 <__sinit>
 80091e6:	4b14      	ldr	r3, [pc, #80]	; (8009238 <_fflush_r+0x6c>)
 80091e8:	429c      	cmp	r4, r3
 80091ea:	d11b      	bne.n	8009224 <_fflush_r+0x58>
 80091ec:	686c      	ldr	r4, [r5, #4]
 80091ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0ef      	beq.n	80091d6 <_fflush_r+0xa>
 80091f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091f8:	07d0      	lsls	r0, r2, #31
 80091fa:	d404      	bmi.n	8009206 <_fflush_r+0x3a>
 80091fc:	0599      	lsls	r1, r3, #22
 80091fe:	d402      	bmi.n	8009206 <_fflush_r+0x3a>
 8009200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009202:	f000 f915 	bl	8009430 <__retarget_lock_acquire_recursive>
 8009206:	4628      	mov	r0, r5
 8009208:	4621      	mov	r1, r4
 800920a:	f7ff ff59 	bl	80090c0 <__sflush_r>
 800920e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009210:	07da      	lsls	r2, r3, #31
 8009212:	4605      	mov	r5, r0
 8009214:	d4e0      	bmi.n	80091d8 <_fflush_r+0xc>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	059b      	lsls	r3, r3, #22
 800921a:	d4dd      	bmi.n	80091d8 <_fflush_r+0xc>
 800921c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921e:	f000 f908 	bl	8009432 <__retarget_lock_release_recursive>
 8009222:	e7d9      	b.n	80091d8 <_fflush_r+0xc>
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <_fflush_r+0x70>)
 8009226:	429c      	cmp	r4, r3
 8009228:	d101      	bne.n	800922e <_fflush_r+0x62>
 800922a:	68ac      	ldr	r4, [r5, #8]
 800922c:	e7df      	b.n	80091ee <_fflush_r+0x22>
 800922e:	4b04      	ldr	r3, [pc, #16]	; (8009240 <_fflush_r+0x74>)
 8009230:	429c      	cmp	r4, r3
 8009232:	bf08      	it	eq
 8009234:	68ec      	ldreq	r4, [r5, #12]
 8009236:	e7da      	b.n	80091ee <_fflush_r+0x22>
 8009238:	08009c9c 	.word	0x08009c9c
 800923c:	08009cbc 	.word	0x08009cbc
 8009240:	08009c7c 	.word	0x08009c7c

08009244 <std>:
 8009244:	2300      	movs	r3, #0
 8009246:	b510      	push	{r4, lr}
 8009248:	4604      	mov	r4, r0
 800924a:	e9c0 3300 	strd	r3, r3, [r0]
 800924e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009252:	6083      	str	r3, [r0, #8]
 8009254:	8181      	strh	r1, [r0, #12]
 8009256:	6643      	str	r3, [r0, #100]	; 0x64
 8009258:	81c2      	strh	r2, [r0, #14]
 800925a:	6183      	str	r3, [r0, #24]
 800925c:	4619      	mov	r1, r3
 800925e:	2208      	movs	r2, #8
 8009260:	305c      	adds	r0, #92	; 0x5c
 8009262:	f7fd fd1f 	bl	8006ca4 <memset>
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <std+0x38>)
 8009268:	6263      	str	r3, [r4, #36]	; 0x24
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <std+0x3c>)
 800926c:	62a3      	str	r3, [r4, #40]	; 0x28
 800926e:	4b05      	ldr	r3, [pc, #20]	; (8009284 <std+0x40>)
 8009270:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009272:	4b05      	ldr	r3, [pc, #20]	; (8009288 <std+0x44>)
 8009274:	6224      	str	r4, [r4, #32]
 8009276:	6323      	str	r3, [r4, #48]	; 0x30
 8009278:	bd10      	pop	{r4, pc}
 800927a:	bf00      	nop
 800927c:	08009589 	.word	0x08009589
 8009280:	080095ab 	.word	0x080095ab
 8009284:	080095e3 	.word	0x080095e3
 8009288:	08009607 	.word	0x08009607

0800928c <_cleanup_r>:
 800928c:	4901      	ldr	r1, [pc, #4]	; (8009294 <_cleanup_r+0x8>)
 800928e:	f000 b8af 	b.w	80093f0 <_fwalk_reent>
 8009292:	bf00      	nop
 8009294:	080091cd 	.word	0x080091cd

08009298 <__sfmoreglue>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	2268      	movs	r2, #104	; 0x68
 800929c:	1e4d      	subs	r5, r1, #1
 800929e:	4355      	muls	r5, r2
 80092a0:	460e      	mov	r6, r1
 80092a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092a6:	f7ff fc09 	bl	8008abc <_malloc_r>
 80092aa:	4604      	mov	r4, r0
 80092ac:	b140      	cbz	r0, 80092c0 <__sfmoreglue+0x28>
 80092ae:	2100      	movs	r1, #0
 80092b0:	e9c0 1600 	strd	r1, r6, [r0]
 80092b4:	300c      	adds	r0, #12
 80092b6:	60a0      	str	r0, [r4, #8]
 80092b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092bc:	f7fd fcf2 	bl	8006ca4 <memset>
 80092c0:	4620      	mov	r0, r4
 80092c2:	bd70      	pop	{r4, r5, r6, pc}

080092c4 <__sfp_lock_acquire>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__sfp_lock_acquire+0x8>)
 80092c6:	f000 b8b3 	b.w	8009430 <__retarget_lock_acquire_recursive>
 80092ca:	bf00      	nop
 80092cc:	20002551 	.word	0x20002551

080092d0 <__sfp_lock_release>:
 80092d0:	4801      	ldr	r0, [pc, #4]	; (80092d8 <__sfp_lock_release+0x8>)
 80092d2:	f000 b8ae 	b.w	8009432 <__retarget_lock_release_recursive>
 80092d6:	bf00      	nop
 80092d8:	20002551 	.word	0x20002551

080092dc <__sinit_lock_acquire>:
 80092dc:	4801      	ldr	r0, [pc, #4]	; (80092e4 <__sinit_lock_acquire+0x8>)
 80092de:	f000 b8a7 	b.w	8009430 <__retarget_lock_acquire_recursive>
 80092e2:	bf00      	nop
 80092e4:	20002552 	.word	0x20002552

080092e8 <__sinit_lock_release>:
 80092e8:	4801      	ldr	r0, [pc, #4]	; (80092f0 <__sinit_lock_release+0x8>)
 80092ea:	f000 b8a2 	b.w	8009432 <__retarget_lock_release_recursive>
 80092ee:	bf00      	nop
 80092f0:	20002552 	.word	0x20002552

080092f4 <__sinit>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	4604      	mov	r4, r0
 80092f8:	f7ff fff0 	bl	80092dc <__sinit_lock_acquire>
 80092fc:	69a3      	ldr	r3, [r4, #24]
 80092fe:	b11b      	cbz	r3, 8009308 <__sinit+0x14>
 8009300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009304:	f7ff bff0 	b.w	80092e8 <__sinit_lock_release>
 8009308:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800930c:	6523      	str	r3, [r4, #80]	; 0x50
 800930e:	4b13      	ldr	r3, [pc, #76]	; (800935c <__sinit+0x68>)
 8009310:	4a13      	ldr	r2, [pc, #76]	; (8009360 <__sinit+0x6c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	62a2      	str	r2, [r4, #40]	; 0x28
 8009316:	42a3      	cmp	r3, r4
 8009318:	bf04      	itt	eq
 800931a:	2301      	moveq	r3, #1
 800931c:	61a3      	streq	r3, [r4, #24]
 800931e:	4620      	mov	r0, r4
 8009320:	f000 f820 	bl	8009364 <__sfp>
 8009324:	6060      	str	r0, [r4, #4]
 8009326:	4620      	mov	r0, r4
 8009328:	f000 f81c 	bl	8009364 <__sfp>
 800932c:	60a0      	str	r0, [r4, #8]
 800932e:	4620      	mov	r0, r4
 8009330:	f000 f818 	bl	8009364 <__sfp>
 8009334:	2200      	movs	r2, #0
 8009336:	60e0      	str	r0, [r4, #12]
 8009338:	2104      	movs	r1, #4
 800933a:	6860      	ldr	r0, [r4, #4]
 800933c:	f7ff ff82 	bl	8009244 <std>
 8009340:	68a0      	ldr	r0, [r4, #8]
 8009342:	2201      	movs	r2, #1
 8009344:	2109      	movs	r1, #9
 8009346:	f7ff ff7d 	bl	8009244 <std>
 800934a:	68e0      	ldr	r0, [r4, #12]
 800934c:	2202      	movs	r2, #2
 800934e:	2112      	movs	r1, #18
 8009350:	f7ff ff78 	bl	8009244 <std>
 8009354:	2301      	movs	r3, #1
 8009356:	61a3      	str	r3, [r4, #24]
 8009358:	e7d2      	b.n	8009300 <__sinit+0xc>
 800935a:	bf00      	nop
 800935c:	08009900 	.word	0x08009900
 8009360:	0800928d 	.word	0x0800928d

08009364 <__sfp>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	4607      	mov	r7, r0
 8009368:	f7ff ffac 	bl	80092c4 <__sfp_lock_acquire>
 800936c:	4b1e      	ldr	r3, [pc, #120]	; (80093e8 <__sfp+0x84>)
 800936e:	681e      	ldr	r6, [r3, #0]
 8009370:	69b3      	ldr	r3, [r6, #24]
 8009372:	b913      	cbnz	r3, 800937a <__sfp+0x16>
 8009374:	4630      	mov	r0, r6
 8009376:	f7ff ffbd 	bl	80092f4 <__sinit>
 800937a:	3648      	adds	r6, #72	; 0x48
 800937c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009380:	3b01      	subs	r3, #1
 8009382:	d503      	bpl.n	800938c <__sfp+0x28>
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	b30b      	cbz	r3, 80093cc <__sfp+0x68>
 8009388:	6836      	ldr	r6, [r6, #0]
 800938a:	e7f7      	b.n	800937c <__sfp+0x18>
 800938c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009390:	b9d5      	cbnz	r5, 80093c8 <__sfp+0x64>
 8009392:	4b16      	ldr	r3, [pc, #88]	; (80093ec <__sfp+0x88>)
 8009394:	60e3      	str	r3, [r4, #12]
 8009396:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800939a:	6665      	str	r5, [r4, #100]	; 0x64
 800939c:	f000 f847 	bl	800942e <__retarget_lock_init_recursive>
 80093a0:	f7ff ff96 	bl	80092d0 <__sfp_lock_release>
 80093a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093ac:	6025      	str	r5, [r4, #0]
 80093ae:	61a5      	str	r5, [r4, #24]
 80093b0:	2208      	movs	r2, #8
 80093b2:	4629      	mov	r1, r5
 80093b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093b8:	f7fd fc74 	bl	8006ca4 <memset>
 80093bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093c4:	4620      	mov	r0, r4
 80093c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c8:	3468      	adds	r4, #104	; 0x68
 80093ca:	e7d9      	b.n	8009380 <__sfp+0x1c>
 80093cc:	2104      	movs	r1, #4
 80093ce:	4638      	mov	r0, r7
 80093d0:	f7ff ff62 	bl	8009298 <__sfmoreglue>
 80093d4:	4604      	mov	r4, r0
 80093d6:	6030      	str	r0, [r6, #0]
 80093d8:	2800      	cmp	r0, #0
 80093da:	d1d5      	bne.n	8009388 <__sfp+0x24>
 80093dc:	f7ff ff78 	bl	80092d0 <__sfp_lock_release>
 80093e0:	230c      	movs	r3, #12
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	e7ee      	b.n	80093c4 <__sfp+0x60>
 80093e6:	bf00      	nop
 80093e8:	08009900 	.word	0x08009900
 80093ec:	ffff0001 	.word	0xffff0001

080093f0 <_fwalk_reent>:
 80093f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f4:	4606      	mov	r6, r0
 80093f6:	4688      	mov	r8, r1
 80093f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093fc:	2700      	movs	r7, #0
 80093fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009402:	f1b9 0901 	subs.w	r9, r9, #1
 8009406:	d505      	bpl.n	8009414 <_fwalk_reent+0x24>
 8009408:	6824      	ldr	r4, [r4, #0]
 800940a:	2c00      	cmp	r4, #0
 800940c:	d1f7      	bne.n	80093fe <_fwalk_reent+0xe>
 800940e:	4638      	mov	r0, r7
 8009410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009414:	89ab      	ldrh	r3, [r5, #12]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d907      	bls.n	800942a <_fwalk_reent+0x3a>
 800941a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800941e:	3301      	adds	r3, #1
 8009420:	d003      	beq.n	800942a <_fwalk_reent+0x3a>
 8009422:	4629      	mov	r1, r5
 8009424:	4630      	mov	r0, r6
 8009426:	47c0      	blx	r8
 8009428:	4307      	orrs	r7, r0
 800942a:	3568      	adds	r5, #104	; 0x68
 800942c:	e7e9      	b.n	8009402 <_fwalk_reent+0x12>

0800942e <__retarget_lock_init_recursive>:
 800942e:	4770      	bx	lr

08009430 <__retarget_lock_acquire_recursive>:
 8009430:	4770      	bx	lr

08009432 <__retarget_lock_release_recursive>:
 8009432:	4770      	bx	lr

08009434 <__swhatbuf_r>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	460e      	mov	r6, r1
 8009438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943c:	2900      	cmp	r1, #0
 800943e:	b096      	sub	sp, #88	; 0x58
 8009440:	4614      	mov	r4, r2
 8009442:	461d      	mov	r5, r3
 8009444:	da08      	bge.n	8009458 <__swhatbuf_r+0x24>
 8009446:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	602a      	str	r2, [r5, #0]
 800944e:	061a      	lsls	r2, r3, #24
 8009450:	d410      	bmi.n	8009474 <__swhatbuf_r+0x40>
 8009452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009456:	e00e      	b.n	8009476 <__swhatbuf_r+0x42>
 8009458:	466a      	mov	r2, sp
 800945a:	f000 f8fb 	bl	8009654 <_fstat_r>
 800945e:	2800      	cmp	r0, #0
 8009460:	dbf1      	blt.n	8009446 <__swhatbuf_r+0x12>
 8009462:	9a01      	ldr	r2, [sp, #4]
 8009464:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009468:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800946c:	425a      	negs	r2, r3
 800946e:	415a      	adcs	r2, r3
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	e7ee      	b.n	8009452 <__swhatbuf_r+0x1e>
 8009474:	2340      	movs	r3, #64	; 0x40
 8009476:	2000      	movs	r0, #0
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	b016      	add	sp, #88	; 0x58
 800947c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009480 <__smakebuf_r>:
 8009480:	898b      	ldrh	r3, [r1, #12]
 8009482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009484:	079d      	lsls	r5, r3, #30
 8009486:	4606      	mov	r6, r0
 8009488:	460c      	mov	r4, r1
 800948a:	d507      	bpl.n	800949c <__smakebuf_r+0x1c>
 800948c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	6123      	str	r3, [r4, #16]
 8009494:	2301      	movs	r3, #1
 8009496:	6163      	str	r3, [r4, #20]
 8009498:	b002      	add	sp, #8
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	ab01      	add	r3, sp, #4
 800949e:	466a      	mov	r2, sp
 80094a0:	f7ff ffc8 	bl	8009434 <__swhatbuf_r>
 80094a4:	9900      	ldr	r1, [sp, #0]
 80094a6:	4605      	mov	r5, r0
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7ff fb07 	bl	8008abc <_malloc_r>
 80094ae:	b948      	cbnz	r0, 80094c4 <__smakebuf_r+0x44>
 80094b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b4:	059a      	lsls	r2, r3, #22
 80094b6:	d4ef      	bmi.n	8009498 <__smakebuf_r+0x18>
 80094b8:	f023 0303 	bic.w	r3, r3, #3
 80094bc:	f043 0302 	orr.w	r3, r3, #2
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	e7e3      	b.n	800948c <__smakebuf_r+0xc>
 80094c4:	4b0d      	ldr	r3, [pc, #52]	; (80094fc <__smakebuf_r+0x7c>)
 80094c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	6020      	str	r0, [r4, #0]
 80094cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	6163      	str	r3, [r4, #20]
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	6120      	str	r0, [r4, #16]
 80094da:	b15b      	cbz	r3, 80094f4 <__smakebuf_r+0x74>
 80094dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f8c9 	bl	8009678 <_isatty_r>
 80094e6:	b128      	cbz	r0, 80094f4 <__smakebuf_r+0x74>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	89a0      	ldrh	r0, [r4, #12]
 80094f6:	4305      	orrs	r5, r0
 80094f8:	81a5      	strh	r5, [r4, #12]
 80094fa:	e7cd      	b.n	8009498 <__smakebuf_r+0x18>
 80094fc:	0800928d 	.word	0x0800928d

08009500 <_raise_r>:
 8009500:	291f      	cmp	r1, #31
 8009502:	b538      	push	{r3, r4, r5, lr}
 8009504:	4604      	mov	r4, r0
 8009506:	460d      	mov	r5, r1
 8009508:	d904      	bls.n	8009514 <_raise_r+0x14>
 800950a:	2316      	movs	r3, #22
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	f04f 30ff 	mov.w	r0, #4294967295
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009516:	b112      	cbz	r2, 800951e <_raise_r+0x1e>
 8009518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800951c:	b94b      	cbnz	r3, 8009532 <_raise_r+0x32>
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f830 	bl	8009584 <_getpid_r>
 8009524:	462a      	mov	r2, r5
 8009526:	4601      	mov	r1, r0
 8009528:	4620      	mov	r0, r4
 800952a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800952e:	f000 b817 	b.w	8009560 <_kill_r>
 8009532:	2b01      	cmp	r3, #1
 8009534:	d00a      	beq.n	800954c <_raise_r+0x4c>
 8009536:	1c59      	adds	r1, r3, #1
 8009538:	d103      	bne.n	8009542 <_raise_r+0x42>
 800953a:	2316      	movs	r3, #22
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	2001      	movs	r0, #1
 8009540:	e7e7      	b.n	8009512 <_raise_r+0x12>
 8009542:	2400      	movs	r4, #0
 8009544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009548:	4628      	mov	r0, r5
 800954a:	4798      	blx	r3
 800954c:	2000      	movs	r0, #0
 800954e:	e7e0      	b.n	8009512 <_raise_r+0x12>

08009550 <raise>:
 8009550:	4b02      	ldr	r3, [pc, #8]	; (800955c <raise+0xc>)
 8009552:	4601      	mov	r1, r0
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f7ff bfd3 	b.w	8009500 <_raise_r>
 800955a:	bf00      	nop
 800955c:	2000060c 	.word	0x2000060c

08009560 <_kill_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d07      	ldr	r5, [pc, #28]	; (8009580 <_kill_r+0x20>)
 8009564:	2300      	movs	r3, #0
 8009566:	4604      	mov	r4, r0
 8009568:	4608      	mov	r0, r1
 800956a:	4611      	mov	r1, r2
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	f7f8 fcd9 	bl	8001f24 <_kill>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d102      	bne.n	800957c <_kill_r+0x1c>
 8009576:	682b      	ldr	r3, [r5, #0]
 8009578:	b103      	cbz	r3, 800957c <_kill_r+0x1c>
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	bd38      	pop	{r3, r4, r5, pc}
 800957e:	bf00      	nop
 8009580:	2000254c 	.word	0x2000254c

08009584 <_getpid_r>:
 8009584:	f7f8 bcc6 	b.w	8001f14 <_getpid>

08009588 <__sread>:
 8009588:	b510      	push	{r4, lr}
 800958a:	460c      	mov	r4, r1
 800958c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009590:	f000 f894 	bl	80096bc <_read_r>
 8009594:	2800      	cmp	r0, #0
 8009596:	bfab      	itete	ge
 8009598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800959a:	89a3      	ldrhlt	r3, [r4, #12]
 800959c:	181b      	addge	r3, r3, r0
 800959e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095a2:	bfac      	ite	ge
 80095a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80095a6:	81a3      	strhlt	r3, [r4, #12]
 80095a8:	bd10      	pop	{r4, pc}

080095aa <__swrite>:
 80095aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ae:	461f      	mov	r7, r3
 80095b0:	898b      	ldrh	r3, [r1, #12]
 80095b2:	05db      	lsls	r3, r3, #23
 80095b4:	4605      	mov	r5, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	4616      	mov	r6, r2
 80095ba:	d505      	bpl.n	80095c8 <__swrite+0x1e>
 80095bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c0:	2302      	movs	r3, #2
 80095c2:	2200      	movs	r2, #0
 80095c4:	f000 f868 	bl	8009698 <_lseek_r>
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095d2:	81a3      	strh	r3, [r4, #12]
 80095d4:	4632      	mov	r2, r6
 80095d6:	463b      	mov	r3, r7
 80095d8:	4628      	mov	r0, r5
 80095da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095de:	f000 b817 	b.w	8009610 <_write_r>

080095e2 <__sseek>:
 80095e2:	b510      	push	{r4, lr}
 80095e4:	460c      	mov	r4, r1
 80095e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ea:	f000 f855 	bl	8009698 <_lseek_r>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	bf15      	itete	ne
 80095f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80095f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095fe:	81a3      	strheq	r3, [r4, #12]
 8009600:	bf18      	it	ne
 8009602:	81a3      	strhne	r3, [r4, #12]
 8009604:	bd10      	pop	{r4, pc}

08009606 <__sclose>:
 8009606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960a:	f000 b813 	b.w	8009634 <_close_r>
	...

08009610 <_write_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	; (8009630 <_write_r+0x20>)
 8009614:	4604      	mov	r4, r0
 8009616:	4608      	mov	r0, r1
 8009618:	4611      	mov	r1, r2
 800961a:	2200      	movs	r2, #0
 800961c:	602a      	str	r2, [r5, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	f7f8 fcb7 	bl	8001f92 <_write>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_write_r+0x1e>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_write_r+0x1e>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	2000254c 	.word	0x2000254c

08009634 <_close_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d06      	ldr	r5, [pc, #24]	; (8009650 <_close_r+0x1c>)
 8009638:	2300      	movs	r3, #0
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f8 fcc3 	bl	8001fca <_close>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_close_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_close_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	2000254c 	.word	0x2000254c

08009654 <_fstat_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_fstat_r+0x20>)
 8009658:	2300      	movs	r3, #0
 800965a:	4604      	mov	r4, r0
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	f7f8 fcbe 	bl	8001fe2 <_fstat>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d102      	bne.n	8009670 <_fstat_r+0x1c>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	b103      	cbz	r3, 8009670 <_fstat_r+0x1c>
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	2000254c 	.word	0x2000254c

08009678 <_isatty_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d06      	ldr	r5, [pc, #24]	; (8009694 <_isatty_r+0x1c>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	f7f8 fcbd 	bl	8002002 <_isatty>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_isatty_r+0x1a>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_isatty_r+0x1a>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	2000254c 	.word	0x2000254c

08009698 <_lseek_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d07      	ldr	r5, [pc, #28]	; (80096b8 <_lseek_r+0x20>)
 800969c:	4604      	mov	r4, r0
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f7f8 fcb6 	bl	8002018 <_lseek>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_lseek_r+0x1e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_lseek_r+0x1e>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	2000254c 	.word	0x2000254c

080096bc <_read_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d07      	ldr	r5, [pc, #28]	; (80096dc <_read_r+0x20>)
 80096c0:	4604      	mov	r4, r0
 80096c2:	4608      	mov	r0, r1
 80096c4:	4611      	mov	r1, r2
 80096c6:	2200      	movs	r2, #0
 80096c8:	602a      	str	r2, [r5, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f7f8 fc44 	bl	8001f58 <_read>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_read_r+0x1e>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_read_r+0x1e>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	2000254c 	.word	0x2000254c

080096e0 <sqrt>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	ed2d 8b02 	vpush	{d8}
 80096e6:	ec55 4b10 	vmov	r4, r5, d0
 80096ea:	f000 f825 	bl	8009738 <__ieee754_sqrt>
 80096ee:	4622      	mov	r2, r4
 80096f0:	462b      	mov	r3, r5
 80096f2:	4620      	mov	r0, r4
 80096f4:	4629      	mov	r1, r5
 80096f6:	eeb0 8a40 	vmov.f32	s16, s0
 80096fa:	eef0 8a60 	vmov.f32	s17, s1
 80096fe:	f7f7 fa25 	bl	8000b4c <__aeabi_dcmpun>
 8009702:	b990      	cbnz	r0, 800972a <sqrt+0x4a>
 8009704:	2200      	movs	r2, #0
 8009706:	2300      	movs	r3, #0
 8009708:	4620      	mov	r0, r4
 800970a:	4629      	mov	r1, r5
 800970c:	f7f7 f9f6 	bl	8000afc <__aeabi_dcmplt>
 8009710:	b158      	cbz	r0, 800972a <sqrt+0x4a>
 8009712:	f7fd fa9d 	bl	8006c50 <__errno>
 8009716:	2321      	movs	r3, #33	; 0x21
 8009718:	6003      	str	r3, [r0, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	2300      	movs	r3, #0
 800971e:	4610      	mov	r0, r2
 8009720:	4619      	mov	r1, r3
 8009722:	f7f7 f8a3 	bl	800086c <__aeabi_ddiv>
 8009726:	ec41 0b18 	vmov	d8, r0, r1
 800972a:	eeb0 0a48 	vmov.f32	s0, s16
 800972e:	eef0 0a68 	vmov.f32	s1, s17
 8009732:	ecbd 8b02 	vpop	{d8}
 8009736:	bd38      	pop	{r3, r4, r5, pc}

08009738 <__ieee754_sqrt>:
 8009738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	ec55 4b10 	vmov	r4, r5, d0
 8009740:	4e55      	ldr	r6, [pc, #340]	; (8009898 <__ieee754_sqrt+0x160>)
 8009742:	43ae      	bics	r6, r5
 8009744:	ee10 0a10 	vmov	r0, s0
 8009748:	ee10 3a10 	vmov	r3, s0
 800974c:	462a      	mov	r2, r5
 800974e:	4629      	mov	r1, r5
 8009750:	d110      	bne.n	8009774 <__ieee754_sqrt+0x3c>
 8009752:	ee10 2a10 	vmov	r2, s0
 8009756:	462b      	mov	r3, r5
 8009758:	f7f6 ff5e 	bl	8000618 <__aeabi_dmul>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4620      	mov	r0, r4
 8009762:	4629      	mov	r1, r5
 8009764:	f7f6 fda2 	bl	80002ac <__adddf3>
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	ec45 4b10 	vmov	d0, r4, r5
 8009770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009774:	2d00      	cmp	r5, #0
 8009776:	dc10      	bgt.n	800979a <__ieee754_sqrt+0x62>
 8009778:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800977c:	4330      	orrs	r0, r6
 800977e:	d0f5      	beq.n	800976c <__ieee754_sqrt+0x34>
 8009780:	b15d      	cbz	r5, 800979a <__ieee754_sqrt+0x62>
 8009782:	ee10 2a10 	vmov	r2, s0
 8009786:	462b      	mov	r3, r5
 8009788:	ee10 0a10 	vmov	r0, s0
 800978c:	f7f6 fd8c 	bl	80002a8 <__aeabi_dsub>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	f7f7 f86a 	bl	800086c <__aeabi_ddiv>
 8009798:	e7e6      	b.n	8009768 <__ieee754_sqrt+0x30>
 800979a:	1512      	asrs	r2, r2, #20
 800979c:	d074      	beq.n	8009888 <__ieee754_sqrt+0x150>
 800979e:	07d4      	lsls	r4, r2, #31
 80097a0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80097a4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80097a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80097ac:	bf5e      	ittt	pl
 80097ae:	0fda      	lsrpl	r2, r3, #31
 80097b0:	005b      	lslpl	r3, r3, #1
 80097b2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80097b6:	2400      	movs	r4, #0
 80097b8:	0fda      	lsrs	r2, r3, #31
 80097ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80097be:	107f      	asrs	r7, r7, #1
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	2516      	movs	r5, #22
 80097c4:	4620      	mov	r0, r4
 80097c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80097ca:	1886      	adds	r6, r0, r2
 80097cc:	428e      	cmp	r6, r1
 80097ce:	bfde      	ittt	le
 80097d0:	1b89      	suble	r1, r1, r6
 80097d2:	18b0      	addle	r0, r6, r2
 80097d4:	18a4      	addle	r4, r4, r2
 80097d6:	0049      	lsls	r1, r1, #1
 80097d8:	3d01      	subs	r5, #1
 80097da:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80097de:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80097e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097e6:	d1f0      	bne.n	80097ca <__ieee754_sqrt+0x92>
 80097e8:	462a      	mov	r2, r5
 80097ea:	f04f 0e20 	mov.w	lr, #32
 80097ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80097f2:	4281      	cmp	r1, r0
 80097f4:	eb06 0c05 	add.w	ip, r6, r5
 80097f8:	dc02      	bgt.n	8009800 <__ieee754_sqrt+0xc8>
 80097fa:	d113      	bne.n	8009824 <__ieee754_sqrt+0xec>
 80097fc:	459c      	cmp	ip, r3
 80097fe:	d811      	bhi.n	8009824 <__ieee754_sqrt+0xec>
 8009800:	f1bc 0f00 	cmp.w	ip, #0
 8009804:	eb0c 0506 	add.w	r5, ip, r6
 8009808:	da43      	bge.n	8009892 <__ieee754_sqrt+0x15a>
 800980a:	2d00      	cmp	r5, #0
 800980c:	db41      	blt.n	8009892 <__ieee754_sqrt+0x15a>
 800980e:	f100 0801 	add.w	r8, r0, #1
 8009812:	1a09      	subs	r1, r1, r0
 8009814:	459c      	cmp	ip, r3
 8009816:	bf88      	it	hi
 8009818:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800981c:	eba3 030c 	sub.w	r3, r3, ip
 8009820:	4432      	add	r2, r6
 8009822:	4640      	mov	r0, r8
 8009824:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009828:	f1be 0e01 	subs.w	lr, lr, #1
 800982c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009830:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009834:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009838:	d1db      	bne.n	80097f2 <__ieee754_sqrt+0xba>
 800983a:	430b      	orrs	r3, r1
 800983c:	d006      	beq.n	800984c <__ieee754_sqrt+0x114>
 800983e:	1c50      	adds	r0, r2, #1
 8009840:	bf13      	iteet	ne
 8009842:	3201      	addne	r2, #1
 8009844:	3401      	addeq	r4, #1
 8009846:	4672      	moveq	r2, lr
 8009848:	f022 0201 	bicne.w	r2, r2, #1
 800984c:	1063      	asrs	r3, r4, #1
 800984e:	0852      	lsrs	r2, r2, #1
 8009850:	07e1      	lsls	r1, r4, #31
 8009852:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009856:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800985a:	bf48      	it	mi
 800985c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009860:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009864:	4614      	mov	r4, r2
 8009866:	e781      	b.n	800976c <__ieee754_sqrt+0x34>
 8009868:	0ad9      	lsrs	r1, r3, #11
 800986a:	3815      	subs	r0, #21
 800986c:	055b      	lsls	r3, r3, #21
 800986e:	2900      	cmp	r1, #0
 8009870:	d0fa      	beq.n	8009868 <__ieee754_sqrt+0x130>
 8009872:	02cd      	lsls	r5, r1, #11
 8009874:	d50a      	bpl.n	800988c <__ieee754_sqrt+0x154>
 8009876:	f1c2 0420 	rsb	r4, r2, #32
 800987a:	fa23 f404 	lsr.w	r4, r3, r4
 800987e:	1e55      	subs	r5, r2, #1
 8009880:	4093      	lsls	r3, r2
 8009882:	4321      	orrs	r1, r4
 8009884:	1b42      	subs	r2, r0, r5
 8009886:	e78a      	b.n	800979e <__ieee754_sqrt+0x66>
 8009888:	4610      	mov	r0, r2
 800988a:	e7f0      	b.n	800986e <__ieee754_sqrt+0x136>
 800988c:	0049      	lsls	r1, r1, #1
 800988e:	3201      	adds	r2, #1
 8009890:	e7ef      	b.n	8009872 <__ieee754_sqrt+0x13a>
 8009892:	4680      	mov	r8, r0
 8009894:	e7bd      	b.n	8009812 <__ieee754_sqrt+0xda>
 8009896:	bf00      	nop
 8009898:	7ff00000 	.word	0x7ff00000

0800989c <_init>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr

080098a8 <_fini>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr
